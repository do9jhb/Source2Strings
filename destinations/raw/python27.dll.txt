!This program cannot be run in DOS mode.
`.rdata
@.reloc
\$ VAUAVH
L9g u*H
H)_(H)_ H+
WATAUAVAWH
x[E;t$@uAH
 A_A^A]A\_
|$ ATAUAVH
 A^A]A\
l$ VWAVH
B(9A@t"H
E'L9u/u
G<9G@tGH
\$hIc\$,H
ATAVAWH
0A_A^A\
L$pH99u
\$ VAUAVH
t$ WAUAVH
l$ WAUAVH
H9t$P~AH
t$hHct$`H
@UVATAUH
(A]A\^]
@SUWAVH
UVWATAUAVAWH
 A_A^A]A\_^]
UVWATAUAVAWH
 A_A^A]A\_^]
UVWATAUAVAWH
@A_A^A]A\_^]
 <}t{<,uAH
L$ UVWATAUAVAWH
 A_A^A]A\_^]
t$ WATAUH
 <]tg<,u<H
VWATAUAVH
 A^A]A\_^
 <1|#<9
!<0|'<9
										
																											
												
										
							
										
																											
												
										
							
SUVWAUAVAWH
0A_A^A]_^][
|$ ATAUAVH
 A^A]A\
WATAUAWH
HA_A]A\_
h93w	;s
@SATAUAVAWH
 A_A^A]A\[
H9G |&H
 A_A^A]A\[
SUVWATAUAVAWH
(A_A^A]A\_^][
h93w	;s
@SATAUAVAWH
 A_A^A]A\[
H9G |&H
 A_A^A]A\[
SUVWATAUAVAWH
(A_A^A]A\_^][
tKI;RH}EI
L$PH;L$`u
L$`H;D$h
u#H;\$h
x@H;QH}:L
|$PH;]H}2H
x'H;CH}!H
|$ I9uH~YL
USWATAUAWH
A_A]A\_[]
L$(HcD$ 3
L$8Hc|$hL
A_A]A\_[]
L$Hz(u&
D$Hz(u&
t$ WATAUAVAWH
UUUUUUU
 A_A^A]A\_
H9Q |"H
VWAUAVAWH
 A_A^A]_^
G(L;C(t
K(H;O(t!H
T$@xWH;
H9\$x~HL
G(H9A(t
VUUUUUUUH
<0rD<9w@
~+fffff
L$ SUWH
t$ WATAUAVAWH
 A_A^A]A\_
UVATAVH
HA^A\^]
VWATAUAVH
0A^A]A\_^
UUUUUUU
\$ UWAUH
@SATAUH
t;fffffff
66666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666
666666666666666666666666666666666666666
6666666666666666666
 !6"6666#666$%&'(6)*+,6-66./0123466666665
555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555
5555555555555555555
 5!5555"555#$%&'5()*+5,55-./012355555554
@SVWATH
SUVWATAUAVAWH
(A_A^A]A\_^][
@SUVATAUH
@A]A\^][
|$ UATAUAVAWH
A_A^A]A\]
VWAUAVAWH
 A_A^A]_^
|$ ATAUAVH
SUVATAUAWH
A_A]A\^][
@UATAUH
UVWATAUH
`A]A\_^]
UVWATAUH
A]A\_^]
@SUVWATH
PA\_^][
D$@9D$Du+H
;L9k u!H
t$ WATAVH
|$@I9\$
~Rfffff
;D$0t H
9T$`~Pfff
t$(H;|$P}:H
UVWATAUH
PA]A\_^]
H9A0}'H
H9{0}FH
SUWAUAWH
PA_A]_][
\$ WATAUH
C(H9l$xI
t$ WAUAVH
|$ ATAUAVH
 A^A]A\
@SUVAUAVAWH
(A_A^A]^][
|$ ATAUAVH
 A^A]A\
WATAUAVAWH
 A_A^A]A\_
WATAUAVAWH
 A_A^A]A\_
UATAUAVAWH
 A_A^A]A\]
@SUVWATAUAVAWH
xA_A^A]A\_^][
)D$0vSf
:H;|$(|"L
UVWATAUAVAWH
@A_A^A]A\_^]
H;D$Pt!H
H9T$P~"f
D$0H;T$P|
@USWATAWH
pA_A\_[]
t$8fffff
D$8H;D$@
WATAUAVAWH
 A_A^A]A\_
~_f9QxuY
A fD9H(tiH
t$ WATAUH
T$ fD94*u!Hc
VWATAVAWH
 A_A^A\_^
WATAUAVAWH
 A_A^A]A\_
 !"#$%&'()///////*+/,////////-/.
t$ WATAUH
@USVWATH
UVWATAUH
pA]A\_^]
ATAUAVH
UATAUAVAWH
A_A^A]A\]
UWATAVAWH
A_A^A\_]
t9ffffff
UVWATAUAVAWH
A_A^A]A\_^]
D$ ffff
UVWATAUAVAWH
A_A^A]A\_^]
D$ ffff
UATAUAVAWH
A_A^A]A\]
tQHcL$@
VWAUAVAWH
 A_A^A]_^
tIH9l$Hu%L
@USWATH
|@ffffff
~4fffff
L9l$`~]H
L9d$`~yH
D$hH9D$`t
H9\$`~,f
 H;\$`|
SUVATAWH
 A_A\^][
u 9D$8u
, D9l$Pu
SAUAVAWH
A_A^A][
T$ 8D$ t
u:D9v(u4
t-fffffff
ChD#C|D
\$0)x(H
C0D9`<t
S(9C8sq
C0D9`<t
C0D9`<tN
D9c(t)H
[,D9c(A
|$ ATAUAVAW
A_A^A]A\
|$ ATAUAVH
CLD#C|L#
 A^A]A\
WATAUAVAWH
CLD#C|L#
CLD#K|L#
 A_A^A]A\_
@SUWAUAVH
 A^A]_][
Q H9Q0u
 A^A]_][
WATAUAVAWH
A_A^A]A\_
uM9o\uH
9o\u	9o
a L9a0u
UATAVAWH
GpA9G|r
wDA9W0s	
A9OLv&L
xA_A^A\]
SUVWATAUAVAWH
8A_A^A]A\_^][
q H9q0u
FpA9F|s^f
FpA9F|r
USVWATAVAWH
MhfD9"t
A_A^A\_^[]
LcL$@I+
|$ ATAUAVH
 A^A]A\
fffffff
|$ ATAUAVM
|$8A^A]A\
WATAUAVAWM
f#T$Hf;
t$@A_A^A]A\_
|$ ATAUAVAWM
fD98uJM
fD98t7I
|$@A_A^A]A\
|$ ATAUAVAWI
|$@A_A^A]A\
|$ ATAUAVAWM
fD9(uFK
|$@A_A^A]A\
WATAUAVAWM
sZD93u!I
f#|$Hf;
t$@A_A^A]A\_
|$ ATAUAVH
fD90t;I
|$8A^A]A\
fffffff
|$ ATAUAVAWI
|$@A_A^A]A\
|$ ATAUAVAWI
|$@A_A^A]A\
fffffff
UVWATAUAVAWH
0A_A^A]A\_^]
tK<.uGA
H WATAUAVAWH
<(ts<)to<$tk<.tg<&tcA
tA<Nu=H
0A_A^A]A\_
fffffff
|$ ATAUAVAWM
|$@A_A^A]A\
|$ ATAUAVAWM
A`<?w.I
|$@A_A^A]A\
WATAUAVAWH
 A_A^A]A\_
|$ ATAUAVAWI
u%<}u!A
fD9(uSO
|$@A_A^A]A\
WATAUAVAWM
f#L$Hf;
t$@A_A^A]A\_
|$ ATAUM
fD9(t3I
|$0A]A\
WATAUAVAWI
f#L$HfA;
t$@A_A^A]A\_
fD9 t1I
WATAUAVAWH
 A_A^A]A\_
|$ ATAUAVAWI
H</t@<Ou
u%<}u!A
|$@A_A^A]A\
fffffff
|$ ATAUAVAWM
|$@A_A^A]A\
|$ ATAUAVI
fD90t<H
|$8A^A]A\
|$ ATAUAVM
|$8A^A]A\
fD9 uHH
fD9 t1I
WATAUAVAWI
f#T$HfA;
t$@A_A^A]A\_
|$ ATAUAVAWM
fffffff
|$@A_A^A]A\
fffffff
|$ ATAUM
|$0A]A\
|$ ATAUAVI
|$8A^A]A\
|$ ATAUAVH
|$ UATAVH
@SVWATAWH
0A_A\_^[
@USWAWH
D$0H9D$ sBL
D$0H9D$ s
L$HL99u
L$PL99u
UWATAVAWH
A_A^A\_]
C`H9CX}Lf
C`H9CX|
CpD9c t
C@H9CX~
C@D9c t
{xL)[`H
K`L)[HL)[@H+
cXH9|$0
x'H+{@t!H
H;{x~aL
Cp9s tCH
@UWATAWH
(A_A\_]
l$`9} t
(A_A\_]
D$09{ tnH
Cp9{$t-H
l$09^ t-H
\$ VWAUH
l$@D9i t
D9k$t H
CxH9CP}nH
L$@L9)u
L$PL9)u
xOH;|$@t8H
L$0H99uRH
UVWATAUAVAWH
pA_A^A]A\_^]
t7H9t$@
P0H;t$@
1H;W ~!H
P0H9{Xt
CH@8{2t(D
L$`L9!u
T$P	C H
C[D8cYu*
D8cYtDD
|$`8^]trH
L$PH9)u
L$XH9)u
L$PH9)u
L$PL9!u
|$PD8cXt+
H9}8u&H
USVWATAUH
XA]A\_^[]
@USWAWH
t$`D8{\u
t5I;	t03
L$HL9!u
L$@L9!u
L$HL9!u
UWATAUAVH
A^A]A\_]
7H9D$@t4H
D$@H;T$H|
H;S }DH
gH;y }#H
~Ufffff
UVATAUH
(A]A\^]
E84*uFH
(A]A\^]
UVWAUAVH
@A^A]_^]
VWATAUAWH
0A_A]A\_^
@UWATAUAVH
 A^A]A\_]
VATAUAVAWH
 A_A^A]A\^
F84+tGH
 A_A^A]A\^
l$ VATAUH
t$ ATAUAVH
F8,#t9H
 A^A]A\
UVATAVAWH
@A_A^A\^]
~Offfff
D84+uHH
@A_A^A\^]
sMLc\$P
<	u1HcD$P
UWATAUAVH
A^A]A\_]
UVWATAUAVAWH
A_A^A]A\_^]
UVWATAVH
A^A\_^]
UVWATAVH
A^A\_^]
@UVATAUAWH
0A_A]A\^]
l$pfffff
0A_A]A\^]
WATAUAVAWH
 A_A^A]A\_
SUVWATAVH
8A^A\_^][
l$ VWATAUAWH
 A_A]A\_^
VWATAUAVH
0A^A]A\_^
SUVWATAUAVAWH
(A_A^A]A\_^][
SUVWAWH
@A__^][
t<H9h t6H
D$0xqH;C
UWATAWH
HA_A\_]
|$ ATAUAVH
 A^A]A\
@UATAUAVAWH
 A_A^A]A\]
nothing
@UATAUH
UVWATAUAVAWH
0A_A^A]A\_^]
O`+K`ulH
t$ WATAUAVAWH
A_A^A]A\_
)t$`H9s
)t$pH9s
)t$`L9c
@USVWATAUAVH
<+t!<-t
H;MXtLH
`A^A]A\_^[]
@UVWATAUH
A]A\_^]
UVWATAUAVAWH
tiL9?ubH
L$pM;i(
L$pM;i(u<H9]
0A_A^A]A\_^]
@VAUAVH
l$ VATAUH
UUUUUUU
@UATAUH
L9m0t;H
ATAUAWH
0A_A]A\
@UATAVH
WATAUAVAWH
 A_A^A]A\_
l$ H9y |~
L$hH99u
|$ ATAUAVH
H9E@uSH
H9F@u5E
H9G@uSH
< tp<NtlH
|$ ATAUAVH
UVWATAUAVAWH
A_A^A]A\_^]
SUVATAVH
i`HcYXL
@A^A\^][
C@H+CHH
u~E9}4t L
WATAUAVAWH
 A_A^A]A\_
@UWAUAVAWH
 A_A^A]_]H
 A_A^A]_]
C@H+CHH
L$`L91u
tKD9t$P}NH
L$`L91u
C@H+CHH
USVATAUAWH
L$8I9L$
A_A]A\^[]
D$@I+D$HH
A_A]A\^[]
H9\$(u@3
A_A]A\^[]
A@H+AHH
kHH;k@uzH
<	t"fffff
t!fffff
l$ VWATAUAVH
A^A]A\_^
)t$0H9s
)t$@H9s
)D$@H9s
)t$`H9i
)|$PH9n
@VATAUAVH
A^A]A\^
UWAUAVH
HA^A]_]
x#fffffff
<pt	<Pt
HA^A]_]
uNL9+tI
H9yPu H
KHH+K@H
WATAUAVAWH
L9E0u	H
 A_A^A]A\_
@VAUAVH
SVWATAUAVAWH
PA_A^A]A\_^[
L9d$Pt>H
L$@xRH;
@UAUAVAWH
(A_A^A]]
WATAUAVAWH
 A_A^A]A\_
WATAUAVAWH
 A_A^A]A\_
UVATAUAVH
@A^A]A\^]
USAUAVH
T$hH;L$X|
@USWAUH
soffffff
\$ VWATAUAVH
 A^A]A\_^
DDDDDDD
t<ffffff
L$ UWATAUAVH
PA^A]A\_]
WATAUAVH
hA^A]A\_
<xt$<Xt <ot
<xt,<Xt(
hA^A]A\_
SUVWATAUAWH
0A_A]A\_^][
@VATAUH
EDDDDDD
SWAUAVH
HA^A]_[
|$ ATAUAVH
 A^A]A\
SUVAUAWH
 A_A]^][
CDDDDDD
wwwwwwwwI
l$ VWATAUAWH
 A_A]A\_^
l$ WATAUH
@WATAUH
UWATAUAVH
d$(I9\$
A^A]A\_]
DDDDDDD
@WATAUH
@UATAVH
H9L$Xt;H
H9D$8u'L
toH9l$HtMH
H9l$HtZH
t$ WAUAVH
|$ ATAUAVH
 A^A]A\
L;@PuOH
UVWATAUAVAWH
M;o(uHH9^
0A_A^A]A\_^]
@UVAVAWH
(A_A^^]
G(H9s(u
K0H9W(t
tUffffff
B8H9B(t
|$ ATAUAVH
 A^A]A\
VWATAVAWH
 A_A^A\_^
UVATAUH
(A]A\^]
E84*uFH
(A]A\^]
H);H)>H
VWATAUAVAWH
XA_A^A]A\_^
UWATAUAVH
A^A]A\_]
@USVWATAUAVH
A^A]A\_^[]
\$ VWATH
UVWATAVH
A^A\_^]
UVWATAVH
A^A\_^]
gfffffff
sJfffffff
WATAUAVAWH
0A_A^A]A\_
|$ ATAUAVH
@UATAVH
 A^A\]H
VATAUAVH
HA^A]A\^
UWATAUH
8A]A\_]
D8<+uHI
WATAUAVAWH
 A_A^A]A\_
WATAUAVAWH
F84+t\H
 A_A^A]A\_
SVWAUAVAWH
XA_A^A]_^[
UVATAUAVH
 A^A]A\^]
VATAUAVAWH
F8,#t3H
 A_A^A]A\^
SUVWAUAWH
HA_A]_^][
D84+uHH
HA_A]_^][
@UVATAUAVH
 A^A]A\^]
@SUVATAUH
0A]A\^][
|$ ATAUAVH
 A^A]A\
|$Hfffff
s@H9|$8t H
@UVATAUAWH
0A_A]A\^]
l$pfffff
0A_A]A\^]
VWATAUAVH
 A^A]A\_^
SVWATAVH
@A^A\_^[
VWAUAVAWH
 A_A^A]_^
VWATAUAWH
0A_A]A\_^
L$ UVWATAUAVAWH
 A_A^A]A\_^]
SVWAVAWH
@A_A^_^[
smHc|$@H
<	u4HcD$@
|$ ATAUAVH
@A^A]A\
L$@H+T$@H
SUWAUAVAWH
(A_A^A]_][
gfffffffI+
fffffff
t$ WATAUAVAWH
<dt/<ut+<lu*
<dt <ut
 A_A^A]A\_
@SVWAVAWH
@A_A^_^[
H+l$0H;l$(
@A_A^_^[
H9T$X~+L
L$hH;T$X|
@UVATAWH
|$ ATAUAVH
fffffff
 A^A]A\
3333333
H9L$0~ H
@UATAUH
L9d$Xt>H
AUAVAWH
0A_A^A]
H9L$X~'fff
T$hH;L$X|
l$ ATAUAVH
 A^A]A\
|$ ATAUAVH
 A^A]A\
@SUWAUH
(A]_][H
H9k0u!f
\$ VAUAVH
umH9B(ugH
u	H;B(u
@VAUAVH
B H9A u<H
B(H9A(u2H
UVWATAUAVH
hA^A]A\_^]
u%H9Jht
u,H9Kht&
C`M9P u H
A`H;P t
C`M9P(u H
A`H;P(t
C`M9P0u H
A`H;P0t
C`M9P8u H
A`H;P8t
C`M9P@u H
A`H;P@t
C`M9PHu H
A`H;PHt
C`M9PPu H
A`H;PPt
C`M9PXu H
A`H;PXt
C`M9P`u H
A`H;P`t
C`M9Phu H
A`H;Pht
C`M9Ppu H
A`H;Ppt
C`M9Pxu H
A`H;Pxt
ChM9P u H
AhH;P t
ChM9P(u H
AhH;P(t
ChM9P0u H
AhH;P0t
ChM9P8u H
AhH;P8t
ChM9P@u H
AhH;P@t
ChM9PHu H
AhH;PHt
M9P u&H
M9P(u&H
C0L9S8u
C8L9S@u
I9zPtEH
@UATAUH
VATAUAVAWH
S0H9P0uEI
H;w(uXH
 A_A^A]A\^
@UATAUAVH
(A^A]A\]
WATAUAVAWH
 A_A^A]A\_
L$ SVWH
H9A0u,L
t$ WAUAVH
|$ ATAUAVH
0A^A]A\
H9pPu<H
H9G(t%H
|$ ATAUAVH
 A^A]A\
UWATAUAWH
A_A]A\_]
~"H9{(t
A_A]A\_]
@VATAUH
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
@SVATAVAWH
@A_A^A\^[
USVWATAUAVAWH
A_A^A]A\_^[]
UVWATAUAVAWH
0A_A^A]A\_^]
UVWATAUAVAWH
A_A^A]A\_^]
USVWATAUAVAWH
A_A^A]A\_^[]
WATAUAVAWH
fffffff
 A_A^A]A\_
USVWATAUAVAWH
A_A^A]A\_^[]
UVWATAUAVAWH
A_A^A]A\_^]
TUUUUUU
USVWATAUAVAWH
A_A^A]A\_^[]
UUUUUUU
USVWATAUAVAWH
A_A^A]A\_^[]
USVWATAUAVAWH
A_A^A]A\_^[]
USVWAVAWH
A_A^_^[]
@UVWATH
UVWATAUAVAWH
A_A^A]A\_^]
|$ UATAUAVAWH
A_A^A]A\]
UWATAUAVAWH
A_A^A]A\_]
SVAVAWH
UWAVAWH
(A_A^_]
L$XfA9H
l$`ffff
fC94YuCI
(A_A^_]
fF94KuFL
UVATAUH
HA]A\^]
fffffff
UVATAUH
8A]A\^]
~5ffffff
VATAUAVAWH
 A_A^A]A\^
WATAUAVAWH
 A_A^A]A\_
SVWATAUAWH
hA_A]A\_^[
UVATAUAVH
 A^A]A\^]
VATAUAVAWH
fE9,\t3H
 A_A^A]A\^
UVWAUAVAWH
HA_A^A]_^]
~kffffff
HA_A^A]_^]
@UVATAUAVH
 A^A]A\^]
|d9T$PI
UVWATAUAVAWH
0A_A^A]A\_^]
stHc\$@H
	u9HcD$@
x$fffffff
WATAUAVAWH
 A_A^A]A\_
gfffffffH
d$ AUAVAWH
0A_A^A]
|$ ATAUAVH
@A^A]A\
~1fffffff
|$ ATAUAVH
USVWATAVAWH
A_A^A\_^[]
																																												
												
9T$`~RH;
SUVATAUAVAWH
PA_A^A]A\^][
fffffff
\$8H;\$H
PA_A^A]A\^][
UWATAUAVH
A^A]A\_]
UVWATAUH
A]A\_^]
UVWATAUH
A]A\_^]
UVWATAUH
A]A\_^]
UVWATAUH
A]A\_^]
USVWATAUH
A]A\_^[]
USVWATAUH
A]A\_^[]
gfffffffI
gfffffffH
SUVATAUAVH
8A^A]A\^][
|$(ffffff
gfffffffI
@SATAUH
\$ VWAUH
fffffff
l$pffff
@SATAUAVH
HA^A]A\[
|$8H+|$0H
HA^A]A\[
@SATAUH
t$ WATAVH
|$ ATAUAVH
 A^A]A\
VWATAUAVH
H9{ udH9;u!
D9k(ujH
 A^A]A\_^
WATAUAVAWH
A_A^A]A\_
t$ WATAUAVAWH
0A_A^A]A\_
UVWATAUAVAWH
A_A^A]A\_^]
 A]A\^H
VWATAUAVH
A^A]A\_^
SUVWAVAWH
HA_A^_^][
SVWAVAWH
A_A^_^[
l$ VAUAVH
|$ ATAUAVH
(f92u:H
0A^A]A\
l$ VWATAUAWH
0A_A]A\_^
SWATAUAVH
@A^A]A\_[
WATAUAVAWH
0A_A^A]A\_
\$ VATAUAVAWH
0A_A^A]A\^
t$ WATAUH
SWATAUAWH
A fD9X(u
A_A]A\_[
9]@~Cfffff
\$ VWAVH
~Mffffff
t$ ATAUAVH
0A^A]A\
@SUATAUAVAWH
8A_A^A]A\][
UVWATAUAVAWH
`A_A^A]A\_^]
d$(fffff
u)H9D$pt"H
unH9D$Pt1
UWATAVAWH
0A_A^A\_]
@SUVWATAUH
XA]A\_^][
l$ VWATH
)t$0L9f
@UAUAWH
VWAVAWH
8A_A^_^
t$ WATAUH
|$ ATAUAVH
0A^A]A\
UWATAUAVH
 A^A]A\_]
L$`H99u
l$`L9/v
USATAWH
E9b tYI
@WATAVH
UVWATAUAVAWH
PA_A^A]A\_^]
VWATAUAVH
 A^A]A\_^
UVAUAWH
8A_A]^]
@UATAUH
t$ WAUAVH
@UATAUH
@SVAUAWH
(A_A]^[
<qt8<nt4H
|$ ATAUAVH
+y(+q$H
 A^A]A\
SUVWATAVH
A^A\_^][
|$ ATAUAVH
 A^A]A\
x#HcT$(H
|$ ATAUAVH
 A^A]A\
@SAUAVH
l$ ATAUAVH
 A^A]A\
@SATAUAVAWH
 A_A^A]A\[
A9M(~PI
 A_A^A]A\[
@SATAVH
|$ ATAUAVH
 A^A]A\
@UATAUAVAWH
 A_A^A]A\]
@SAVAWH
C(L9`8t
l$ VWATH
@UATAVH
@UATAUAVAWH
 A_A^A]A\]
@SUVWATAUAWH
 A_A]A\_^][
SUATAUAVH
0A^A]A\][
!fffffff
VATAUAVH
HA^A]A\^
@USWAVH
t$$D9l$,
D9l$,~"H
u_D9T$4t
D9d$0t7D
D9d$8u0
D9d$XtZI
|$ ATAUAVH
0A^A]A\
t$ WAUAVH
gfffffffM
@SUVWAVAWH
A_A^_^][
<Xt#<bt
@SUVATAUAVAWH
A_A^A]A\^][
UVWATAUAVAWH
A_A^A]A\_^]
|$ ATAUAVH
gfffffffH
 A^A]A\
UATAUAVAWH
 A_A^A]A\]
SUVWATAVH
XA^A\_^][
t,<;t(<:t$H
UATAUAVAWH
A_A^A]A\]
USVWATAUAVAWH
H;t$`}@L
H;t$`}xJ
A_A^A]A\_^[]
USVWATAUAVAWH
A_A^A]A\_^[]
UUUUUUU
@WAUAWH
tBffffff
UVWAVAWH
 A_A^_^]
SUVWATAUAWH
fffffff
<&fffff
A_A]A\_^][
t$ WATAUH
WATAUAVAWH
A_A^A]A\_
@SVATAVH
HA^A\^[
VWATAUAWH
 A_A]A\_^
H;C t	@
L$HH91u
L$0H91u
\$ VAUAVH
WATAUAVAWH
0A_A^A]A\_
@VATAUAWH
(A_A]A\^
@UATAUAWH
(A_A]A\]
<xtM<XtI<ot,<Ot(<bt
								
UVWATAUAVAWH
								
<ot	<pt
@A_A^A]A\_^]
UVWAVAWH
<ntP<NtLH
PA_A^_^]
UVWATAUH
@A]A\_^]
|$ ATAUAVH
@A^A]A\
\$ WATAVH
@WATAUH
H9l$@~(H
uw~:fffff
uw~?ffffff
@VWAVAWH
XA_A^_^
~?ffffff
~Hfffff
u0~=ffff
~Hfffff
u0~=ffff
~Iffffff
\$ VWAUH
~=fffffff
@SUATAUH
8A]A\][
L$@H99u
t$ WATAUH
WATAUAVAWH
@A_A^A]A\_
L$ VATAUAVAWH
PA_A^A]A\^
WATAUAVH
tB@88t=H
A^A]A\_
|$ ATAUAVH
 A^A]A\
SUVWATAUAVH
pA^A]A\_^][
unknown
UVWAUAVH
A^A]_^]
` AUAVAWH
 A_A^A]
$WCRANGE$$WCMODS?M:$
insort_left
bisect_left
insort_right
bisect_right
lo must be non-negative
OO|nn:bisect_right
OO|nn:insort_right
OO|nn:bisect_left
OO|nn:insort_left
_bisect
lookup_error
register_error
mbcs_decode
mbcs_encode
charbuffer_encode
readbuffer_encode
charmap_build
charmap_decode
charmap_encode
ascii_decode
ascii_encode
latin_1_decode
latin_1_encode
raw_unicode_escape_decode
raw_unicode_escape_encode
unicode_internal_decode
unicode_internal_encode
unicode_escape_decode
unicode_escape_encode
utf_32_ex_decode
utf_32_be_decode
utf_32_le_decode
utf_32_decode
utf_32_be_encode
utf_32_le_encode
utf_32_encode
utf_16_ex_decode
utf_16_be_decode
utf_16_le_decode
utf_16_decode
utf_16_be_encode
utf_16_le_encode
utf_16_encode
utf_7_decode
utf_7_encode
utf_8_decode
utf_8_encode
escape_decode
escape_encode
register
s:lookup
O|ss:encode
O|ss:decode
s#|z:escape_decode
S|z:escape_encode
O|z:unicode_internal_decode
s*|zi:utf_7_decode
s*|zi:utf_8_decode
s*|zi:utf_16_decode
s*|zi:utf_16_le_decode
s*|zi:utf_16_be_decode
s*|zii:utf_16_ex_decode
s*|zi:utf_32_decode
s*|zi:utf_32_le_decode
s*|zi:utf_32_be_decode
s*|zii:utf_32_ex_decode
s*|z:unicode_escape_decode
s*|z:raw_unicode_escape_decode
s*|z:latin_1_decode
s*|z:ascii_decode
s*|zO:charmap_decode
s*|zi:mbcs_decode
s#|z:readbuffer_encode
t#|z:charbuffer_encode
O|z:unicode_internal_encode
O|z:utf_7_encode
O|z:utf_8_encode
O|zi:utf_16_encode
O|z:utf_16_le_encode
O|z:utf_16_be_encode
O|zi:utf_32_encode
O|z:utf_32_le_encode
O|z:utf_32_be_encode
O|z:unicode_escape_encode
O|z:raw_unicode_escape_encode
O|z:latin_1_encode
O|z:ascii_encode
O|zO:charmap_encode
U:charmap_build
O|z:mbcs_encode
sO:register_error
s:lookup_error
_codecs
collections.defaultdict
Factory for default value called by __missing__().
default_factory
__missing__
deque_reverse_iterator
deque_iterator
__length_hint__
collections.deque
__sizeof__
reverse
__reversed__
__reduce__
popleft
extendleft
__copy__
appendleft
maximum size of a deque or None if unbounded
cannot add more blocks to the deque
pop from an empty deque
|n:rotate
deque mutated during iteration
deque mutated during remove().
deque.remove(x): x not in deque
deque index out of range
__dict__
deque(%r)
deque(%%r, maxlen=%zd)
], maxlen=%Id)
deque([
maxlen must be non-negative
|OO:deque
iterable
iteritems
defaultdict(
defaultdict(%s, %s)
first argument must be callable
defaultdict
_collections
field_size_limit
get_dialect
unregister_dialect
register_dialect
list_dialects
_csv.writer
writerows
writerow
_csv.reader
line_num
_csv.Dialect
dialect
quoting
quotechar
lineterminator
escapechar
doublequote
skipinitialspace
delimiter
QUOTE_NONE
QUOTE_NONNUMERIC
QUOTE_ALL
QUOTE_MINIMAL
unknown dialect
"%s" must be an integer
"%s" must be an 1-character string
"%s" must be an string
bad "quoting" value
lineterminator must be set
quotechar must be set if quoting enabled
delimiter must be set
|OOOOOOOOO
field larger than field limit (%ld)
new-line character seen in unquoted field - do you need to open the file in universal-newline mode?
'%c' expected after '%c'
unexpected end of data
line contains NULL byte
argument 1 must be an iterator
need to escape, but no escapechar set
single empty field record must be quoted
sequence expected
writerows() argument must be iterable
argument 1 must have a "write" method
dialect name must be a string or unicode
limit must be an integer
_csv.Error
Dialect
_dialects
__version__
functools.partial
__setstate__
dictionary of keyword arguments to future partial calls
keywords
tuple of arguments to future partial calls
function object to use in future partial calls
reduce() of empty sequence with no initial value
reduce() arg 2 must support iteration
the first argument must be callable
type 'partial' takes at least one argument
setting partial object's dictionary to a non-dict
a partial object's dictionary may not be deleted
O(O)(OOOO)
_functools
nsmallest
nlargest
heapify
heapreplace
heappop
heappushpop
heappush
list changed size during iteration
index out of range
heap argument must be a list
nO:nlargest
nO:nsmallest
__about__
resolution
logreader
profiler
coverage
$Revision$
_hotshot.LogReaderType
True if the logreader's input file has already been closed.
Dictionary mapping informational keys to lists of values.
_hotshot.ProfilerType
True if the profiler's output file has already been closed.
linetimings
lineevents
frametimings
runcode
runcall
addinfo
logreader's file object already closed
end of file with incomplete profile record
unknown record type in log file
cannot iterate over closed LogReader object
no more events in log
profiler already closed
profiler already active
profiler's file object already closed
profiler not active
unexpected error
s:logreader
WHAT_LINE_TIMES
WHAT_DEFINE_FUNC
WHAT_DEFINE_FILE
WHAT_ADD_INFO
WHAT_OTHER
WHAT_LINENO
WHAT_EXIT
WHAT_ENTER
ProfilerError
hotshot.ProfilerError
ProfilerType
LogReaderType
_hotshot
ss:addinfo
locals must be a dictionary or None
O!O!|O:runcode
sys.path must be a list
<non-string-path-entry>
sys-path-entry
current-directory
reported-performance-frequency
executable-version
executable
platform
requested-line-timings
requested-line-events
requested-frame-timings
hotshot-version
s|ii:profiler
s:coverage
scanstring
encode_basestring_ascii
_json.Encoder
_current_indent_level
allow_nan
_json.Scanner
context
skipkeys
sort_keys
item_separator
key_separator
encoder
default
markers
parse_constant
parse_int
parse_float
object_pairs_hook
object_hook
encoding
0123456789abcdef
json.decoder
end is out of bounds
Unterminated string starting at
Invalid \uXXXX escape
Invalid \escape
Invalid control character at
first argument must be a string, not %.80s
OO&|zi:scanstring
Expecting property name
Expecting , delimiter
Expecting : delimiter
Expecting object
Expecting property name enclosed in double quotes
Expecting ',' delimiter
Expecting ':' delimiter
-Infinity
Infinity
 while decoding a JSON array from a byte string
 while decoding a JSON object from a byte string
 while decoding a JSON array from a unicode string
 while decoding a JSON object from a unicode string
OO&:scan_once
encoding must be a string, not %.80s
O:make_scanner
OOOOOOOOO:make_encoder
not a const
Out of range float values are not JSON compliant
keys must be a string
Circular reference detected
make_encoder
make_scanner
 while encoding a JSON object
_iterencode_list needs a sequence
OO&:_iterencode
_getdefaultlocale
strxfrm
strcoll
localeconv
setlocale
letters
lowercase
uppercase
invalid locale category
locale query failed
unsupported locale setting
i|z:setlocale
n_sign_posn
p_sign_posn
n_sep_by_space
n_cs_precedes
p_sep_by_space
p_cs_precedes
frac_digits
int_frac_digits
negative_sign
positive_sign
mon_grouping
mon_thousands_sep
mon_decimal_point
currency_symbol
int_curr_symbol
grouping
thousands_sep
decimal_point
strcoll arguments must be strings
s:strxfrm
__doc__
locale.Error
CHAR_MAX
LC_NUMERIC
LC_MONETARY
LC_COLLATE
LC_TIME
LC_CTYPE
_locale
_lsprof.Profiler
disable
getstats
timeunit
builtins
subcalls
_lsprof.profiler_subentry
_lsprof.profiler_entry
inline time (not in further subcalls)
total time spent in this call
how many times this is called recursively
how many times this is called
called code object or built-in function name
details of the calls
inline time in this entry (not in subcalls)
inlinetime
total time in this entry
totaltime
how many times called recursively
reccallcount
how many times this was called
callcount
code object or built-in function name
<built-in method %s>
<%s.%s>
__builtin__
memory was exhausted while profiling
((Olldd))
((OllddO))
=|ii:enable
|Odii:Profiler
profiler_subentry
profiler_entry
Profiler
_lsprof
Fast profiler
?_random.Random
getrandbits(k) -> x.  Generates a long int with k random bits.
getrandbits
jumpahead(int) -> None.  Create new state from existing state and integer.
jumpahead
setstate(state) -> None.  Restores generator state.
setstate
getstate() -> tuple containing the current state.
getstate
seed([n]) -> None.  Defaults to current time.
random() -> x in the interval [0, 1).
Astate vector is the wrong size
state vector must be a tuple
jumpahead requires an integer, not '%s'
number of bits must be greater than zero
i:getrandbits
Random()
_random
getlower
getcodesize
compile
_sre.SRE_Scanner
_sre.SRE_Match
lastgroup
lastindex
groupdict
_sre.SRE_Pattern
groupindex
__deepcopy__
scanner
finditer
findall
maxsplit
pattern
expected string or buffer
buffer size mismatch
buffer has negative size
maximum recursion limit exceeded
internal error in regular expression engine
O|nn:findall
O|n:split
cannot copy this pattern object
cannot deepcopy this pattern object
invalid SRE code
no such group
_expand
|O:groups
|O:groupdict
cannot copy this match object
cannot deepcopy this match object
O|nn:scanner
copyright
MAXREPEAT
CODESIZE
O|nn:match
O|nn:search
OO|n:sub
OO|n:subn
regular expression code size limit exceeded
OiO!|nOO
calcsize
_clearcache
struct size in bytes
struct format string
unpack_from
pack_into
z*|n:unpack_from
bBhHiIlLqQ
cannot convert argument to integer
__int__ method returned non-integer
integer argument expected, got float
integer argument expected, got non-integer (implicit conversion using __int__ is deprecated)
'%c' format requires %zd <= number <= %zd
'%c' format requires 0 <= number <= %zu
byte format requires -128 <= number <= 127
ubyte format requires 0 <= number <= 255
char format require string of length 1
short format requires SHRT_MIN <= number <= SHRT_MAX
ushort format requires 0 <= number <= USHRT_MAX
required argument is not a float
bad char in struct format
total struct size too long
S:Struct
unpack requires a string argument of length %zd
s*:unpack
unpack_from requires a buffer of at least %zd bytes
unpack_from requires a buffer argument
integer out of range for '%c' format code
argument for 'p' must be a string
argument for 's' must be a string
pack expected %zd items for packing (got %zd)
pack_into requires a buffer of at least %zd bytes
pack_into expected %zd items for packing (got %zd)
pack_into expected offset argument
pack_into expected buffer argument
missing format argument
_PY_STRUCT_FLOAT_COERCE
_PY_STRUCT_RANGE_CHECKING
struct.error
_struct
getweakrefs
getweakrefcount
CallableProxyType
ProxyType
ReferenceType
_weakref
Weak-reference support module.
arrayiterator
array.array
tounicode
tostring
fromunicode
fromstring
fromlist
fromfile
byteswap
buffer_info
the size, in bytes, of one array item
itemsize
the typecode character used to create the array
typecode
c;array item must be char
signed char is greater than maximum
signed char is less than minimum
h;array item must be integer
b;array item must be integer
array item must be unicode character
u#;array item must be unicode character
unsigned short is greater than maximum
unsigned short is less than minimum
i;array item must be integer
unsigned int is greater than maximum
unsigned int is less than minimum
l;array item must be integer
unsigned long is greater than maximum
unsigned long is less than minimum
f;array item must be float
d;array item must be float
..\..\Modules\arraymodule.c
array index out of range
can only append array (not "%.200s") to array
can only assign array (not "%.200s") to array slice
array assignment index out of range
can only extend with array of same kind
can only extend array with array (not "%.200s")
array.index(x): x not in list
array.remove(x): x not in list
pop index out of range
pop from empty array
nO:insert
don't know how to byteswap this array type
not enough items in file
arg1 must be open file
On:fromfile
array.read() not supported in 3.x; use array.fromfile()
arg must be open file
array.write() not supported in 3.x; use array.tofile()
arg must be list
string length not a multiple of item size
s#:fromstring
fromunicode() may only be called on type 'u' arrays
u#:fromunicode
tounicode() may only be called on type 'u' arrays
array('%c', 
array('%c')
array indices must be integers
array indices must be integer
attempt to assign array of size %zd to extended slice of size %zd
Accessing non-existent array segment
bad typecode (must be c, b, B, u, h, H, i, I, l, L, f or d)
c|O:array
array.array()
ArrayType
getsample
tostereo
lin2adpcm
adpcm2lin
lin2lin
lin2alaw
alaw2lin
lin2ulaw
ulaw2lin
findfactor
findmax
findfit
Size should be 1, 2 or 4
not a whole number of frames
Index out of range
s#ii:getsample
s#i:max
s#i:minmax
s#i:avg
s#i:rms
Strings should be even-sized
First sample should be longer
s#s#:findfit
Samples should be same size
s#s#:findfactor
Input sample should be longer
s#i:findmax
s#i:avgpp
s#i:maxpp
s#i:cross
s#id:mul
s#idd:tomono
not enough memory for output buffer
s#idd:tostereo
Lengths should be the same
s#s#i:add
s#ii:bias
s#i:reverse
s#ii:lin2lin
weightA should be >= 1, weightB should be >= 0
sampling rate not > 0
(O(iO))
ii:ratecv
illegal state argument
iO!;audioop.ratecv: illegal state argument
width * nchannels too big for a C int
# of channels should be >= 1
s#iiiiO|ii:ratecv
s#i:lin2ulaw
s#i:ulaw2lin
s#i:lin2alaw
s#i:alaw2lin
(O(ii))
s#iO:lin2adpcm
s#iO:adpcm2lin
audioop.error
audioop
crc_hqx
rledecode_hqx
rlecode_hqx
unhexlify
hexlify
a2b_hex
b2a_hex
b2a_hqx
a2b_hqx
b2a_base64
a2b_base64
quotetabs
Trailing garbage
Illegal char
s*:a2b_uu
At most 45 bytes at once
s*:b2a_uu
Incorrect padding
s*:a2b_base64
Too much data for base64 line
s*:b2a_base64
String has incomplete number of bytes
s*:a2b_hqx
s*:rlecode_hqx
s*:b2a_hqx
Orphaned RLE code at start
s*:rledecode_hqx
s*i:crc_hqx
s*|I:crc32
s*:b2a_hex
Non-hexadecimal digit found
Odd-length string
s*:a2b_hex
0123456789ABCDEF
Incomplete
binascii.Incomplete
binascii.Error
binascii
7'{O^B@
?math range error
math domain error
D:phase
D:polar
dd:rect
D:isnan
Unpickler(file) -- Create an unpickler.
Unpickler
Pickler(file, protocol=0) -- Create a pickler.
This takes a file-like object for writing a pickle data stream.
The optional proto argument tells the pickler to use the given
protocol; supported protocols are 0, 1, 2.  The default
protocol is 0, to be backwards compatible.  (Protocol 0 is the
only protocol that can be written to a file opened in text
mode and read back successfully.  When using a protocol higher
than 0, make sure the file is opened in binary mode, both when
pickling and unpickling.)
Protocol 1 is more efficient than protocol 0; protocol 2 is
more efficient than protocol 1.
Specifying a negative protocol version selects the highest
protocol version supported.  The higher the protocol used, the
more recent the version of Python needed to read the pickle
produced.
The file parameter must have a write() method that accepts a single
string argument.  It can thus be an open file object, a StringIO
object, or any other custom object that meets this interface.
Pickler
loads(string) -- Load a pickle from the given string
load(file) -- Load a pickle from the given file
dumps(obj, protocol=0) -- Return a string containing an object in pickle format.
See the Pickler docstring for the meaning of optional argument proto.
dump(obj, file, protocol=0) -- Write an object in pickle format to the given file.
See the Pickler docstring for the meaning of optional argument proto.
cPickle.Unpickler
noload() -- not load a pickle, but go through most of the motions
This function can be used to read past a pickle without instantiating
any objects or importing any modules.  It can also be used to find all
persistent references without instantiating any objects or importing
any modules.
load() -- Load a pickle
cPickle.Pickler
PicklingError
inst_persistent_id
persistent_id
protocol
getvalue() -- Finish picking a list-based pickle
getvalue
clear_memo() -- Clear the picklers memo
clear_memo
dump(object) -- Write an object in pickle format to the object's pickle stream
cPickle.Pdata
unpickling stack underflow
no int where int expected in memo
modules
__module__
fast mode: can't pickle cyclic objects including object type %s at %p
long too large to pickle
dict items iterator must return 2-tuples
dictionary changed size during iteration
persistent id must be string
Unexpected data in internal list
Invalid get data
Attempt to getvalue() a non-list-based pickler
|i:getvalue
copy_reg
I/O operation on closed file
argument must have 'write' attribute
pickle protocol %d asked for; the highest available protocol is %d
O|i:Pickler
|i:Pickler
attribute deletion is not supported
memo must be a dictionary
Global and instance pickles are not supported.
could not find MARK
pickle data was truncated
could not convert string to int
LONG pickle has negative byte count
could not convert string to float
insecure string pickle
BINSTRING pickle has negative byte count
BINUNICODE pickle has negative byte count
bad pickle data
NEWOBJ class argument has NULL tp_new
NEWOBJ class argument isn't a type object
NEWOBJ expected an arg tuple.
A load persistent id instruction was encountered,
but no persistent_load function was specified.
_inverted_registry[%ld] isn't a 2-tuple of strings
unregistered extension code %ld
EXT specifies code <= 0
slot state is not a dictionary
state is not a dictionary
unsupported pickle protocol: %d
invalid load key, '%s'.
argument must have 'read' and 'readline' attributes
UnpicklingError
find_global
persistent_load
S:loads
cStringIO.cStringIO_CAPI
BadPickleGet
UnpickleableError
PickleError
cPickle.BadPickleGet
cPickle.UnpicklingError
cPickle.UnpickleableError
def __str__(self):
  a=self.args
  a=a and type(a[0]) or '(what)'
  return 'Cannot pickle %s objects' % a
cPickle.PicklingError
cPickle.PickleError
def __str__(self):
  return self.args and ('%s' % self.args[0]) or '(what)'
__builtins__
_extension_cache
_inverted_registry
_extension_registry
dispatch_table
readline
__reduce_ex__
__main__
__name__
__getstate__
__getinitargs__
__class__
compatible_formats
format_version
[sssss]
HIGHEST_PROTOCOL
cPickle
 while pickling an object
class has no name
Can't pickle %s: extension code %ld is out of range
Can't pickle %s: extension code %s isn't an integer
Can't pickle %s: it's not the same object as %s.%s
Can't pickle %s: attribute lookup %s.%s failed
Can't pickle %s: import of module %s failed
tuple returned by %s must contain 2 through 5 elements
Fourth element of tuple returned by %s must be an iterator, not %s
Fifth element of tuple returned by %s must be an iterator, not %s
args[0] from __newobj__ args has the wrong class
args[0] from __newobj__ args has no __new__
__new__
__newobj__ arglist is empty
__newobj__
Second element of tuple returned by %s must be a tuple
save_reduce
Value returned by %s must be string or tuple
O|i:dump
O|i:dumps
StringIO
cStringIO.StringI
cStringIO.StringO
flag indicating that a space needs to be printed; used by print
softspace
writelines
truncate
readlines
True if the file is closed
length too large
|n:read
|i:readline
|n:readlines
|n:truncate
n|i:seek
out of memory
new position too large
s*:write
s*:StringIO
OutputType
InputType
cStringIO_CAPI
cStringIO
datetime.datetime
tz -> convert to local time in new timezone tz
astimezone
Return datetime with new specified fields.
[sep] -> string in ISO 8601 format, YYYY-MM-DDTHH:MM:SS[.mmmmmm][+HH:MM].
sep is used to separate the year from the time, and defaults to 'T'.
Return UTC time tuple, compatible with time.localtime().
utctimetuple
Return time object with same time and tzinfo.
Return time object with same time but with tzinfo=None.
Return date object with same year, month and day.
date, time -> datetime with same date and time fields
combine
string, format -> new datetime parsed from a string (like time.strptime()).
strptime
timestamp -> UTC datetime from a POSIX timestamp (like time.time()).
utcfromtimestamp
timestamp[, tz] -> tz's local time from POSIX timestamp.
Return a new datetime representing UTC day and time.
[tz] -> new datetime with tz's local day and time.
timestamp
datetime.time
Return time with new specified fields.
Return self.tzinfo.dst(self).
Return self.tzinfo.tzname(self).
Return self.tzinfo.utcoffset(self).
Return string in ISO 8601 format, HH:MM:SS[.mmmmmm][+HH:MM].
microsecond
datetime.tzinfo
-> (cls, state)
datetime in UTC -> datetime in local time.
fromutc
datetime -> DST offset in minutes east of UTC.
datetime -> minutes east of UTC (negative for west of UTC).
utcoffset
datetime -> string name of time zone.
datetime.date
Return date with new specified fields.
replace
Return the day of the week represented by the date.
Monday == 0 ... Sunday == 6
weekday
Return proleptic Gregorian ordinal.  January 1 of year 1 is day 1.
toordinal
Return the day of the week represented by the date.
Monday == 1 ... Sunday == 7
isoweekday
Return string in ISO 8601 format, YYYY-MM-DD.
isoformat
Return a 3-tuple containing ISO year, week number, and weekday.
isocalendar
Return time tuple, compatible with time.localtime().
timetuple
Formats self with strftime.
__format__
format -> strftime() style string.
strftime
Return ctime() style string.
Current date or datetime:  same as self.__class__.fromtimestamp(time.time()).
int -> date corresponding to a proleptic Gregorian ordinal.
fromordinal
timestamp -> local date from a POSIX timestamp (like time.time()).
fromtimestamp
datetime.timedelta
__reduce__() -> (cls, state)
Total seconds in the duration.
total_seconds
Number of microseconds (>= 0 and less than 1 second).
Number of seconds (>= 0 and less than 1 day).
Number of days.
minutes
milliseconds
microseconds
seconds
days=%d; must have magnitude <= %d
year is out of range
month must be in 1..12
day is out of range for month
hour must be in 0..23
minute must be in 0..59
second must be in 0..59
microsecond must be in 0..999999
date value out of range
tzinfo argument must be None or of a tzinfo subclass, not type '%s'
tzinfo.%s() returned %d; must be in -1439 .. 1439
tzinfo.%s() must return a whole number of minutes
tzinfo.%s() must return None or timedelta, not '%s'
tzinfo.tzname() must return None or a string, not '%s'
, tzinfo=
%s %s %2d %02d:%02d:%02d %04d
%c%02d%s%02d
strftime format ends with raw %
tzname.replace() did not return a string
year=%ld is before 1900; the datetime strftime() methods require year >= 1900
%04d-%02d-%02d
%02d:%02d:%02d
struct_time
((iiiiiiiii))
can't compare %s to %s
unsupported type for timedelta %s component: %s
|OOOOOOO:__new__
%s(%d, %d)
%s(%d, %d, %d)
goofy result from PyOS_snprintf
%d:%02d:%02d
%d day%s, 
timestamp out of range for platform localtime() function
d:fromtimestamp
ordinal must be >= 1
i:fromordinal
s#:strftime
__format__ expects str or unicode, not %.200s
O:__format__
|iii:replace
a tzinfo subclass must implement %s()
fromutc: dt.tzinfo is not self
fromutc: tz.dst() gaveinconsistent results; cannot convert
fromutc: non-None dst() result required
fromutc: non-None utcoffset() result required
fromutc: argument must be a datetime
bad tzinfo state arg
%s(%d, %d, %d, %d)
iiiiiiiii
can't compare offset-naive and offset-aware times
|iiiiO:replace
iii|iiiiO
timestamp out of range for platform localtime()/gmtime() function
iiiiiiiO
.A|O:now
d|O:fromtimestamp
d:utcfromtimestamp
unexpected value from _strptime._strptime
iiiiiii
_strptime
ss:strptime
O!O!:combine
can't subtract offset-naive and offset-aware datetimes
%s(%d, %d, %d, %d, %d)
%s(%d, %d, %d, %d, %d, %d)
%s(%d, %d, %d, %d, %d, %d, %d)
|c:isoformat
can't compare offset-naive and offset-aware datetimes
|iiiiiiiO:replace
astimezone() cannot be applied to a naive datetime
O!:astimezone
Adatetime_CAPI
datetime.datetime_CAPI
timedelta
MAXYEAR
MINYEAR
datetime
Fast implementation of the datetime type.
ENOTSUP
WSAENETRESET
WSAECONNREFUSED
WSAEDESTADDRREQ
WSAESOCKTNOSUPPORT
WSAEINPROGRESS
WSAEINVAL
WSAEREMOTE
WSAENOTCONN
WSAEDQUOT
WSAEISCONN
WSAEOPNOTSUPP
WSAEPFNOSUPPORT
WSAEWOULDBLOCK
WSASYSNOTREADY
WSAEPROTONOSUPPORT
WSAEALREADY
WSAEADDRNOTAVAIL
WSAEADDRINUSE
WSAEPROTOTYPE
WSAEINTR
WSAEDISCON
WSAENOBUFS
WSAETIMEDOUT
WSAECONNRESET
WSAEBADF
WSAEMSGSIZE
WSABASEERR
WSAEACCES
WSAETOOMANYREFS
WSAEAFNOSUPPORT
WSAESHUTDOWN
WSAENOTEMPTY
WSAENAMETOOLONG
WSAECONNABORTED
WSAENOPROTOOPT
WSAEUSERS
WSANOTINITIALISED
WSAEFAULT
WSAEPROCLIM
WSAENETUNREACH
WSAVERNOTSUPPORTED
WSAESTALE
WSAEMFILE
WSAELOOP
WSAEHOSTUNREACH
WSAENOTSOCK
WSAENETDOWN
WSAEHOSTDOWN
EINPROGRESS
ETXTBSY
ETOOMANYREFS
EDEADLOCK
ESOCKTNOSUPPORT
ENAMETOOLONG
EOPNOTSUPP
EADDRINUSE
ECONNRESET
ENOTSOCK
ENETUNREACH
ECONNABORTED
EDESTADDRREQ
ENOTCONN
EDEADLK
ETIMEDOUT
ENETRESET
ENOLINK
EBADMSG
EADDRNOTAVAIL
EPROTONOSUPPORT
ECONNREFUSED
ENOTDIR
ENETDOWN
EALREADY
ENOEXEC
EPROTOTYPE
ESHUTDOWN
EISCONN
EWOULDBLOCK
ENOPROTOOPT
EPFNOSUPPORT
EHOSTDOWN
EAFNOSUPPORT
EMSGSIZE
EREMOTE
ENOBUFS
ENOTEMPTY
EOVERFLOW
ENODATA
EHOSTUNREACH
errorcode
itertools
future_builtins
ifilter
get_referents
get_referrers
is_tracked
get_objects
collect
get_threshold
set_threshold
get_count
get_debug
set_debug
isenabled
generation
gc: %.100s <%.100s instance at %p>
gc: %.100s <%.100s %p>
gc couldn't create gc.garbage list
unexpected exception during garbage collection
garbage collection
, %.4fs elapsed
gc: done, %Id unreachable, %Id uncollectable
gc: done
uncollectable
collectable
gc: objects in each generation:
gc: collecting generation %d...
gc couldn't allocate "__del__"
__del__
invalid generation
i:set_debug
i|ii:set_threshold
DEBUG_LEAK
DEBUG_SAVEALL
DEBUG_OBJECTS
DEBUG_INSTANCES
DEBUG_UNCOLLECTABLE
DEBUG_COLLECTABLE
DEBUG_STATS
garbage
GC object already tracked
grey2rgb
rgb2grey
rgb82rgb
rgb2rgb8
tovideo
grey42grey
grey22grey
mono2grey
dither2grey2
dither2mono
grey2grey4
grey2grey2
grey2mono
%s value is negative or nul
String has incorrect length
backward_compatible
abs(newy2-newy1)+1
abs(newx2-newx1)+1
s#iiiiiii
s#iiiii
Size should be 1 or 4
?333333
?imageop.error
imageop
the imageop module has been removed in Python 3.0
itertools.izip_longest
itertools.repeat
itertools.izip
itertools.count
itertools.ifilterfalse
itertools.ifilter
itertools.compress
selectors
itertools.permutations
itertools.combinations_with_replacement
itertools.combinations
itertools.product
itertools.chain
from_iterable
itertools.imap
itertools.starmap
itertools.islice
itertools.takewhile
itertools.dropwhile
itertools.cycle
itertools.tee
itertools.tee_dataobject
itertools._grouper
itertools.groupby
O|O:groupby
n must be >= 0
cycle()
dropwhile
dropwhile()
takewhile
takewhile()
Indices for islice() must be None or an integer: 0 <= x <= maxint.
Step for islice() must be a positive integer or None.
Stop argument for islice() must be None or an integer: 0 <= x <= maxint.
islice()
starmap
starmap()
imap() must have at least two arguments.
chain()
repeat argument cannot be negative
|n:product
r must be non-negative
On:combinations
On:combinations_with_replacement
O|O:permutations
OO:compress
ifilter()
ifilterfalse
ifilterfalse()
a number is required
|OO:count
count(%s, %s)
count(%s)
count(%zd)
izip argument #%zd must support iteration
O|n:repeat
repeat(%s, %zd)
repeat(%s)
len() of unsized object
izip_longest argument #%zd must support iteration
izip_longest() got an unexpected keyword argument
fillvalue
PYTHONHASHSEED: if this variable is set to 'random', the effect is the same
   as specifying the -R option: a random value is used to seed the hashes of
   str, bytes and datetime objects.  It can also be set to an integer
   in the range [0,4294967295] to get hash values with a predictable seed.
PYTHONHOME   : alternate <prefix> directory (or <prefix>%c<exec_prefix>).
               The default module search path uses %s.
PYTHONCASEOK : ignore case in 'import' statements (Windows).
PYTHONIOENCODING: Encoding[:errors] used for stdin/stdout/stderr.
-3     : warn about Python 3.x incompatibilities that 2to3 cannot trivially fix
file   : program read from script file
-      : program read from stdin (default; interactive mode if a tty)
arg ...: arguments passed to program in sys.argv[1:]
Other environment variables:
PYTHONSTARTUP: file executed on interactive startup (no default)
PYTHONPATH   : '%c'-separated list of directories prefixed to the
               default module search path.  The result is sys.path.
-u     : unbuffered binary stdout and stderr; also PYTHONUNBUFFERED=x
         see man page for details on internal buffering relating to '-u'
-v     : verbose (trace import statements); also PYTHONVERBOSE=x
         can be supplied multiple times to increase verbosity
-V     : print the Python version number and exit (also --version)
-W arg : warning control; arg is action:message:category:module:lineno
         also PYTHONWARNINGS=arg
-x     : skip first line of source, allowing use of non-Unix forms of #!cmd
         if stdin does not appear to be a terminal; also PYTHONINSPECT=x
-m mod : run library module as a script (terminates option list)
-O     : optimize generated bytecode slightly; also PYTHONOPTIMIZE=x
-OO    : remove doc-strings in addition to the -O optimizations
-R     : use a pseudo-random salt to make hash() values of various types be
         unpredictable between separate invocations of the interpreter, as
         a defense against denial-of-service attacks
-Q arg : division options: -Qold (default), -Qwarn, -Qwarnall, -Qnew
-s     : don't add user site directory to sys.path; also PYTHONNOUSERSITE
-S     : don't imply 'import site' on initialization
-t     : issue warnings about inconsistent tab usage (-tt: issue errors)
Options and arguments (and corresponding environment variables):
-B     : don't write .py[co] files on import; also PYTHONDONTWRITEBYTECODE=x
-c cmd : program passed in as string (terminates option list)
-d     : debug output from parser; also PYTHONDEBUG=x
-E     : ignore PYTHON* environment variables (such as PYTHONPATH)
-h     : print this help message and exit (also --help)
-i     : inspect interactively after running script; forces a prompt even
usage: %s [option] ... [-c cmd | -m mod | file | -] [arg] ...
<prefix>\lib
Try `python -h' for more information.
Could not open PYTHONSTARTUP
PYTHONSTARTUP
Could not create arguments for runpy._run_module_as_main
Could not access runpy._run_module_as_main
_run_module_as_main
Could not import runpy module
%s: '%s' is a directory, cannot continue
%s: can't open file '%s': [Errno %d] %s
<stdin>
Type "help", "copyright", "credits" or "license" for more information.
Python %s on %s
not enough memory to copy PYTHONWARNINGS
PYTHONWARNINGS
PYTHONNOUSERSITE
PYTHONUNBUFFERED
PYTHONINSPECT
Python %s
not enough memory to copy -c argument
not enough memory to copy -m argument
-Q option should be `-Qold', `-Qwarn', `-Qwarnall', or `-Qnew' only
warnall
PYTHONHASHSEED
3bBc:dEhiJm:OQ:RsStuUvVW:xX?
radians
factorial
degrees
copysign
>@math.fsum partials
-inf + inf in fsum
intermediate overflow in fsum
factorial() only accepts integral values
factorial() not defined for negative values
__trunc__
Expected an int or long as second argument to ldexp.
dO:ldexp
_md5.md5
digestsize
block_size
digest_size
hexdigest
s*:update
|s*:new
MD5Type
tagname
mmap.mmap
write_byte
read_byte
read byte out of range
mmap closed or invalid
s#|nn:find
s#|nn:rfind
mmap can't modify a readonly memory map.
mmap can't resize a readonly or copy-on-write memory map.
data out of range
s#:write
write byte out of range
c:write_byte
n:resize
flush values out of range
|nn:flush
seek out of range
unknown seek type
source, destination, or count out of range
kkk:move
Accessing non-existent mmap segment
accessing non-existent buffer segment
mmap index out of range
mmap indices must be integers
mmaps don't support concatenation
mmaps don't support repeat operation
mmap slice assignment is wrong size
mmap slice assignment must be a string
mmap object doesn't support slice deletion
mmap assignment must be single-character string
mmap object doesn't support item deletion
mmap indices must be integer
map size must be an integral value
memory mapped %s must be positive
mmap length is too large
mmap offset is greater than file size
cannot mmap an empty file
memory mapped offset must be positive
mmap invalid access parameter.
ACCESS_COPY
ACCESS_WRITE
ACCESS_READ
ALLOCATIONGRANULARITY
PAGESIZE
mmap.error
operator.methodcaller
operator.attrgetter
operator.itemgetter
ge(a, b) -- Same as a>=b.
gt(a, b) -- Same as a>b.
ne(a, b) -- Same as a!=b.
eq(a, b) -- Same as a==b.
le(a, b) -- Same as a<=b.
lt(a, b) -- Same as a<b.
__delslice__
delslice(a, b, c) -- Same as del a[b:c].
delslice
__setslice__
setslice(a, b, c, d) -- Same as a[b:c] = d.
setslice
__getslice__
getslice(a, b, c) -- Same as a[b:c].
getslice
__ipow__
a = ipow(a, b) -- Same as a **= b.
__pow__
pow(a, b) -- Same as a ** b.
__delitem__
delitem(a, b) -- Same as del a[b].
delitem
__setitem__
setitem(a, b, c) -- Same as a[b] = c.
setitem
__getitem__
getitem(a, b) -- Same as a[b].
getitem
__irepeat__
a = irepeat(a, b) -- Same as a *= b, where a is a sequence, and b is an integer.
irepeat
__iconcat__
a = iconcat(a, b) -- Same as a += b, for a and b sequences.
iconcat
__repeat__
repeat(a, b) -- Return a * b, where a is a sequence, and b is an integer.
__concat__
concat(a, b) -- Same as a + b, for a and b sequences.
__ior__
a = ior(a, b) -- Same as a |= b.
__ixor__
a = ixor(a, b) -- Same as a ^= b.
__iand__
a = iand(a, b) -- Same as a &= b.
__irshift__
a = irshift(a, b) -- Same as a >>= b.
irshift
__ilshift__
a = ilshift(a, b) -- Same as a <<= b.
ilshift
__imod__
a = imod(a, b) -- Same as a %= b.
__itruediv__
a = itruediv(a, b) -- Same as a /= b when __future__.division is in effect.
itruediv
__ifloordiv__
a = ifloordiv(a, b) -- Same as a //= b.
ifloordiv
__idiv__
a = idiv(a, b) -- Same as a /= b when __future__.division is not in effect.
__imul__
a = imul(a, b) -- Same as a *= b.
__isub__
a = isub(a, b) -- Same as a -= b.
__iadd__
a = iadd(a, b) -- Same as a += b.
or_(a, b) -- Same as a | b.
__xor__
xor(a, b) -- Same as a ^ b.
__and__
and_(a, b) -- Same as a & b.
__not__
not_(a) -- Same as not a.
__rshift__
rshift(a, b) -- Same as a >> b.
__lshift__
lshift(a, b) -- Same as a << b.
__invert__
invert(a) -- Same as ~a.
__inv__
inv(a) -- Same as ~a.
__abs__
abs(a) -- Same as abs(a).
__pos__
pos(a) -- Same as +a.
__neg__
neg(a) -- Same as -a.
__mod__
mod(a, b) -- Same as a % b.
__truediv__
truediv(a, b) -- Same as a / b when __future__.division is in effect.
truediv
__floordiv__
floordiv(a, b) -- Same as a // b.
floordiv
__div__
div(a, b) -- Same as a / b when __future__.division is not in effect.
__mul__
mul(a, b) -- Same as a * b.
__sub__
sub(a, b) -- Same as a - b.
__add__
add(a, b) -- Same as a + b.
__index__
index(a) -- Same as a.__index__()
is_not(a, b) -- Same as a is not b.
is_(a, b) -- Same as a is b.
isMappingType(a) -- Return True if a has a mapping type, False otherwise.
isMappingType
countOf(a, b) -- Return the number of times b occurs in a.
countOf
indexOf(a, b) -- Return the first index of b in a.
indexOf
sequenceIncludes(a, b) -- Same as b in a (note reversed operands; deprecated).
sequenceIncludes
__contains__
contains(a, b) -- Same as b in a (note reversed operands).
contains
truth(a) -- Return True if a is true, False otherwise.
isSequenceType(a) -- Return True if a has a sequence type, False otherwise.
isSequenceType
isNumberType(a) -- Return True if a has a numeric type, False otherwise.
isNumberType
isCallable(a) -- Same as callable(a).
isCallable
operator.isCallable() is not supported in 3.x. Use hasattr(obj, '__call__').
operator.sequenceIncludes() is not supported in 3.x. Use operator.contains().
op_floordiv
op_truediv
op_lshift
op_rshift
op_and_
op_iadd
op_isub
op_imul
op_idiv
op_ifloordiv
op_itruediv
op_imod
op_ilshift
op_irshift
op_iand
op_ixor
op_concat
Oi:op_repeat
op_iconcat
Oi:op_irepeat
op_contains
op_getitem
op_delitem
op_setitem
Onn:getslice
OnnO:setslice
Onn:delslice
itemgetter
itemgetter()
attrgetter
attrgetter()
attribute name must be a string
methodcaller needs at least one argument, the method name
methodcaller
operator
Returns the pickle magic to allow ST objects to be pickled.
_pickler
tuple2st
tuple2ast
st2list
st2tuple
sequence2st
Creates an ST object from a tree representation.
sequence2ast
Creates an ST object from a suite.
Determines if an ST object was created from a suite.
Determines if an ST object was created from an expression.
Creates an ST object from an expression.
compilest
Compiles an ST object into a code object.
compileast
Creates a list-tree representation of an ST.
ast2list
Creates a tuple-tree representation of an ST.
ast2tuple
sequence
filename
col_info
line_info
Intermediate representation of a Python parse tree.
parser.st
Returns size in memory, in bytes.
Creates a tuple-tree representation of this ST.
totuple
Creates a list-tree representation of this ST.
Determines if this ST object was created from a suite.
issuite
Determines if this ST object was created from an expression.
Compile this ST object into a code object.
|OO:totuple
O!|OO:st2tuple
ast2tuple is removed in 3.x; use st2tuple
|OO:tolist
O!|OO:st2list
ast2list is removed in 3.x; use st2list
|s:compile
O!|s:compilest
<syntax-tree>
compileast is removed in 3.x; use compilest
:isexpr
O!:isexpr
:issuite
O!:issuite
s:suite
Illegal node construct.
unsupported number of child nodes
second item in terminal node must be a string, found %s
third item in terminal node must be an integer, found %s
terminal nodes must have 2 or 3 entries
Illegal syntax-tree; cannot start with terminal symbol.
Expected node type %d, got %d.
Illegal number of children for %s node.
Illegal terminal: expected "%s"
testlist1
illegal variable argument trailer for varargslist
expected variable argument trailer for varargslist
Illegal compound statement type: %d.
compound_stmt
yield_stmt
import_as_name
illegal number of children for dotted_as_name
import_name
Unrecognized child node of import_stmt: %d.
illegal import_stmt child type
import_stmt
illegal global statement
unknown comparison operator
comp_op
illegal operator '%s'
illegal comparison operator type
sliceop
exprlist
O!:_pickler
__copyright__
ASTType
ParserError
parser.ParserError
del_stmt
invalid number of arguments for subscript node
subscript
illegal formation for varargslist
varargslist missing child nodes
lambdef
old_lambdef
subscriptlist
parameters
testlist_safe
list_if
comp_if
list_iter
comp_iter
list_for
comp_for
illegal trailing nodes for listmaker
missing child nodes of listmaker
illegal trailing nodes for testlist_comp
missing child nodes of testlist_comp
illegal trailing nodes for dictorsetmaker
illegal number of nodes for dictorsetmaker
illegal list display atom
illegal arglist specification
illegal use of '**' in arglist
illegal use of '*' in arglist
illegal arglist specification (extra stuff on end)
need '(', ')' for generator expression
arglist
trailer
illegal number of nodes for 'power'
testlist
illegal augmented assignment operator
augassign
print_stmt
illegal exec statement
illegal assert statement
could not validate expression tuple
try/except/finally
Illegal number of children for try/%s node.
try/finally
finally
unrecognized node type
continue
illegal flow_stmt type
flow_stmt
Unrecognized child node of small_stmt: %d.
illegal small_stmt child type
small_stmt
simple_stmt
VALIDATION FAILURE: report this to the maintainer!
Error Parsing encoding_decl
unspecified ST error occurred
parse tree does not use a valid start symbol
sequence2st() requires a single sequence argument
O:sequence2st
tuple2ast is removed in 3.x; use tuple2st
urandom
_getfullpathname
tempnam
tmpfile
strerror
closerange
waitpid
startfile
spawnve
stat_float_times
listdir
getcwdu
statvfs_result
f_namemax
f_favail
f_ffree
f_files
f_bavail
f_bfree
f_blocks
f_frsize
f_bsize
stat_result
time of last change
st_ctime
time of last modification
st_mtime
time of last access
st_atime
integer time of last change
integer time of last modification
integer time of last access
total size, in bytes
st_size
group ID of owner
user ID of owner
number of hard links
st_nlink
protection bits
st_mode
|i:stat_float_times
>eti:access
Ui:access
s:chdir
U:chdir
eti:chmod
Ui|:chmod
et#:listdir
U:listdir
et#:_getfullpathname
U|:_getfullpathname
et|i:mkdir
U|i:mkdir
ss:rename
OO:rename
s:rmdir
U:rmdir
et:stat
s:system
i:umask
s:remove
U:remove
utime() arg 2 must be a tuple (atime, mtime)
etO:utime
UO|:utime
i:_exit
execv() arg 2 must be a tuple or list
execv() arg 2 must contain only strings
execv() arg 2 must not be empty
etO:execv
execve() arg 2 must be a tuple or list
execve(): env.keys() or env.values() is not a list
s;execve() arg 3 contains a non-string value
s;execve() arg 3 contains a non-string key
et;execve() arg 2 must contain only strings
execve() arg 3 must be a mapping object
etOO:execve
spawnv() arg 2 must be a tuple or list
spawnv() arg 2 must contain only strings
ietO:spawnv
spawnve() arg 2 must be a tuple or list
spawnve(): env.keys() or env.values() is not a list
s;spawnve() arg 3 contains a non-string value
s;spawnve() arg 3 contains a non-string key
et;spawnve() arg 2 must contain only strings
spawnve() arg 3 must be a mapping object
ietOO:spawnve
kk:kill
et:_isdir
U|:_isdir
Cannot locate a COMSPEC environment variable to use as the shell
"%s" %s%s%s
Can not locate '%s' which is needed for popen to work with your shell or platform.
w9xpopen.exe
command.com
COMSPEC
ii:waitpid
et:lstat
U:lstat
z@ddddd
Ui|i:mkdir
i:close
ii:closerange
ii:dup2
iOi:lseek
ii:read
is*:write
i:fstat
<fdopen>
i:isatty
the environment variable is longer than %u bytes
ss:putenv
strerror() argument out of range
i:strerror
tempnam has been removed in 3.x; use the tempfile module
tempnam is a potential security risk to your program
|zz:tempnam
<tmpfile>
tmpfile has been removed in 3.x; use the tempfile module
unexpected NULL from tmpnam
tmpnam has been removed in 3.x; use the tempfile module
tmpnam is a potential security risk to your program
abort() called from Python code didn't abort!
et|s:startfile
U|s:startfile
negative argument not allowed
n:urandom
P_DETACH
P_NOWAITO
P_OVERLAY
P_NOWAIT
O_SEQUENTIAL
O_RANDOM
O_TEMPORARY
O_SHORT_LIVED
O_NOINHERIT
O_BINARY
O_TRUNC
O_CREAT
O_APPEND
O_WRONLY
O_RDONLY
TMP_MAX
nt.statvfs_result
nt.stat_result
environ
popen() arg 3 must be -1
popen() arg 2 must be 'r' or 'w'
s|si:popen
popen2() arg 3 must be -1
popen2() arg 2 must be 't' or 'b'
s|si:popen2
popen3() arg 3 must be -1
popen3() arg 2 must be 't' or 'b'
s|si:popen3
popen4() arg 3 must be -1
popen4() arg 2 must be 't' or 'b'
s|si:popen4
_sha256.sha256
_sha256.sha224
_sha256
_sha512.sha512
_sha512.sha384
_sha512
_sha.sha
blocksize
default_int_handler
set_wakeup_fd
getsignal
signal number out of range
i:getsignal
invalid fd
set_wakeup_fd only works in main thread
i:set_wakeup_fd
invalid signal value
signal handler must be signal.SIG_IGN, signal.SIG_DFL, or a callable object
signal only works in main thread
iO:signal
CTRL_BREAK_EVENT
CTRL_C_EVENT
SIGTERM
SIGSEGV
SIGABRT
SIGBREAK
SIG_IGN
SIG_DFL
translate
swapcase
splitfields
maketrans
joinfields
expandtabs
capitalize
empty separator
t#|z#n:split
strop functions are obsolete; use string methods
first argument must be a sequence
input too long
first argument must be sequence of strings
O|t#:join
t#t#|nn:find
t#t#|nn:rfind
new string is too long
tabsize must be at least 1
s#|i:expandtabs
t#t#|nn:count
invalid literal for atoi(): %.200s
atoi() literal too large: %.200s
invalid base for atoi()
s|i:atoi
invalid literal for atol(): %.200s
empty string for atol()
invalid base for atol()
s|i:atol
invalid literal for atof(): %.200s
empty string for atof()
maketrans arguments must have same length
t#t#:maketrans
translation table must be 256 characters long
St#|t#:translate
empty pattern string
t#t#t#|n:replace
whitespace
Return symbol and scope dictionaries used internally by compiler.
symtable
symtable() arg 3 must be 'exec' or 'eval' or 'single'
sss:symtable
SCOPE_MASK
SCOPE_OFF
GLOBAL_IMPLICIT
GLOBAL_EXPLICIT
OPT_BARE_EXEC
OPT_EXEC
OPT_IMPORT_STAR
TYPE_MODULE
TYPE_CLASS
TYPE_FUNCTION
DEF_BOUND
DEF_IMPORT
DEF_FREE_CLASS
DEF_FREE
DEF_PARAM
DEF_LOCAL
DEF_GLOBAL
_symtable
stack_size
get_ident
interrupt_main
exit_thread
allocate
allocate_lock
start_new
start_new_thread
Thread-local data
thread._local
_localdummy_destroyed
Thread-local dummy
_thread._localdummy
thread.lock
__exit__
__enter__
locked_lock
release
release_lock
acquire
acquire_lock
|i:acquire
release unlocked lock
can't allocate lock
Couldn't get thread-state dictionary
'%.50s' object attribute '__dict__' is read-only
Unhandled exception in thread started by 
can't start new thread
optional 3rd arg must be a dictionary
2nd arg must be a tuple
first arg must be callable
no current thread ident
setting stack size not supported
size not valid: %zd bytes
size must be 0 or a positive value
|n:stack_size
LockType
thread.error
thread.local.%p
Initialization arguments are not supported
asctime
localtime
The time value as returned by gmtime(), localtime(), and strptime(), and
 accepted by asctime(), mktime() and strftime().  May be considered as a
 sequence of 9 integers.
 Note that several fields' values are not the same as those defined by
 the C language standard for struct tm.  For example, the value of the
 field tm_year is the actual year, not year - 1900.  See individual
 fields' descriptions for details.
time.struct_time
1 if summer time is in effect, 0 if not, and -1 if unknown
tm_isdst
day of year, range [1, 366]
tm_yday
day of week, range [0, 6], Monday is 0
tm_wday
seconds, range [0, 61])
minutes, range [0, 59]
hours, range [0, 23]
tm_hour
day of month, range [1, 31]
tm_mday
month of year, range [1, 12]
year, for example, 1993
tm_year
timestamp out of range for platform time_t
@year >= 1900 required
year out of range
accept2dyear
(iiiiiiiii)
month out of range
day of month out of range
hour out of range
minute out of range
seconds out of range
day of year out of range
Invalid format string
aAbBcdHIjmMpSUwWxXyYzZ%
day of week out of range
s|O:strftime
_strptime_time
invalid time
unconvertible time
mktime argument out of range
daylight
altzone
timezone
PYTHONY2K
MbP?sleep length is too large
Ad:sleep
|O:gmtime
|O:localtime
xxsubtype.spamdict
xxsubtype.spamlist
an int variable for demonstration purposes
staticmeth(*args, **kw)
staticmeth
classmeth(*args, **kw)
classmeth
setstate(state)
getstate() -> state
:getstate
i:setstate
spamdict
spamlist
xxsubtype
zipimport.zipimporter
archive
is_package
get_filename
get_source
get_code
get_data
load_module
find_module
<zipimporter object "%.300s">
<zipimporter object "%.300s%c%.150s">
path too long
s|O:zipimporter.find_module
can't find module '%.200s'
s:zipimporter.is_package
# zipimport: found %ld names in %s
siiiiiii
not a Zip file: '%.200s'
can't read Zip file: '%.200s'
can't read Zip file: %s
can't open Zip file: '%.200s'
Zip path name is too long
# zipimport: zlib %s
UNAVAILABLE
available
decompress
zipimport: can't read data
can't decompress data; zlib not available
bad local file header in %s
zipimport: can not open file %s
slllllll
compiled module %.200s is not a code object
# %s has bad mtime
# %s has bad magic
bad pyc data
zipimport: no memory to allocate source buffer
# trying %s%c%s
_zip_directory_cache
zipimporter
ZipImportError
zipimport.ZipImportError
zipimport
not a Zip file
archive path too long
archive path is empty
s:zipimporter
zipimporter()
import %s # loaded from Zip %s
__path__
%s%c%s%s
__loader__
s:zipimporter.load_module
s:zipimporter.get_filename
s:zipimporter.get_data
s:zipimporter.get_code
__init__.py
s:zipimporter.get_source
zlib.Decompress
zlib.Compress
decompressobj
compressobj
adler32
compress
Error %d %s: %.200s
incomplete or truncated stream
invalid input data
Error %d %s
inconsistent stream state
library version mismatch
Out of memory while compressing data
Bad compression level
while finishing compression
while compressing data
Can't allocate memory to compress data
s#|i:compress
Out of memory while decompressing data
while finishing data decompression
while decompressing data
while preparing to decompress data
s#|in:decompress
Can't allocate memory for compression object
Invalid initialization option
while creating compression object
|iiiii:compressobj
Can't allocate memory for decompression object
while creating decompression object
|i:decompressobj
while compressing
s#:compress
while decompressing
max_length must be greater than zero
s#|i:decompress
while flushing
from deflateEnd()
|i:flush
Inconsistent stream state
while copying compression object
while copying decompression object
from inflateEnd()
length must be greater than zero
unconsumed_tail
unused_data
s#|I:adler32
s#|I:crc32
ZLIB_VERSION
Z_FULL_FLUSH
Z_SYNC_FLUSH
Z_NO_FLUSH
Z_FINISH
Z_DEFAULT_STRATEGY
Z_HUFFMAN_ONLY
Z_FILTERED
Z_DEFAULT_COMPRESSION
Z_BEST_COMPRESSION
Z_BEST_SPEED
DEF_MEM_LEVEL
DEFLATED
MAX_WBITS
zlib.error
[-&LMb#{'
)\ZEo^m/
H*0"ZOW
IiGM>nw
 deflate 1.2.3 Copyright 1995-2005 Jean-loup Gailly 
%c%c%c%c%c%c%c%c%c%c
<fd:%d>
invalid distance too far back
invalid distance code
invalid literal/length code
too many length or distance symbols
invalid distances set
invalid bit length repeat
invalid literal/lengths set
invalid code lengths set
invalid stored block lengths
invalid block type
incorrect length check
incorrect data check
header crc mismatch
unknown header flags set
incorrect header check
invalid window size
unknown compression method
 inflate 1.2.3 Copyright 1995-2005 Mark Adler 
								
incompatible version
buffer error
insufficient memory
data error
stream error
file error
stream end
need dictionary
gb18030
gb18030ext
gbcommon
getcodec
"+"."a"L"H"="
"`"n"o"d"e"
"5"4"B&@&
$t$u$v$w$x$y$z${$|$}$~$
$`$a$b$c$d$e$f$g$h$i$
 2!2"2#2$2%2&2'2(2)2
`!a!b!c!d!e!f!g!h!i!j!k!
A0B0C0D0E0F0G0H0I0J0K0L0M0N0O0P0Q0R0S0T0U0V0W0X0Y0Z0[0\0]0^0_0`0a0b0c0d0e0f0g0h0i0j0k0l0m0n0o0p0q0r0s0t0u0v0w0x0y0z0{0|0}0~0
1 1!1"1#1$1%1&1'1(1)1
% %!%"%#%$%%%&%'%(%)%*%+%,%-%.%/%0%1%2%3%4%5%6%7%8%9%:%;%<%=%>%?%@%A%B%C%D%E%F%G%H%I%J%K%JU?
g~vFdpO%
a+R*vl_
S^eEu1U!P
T{)vSb'YFTyk
S_!cZQa
W5uCO8u
Q[O&T+Ywe
qWlIl/Ymg*
`LqCfL^M`
W:gxu=z
Thpgwckw
ENxp]NR
Z&P7wwS
S4nKQ;R
Ws`QW-TzzP`T[
[>k!SP{
vfwgrFz
hGYgkfu
cp`=murfb
XL] kIk
sN]leQ%
PeU^q[{Rf
Igq\ R}qk
7x3u{T8O
u%urrGS
^pe1oU`7R
[yYTXms
`plMWJd*
pdlXX*d
mCRI\)Y
zvhEcR{
wpf;V8T!
^\ud`n}
yhglboO
u{Q7h>o
YvtGd'\e
S8xBg=h
zp_3o _
bck?e'^
bSSLh"t
DU@w|pJmyQ
gZP\OPW
SGN-Y;rnS
S&S.S>S\
R-R3R?R@RLR^RaR\R
N%O'O	O+O^OgO8eZO]O_OWO2O=OvOtO
P%P(P~PCPUPHPNPlP{P
N=lXOeO
X)W,W*W3W9W.W/W\W;WBWiW
W|W{WhWmWvWsW
XDX XeXlX
S"\%\,\4\Lbjb
b9cKcCc
d&d!d^d
d	e%e.e
TKTRTSTTTVTCT!TWTYT#T2T
TwTqTdT
U'U*UgU
UIUmUAUUU?UPU<U7UVUuUvUwU3U0U\U
V'V-VXV9VWV,VMVbVYV\VLVTV
VdVqVkV{V|V
^1^;^<^7^D^T^[^^^a^
]']&].]$]
]X]>]4]=]l][]o]]]k]K]J]i]t]
s"s9s%s,s8s1sPsMsWs`slsos~s
`?`!`x`y`{`z`B`j`}`
a+aJaua
b5lTl\lJl
lhliltlvl
m+mMm.m5m
mOmRmTm3m
m\m`m|mcm
m+nnnNnkn
nSnTn2n%nDn
nboFoGo$o
n/o6oKoto*o	o)o
oxoro|ozo
p9p5pOp^p
P_W_V_X_;\
TP\Y\q[c\f\
*_)_-_t
Z	Z2Z4Z
Z@ZgZJZUZ<ZbZuZ
[2[7[@[
\Z[e[s[Q[S[b[u
t*t[t&t%t(t0t.t,t
tAt\tWtUtYtwtmt~t
LgSg^gHgig
g2h3h`hahNhbhDhdh
hUhfhAhgh@h>hJhIh)h
iqi9i`iBi]i
ificiyi
jPj[j5j
jyj=j(jXj|j
b"b!b%b$b,b
f4f1f6f5f
_fTfAfOfVfafWfwf
r]rfror~r
l!l)l$l*l2l5eUekeMrRrVr0rb
$k7k9kCkFkYk
q/q1qsq\qhqEqrqJqxqzq
q>b=bCbHbIb;y@yFyIy[y\ySyZybyWy`yoygyzy
_<`]`Z`g`A`Y`c`
x9x:x;x
x<x%x,x#x)xNxmxVxWx&xPxGxLxjx
w-w&w5w8wPwQwGwCwZwhwbwew
w:u@uNuKuHu[uruyu
z9z7zQz
v<v"v v@v-v0v?v5vCv>v3vMv^vTv\vVvkvov
{G{8{*{
{.{1{ {%{${3{>{
{X{Z{E{u{L{]{`{n{{{b{r{q{
|*|&|8|A|@|
N N!N#N&N)N.N/N1N3N5N7N<N@NANBNDNFNJNQNUNWNZN[NbNcNdNeNgNhNjNkNlNmNnNoNrNtNuNvNwNxNyNzN{N|N}N
O!O#O(O)O,O-O.O1O3O5O7O9O;O>O?O@OAOBODOEOGOHOIOJOKOLOROTOVOaObOfOhOjOkOmOnOqOrOuOwOxOyOzO}O
P P"P#P$P'P+P/P0P1P2P3P4P5P6P7P8P9P;P=P?P@PAPBPDPEPFPIPJPKPMPPPQPRPSPTPVPWPXPYP[P]P^P_P`PaPbPcPdPfPgPhPiPjPkPmPnPoPpPqPrPsPtPuPxPyPzP|P}P
Q Q"Q#Q$Q%Q&Q'Q(Q)Q*Q+Q,Q-Q.Q/Q0Q1Q2Q3Q4Q5Q6Q7Q8Q9Q:Q;Q<Q=Q>QBQGQJQLQNQOQPQRQSQWQXQYQ[Q]Q^Q_Q`QaQcQdQfQgQiQjQoQrQzQ~Q
R!R"R#R%R&R'R*R,R/R1R2R4R5R<R>RDRERFRGRHRIRKRNRORRRSRURWRXR
YRZR[R]R_R`RbRcRdRfRhRkRlRmRnRpRqRsRtRuRvRwRxRyRzR{R|R~R
S"S$S%S'S(S)S+S,S-S/S0S1S2S3S4S5S6S7S8S<S=S@SBSDSFSKSLSMSPSTSXSYS[S]SeShSjSlSmSrSvSyS{S|S}S~S
T"T$T%T*T0T3T6T7T:T=T?TATBTDTETGTITLTMTNTOTQTZT]T^T_T`TaTcTeTgTiTjTkTlTmTnToTpTtTyTzT~T
U!U%U&U
(U)U+U-U2U4U5U6U8U9U:U;U=U@UBUEUGUHUKULUMUNUOUQURUSUTUWUXUYUZU[U]U^U_U`UbUcUhUiUkUoUpUqUrUsUtUyUzU}U
V V!V"V%V&V(V)V*V+V.V/V0V3V5V7V8V:V<V=V>V@VAVBVCVDVEVFVGVHVIVJVKVOVPVQVRVSVUVVVZV[V]V^V_V`VaV
cVeVfVgVmVnVoVpVrVsVtVuVwVxVyVzV}V~V
W W!W"W$W%W&W'W+W1W2W4W5W6W7W8W<W=W?WAWCWDWEWFWHWIWKWRWSWTWUWVWXWYWbWcWeWgWlWnWpWqWrWtWuWxWyWzW}W~W
X"X#X%X&X'X(X)X+X,X-X.X/X1X2X3X4X6X7X8X9X:X;X<X=X>X?X@XAXBXCXEXFXGXHXIXJXKXNXOXPXRXSXUXVXWXYXZX[X\X]X_X`XaXbXcXdXfXgXhXiXjXmXnXoXpXqXrXsXtXuXvXwXxXyXzX{X|X}X
Y Y!Y"Y#Y&Y(Y,Y0Y2Y3Y5Y6Y;Y=Y>Y?Y@YCYEYFYJYLYMYPYRYSYYY[Y\Y]Y^Y_YaYcYdYfYgYhYiYjYkYlYmYnYoYpYqYrYuYwYzY{Y|Y~Y
Z!Z"Z$Z&Z'Z(Z*Z+Z,Z-Z.Z/Z0Z3Z5Z7Z8Z9Z:Z;Z=Z>Z?ZAZBZCZDZEZGZHZKZLZMZNZOZPZQZRZSZTZVZWZXZYZ[Z\Z]Z^Z_Z`ZaZcZdZeZfZhZiZkZlZmZnZoZpZqZrZsZxZyZ{Z|Z}Z~Z
[ [!["[#[$[%[&['[([)[*[+[,[-[.[/[0[1[3[5[6[8[9[:[;[<[=[>[?[A[B[C[D[E[F[G[H[I[J[K[L[M[N[O[R[V[^[`[a[g[h[k[m[n[o[r[t[v[w[x[y[{[|[~[
\ \!\#\&\(\)\*\+\-\.\/\0\2\3\5\6\7\C\D\F\G\L\M\R\S\T\V\W\X\Z\[\\\]\_\b\d\g\h\i\j\k\l\m\p\r\s\t\u\v\w\x\{\|\}\~\
] ]!]"]#]%](]*]+],]/]0]1]2]3]5]6]7]8]9]:];]<]?]@]A]B]C]D]E]F]H]I]M]N]O]P]Q]R]S]T]U]V]W]Y]Z]\]^]_]`]a]b]c]d]e]f]g]h]j]m]n]p]q]r]s]u]v]w]x]y]z]{]|]}]~]
^ ^!^"^#^$^%^(^)^*^+^,^/^0^2^3^4^5^6^9^:^>^?^@^A^C^F^G^H^I^J^K^M^N^O^P^Q^R^S^V^W^X^Y^Z^\^]^_^`^c^d^e^f^g^h^i^j^k^l^m^n^o^p^q^u^w^y^~^
_!_"_#_$_
(_+_,_._0_2_3_4_5_6_7_8_;_=_>_?_A_B_C_D_E_F_G_H_I_J_K_L_M_N_O_Q_T_Y_Z_[_\_^___`_c_e_g_h_k_n_o_r_t_u_v_x_z_}_~_
`"`#`$`,`-`.`0`1`2`3`4`6`7`8`9`:`=`>`@`D`E`F`G`H`I`J`L`N`O`Q`S`T`V`W`X`[`\`^`_```a`e`f`n`q`r`t`u`w`~`
a!a"a%a(a)a*a,a-a.a/a0a1a2a3a4a5a6a7a8a9a:a;a<a=a>a@aAaBaCaDaEaFaGaIaKaMaOaPaRaSaTaVaWaXaYaZa[a\a^a_a`aaacadaeafaiajakalamanaoaqarasatavaxayaza{a|a}a~a
b b#b&b'b(b)b+b-b/b0b1b2b5b6b8b9b:b;b<bBbDbEbFbJbObPbUbVbWbYbZb\b]b^b_b`babbbdbebhbqbrbtbubwbxbzb{b}b
c&c'c)c,c-c.c0c1c3c4c5c6c7c8c;c<c>c?c@cAcDcGcHcJcQcRcScTcVcWcXcYcZc[c\c]c`cdcecfchcjckclcocpcrcsctcucxcyc|c}c~c
d"d#d$d
%d'd(d)d+d.d/d0d1d2d3d5d6d7d8d9d;d<d>d@dBdCdIdKdLdMdNdOdPdQdSdUdVdWdYdZd[d\d]d_d`dadbdcdddedfdhdjdkdldndodpdqdrdsdtdudvdwd{d|d}d~d
"e#e$e&e'e(e)e*e,e-e0e1e2e3e7e:e<e=e@eAeBeCeDeFeGeJeKeMeNePeReSeTeWeXeZe\e_e`eaedeeegeheiejemeneoeqeseuevexeyeze{e|e}e~e
f!f"f#f$f&f)f*f+f,f.f0f2f3f7f8f9f:f;f=f?f@fBfDfEfFfGfHfIfJfMfNfPfQfXf
Yf[f\f]f^f`fbfcfefgfifjfkflfmfqfrfsfufxfyf{f|f}f
g g!g"g#g$g%g'g)g.g0g2g3g6g7g8g9g;g<g>g?gAgDgEgGgJgKgMgRgTgUgWgXgYgZg[g]gbgcgdgfgggkglgngqgtgvg
xgygzg{g}g
h h"h#h$h%h&h'h(h+h,h-h.h/h0h1h4h5h6h:h;h?hGhKhMhOhRhVhWhXhYhZh[h\h]h^h_hjhlhmhnhohphqhrhshuhxhyhzh{h|h}h~h
i!i"i#i%i&i'i(i)i*i+i,i.i/i1i2i3i5i6i7i8i:i;i<i>i@iAiCiDiEiFiGiHiIiJiKiLiMiNiOiPiQiRiSiUiViXiYi[i\i_iaibidieigihiiijilimioipirisitiuivizi{i}i~i
j j"j#j$j%j&j'j)j+j,j-j.j0j2j3j4j6j7j8j9j:j;j<j?j@jAjBjCjEjFjHjIjJjKjLjMjNjOjQjRjSjTjUjVjWjZj\j]j^j_j`jbjcjdjfjgjhjijjjkjljmjnjojpjrjsjtjujvjwjxjzj{j}j~j
k%k&k(k)k*k+k,k-k.k/k0k1k3k4k5k6k8k;k<k=k?k@kAkBkDkEkHkJkKkMkNkOkPkQkRkSkTkUkVkWkXkZk[k\k]k^k_k`kakhkikkklkmknkokpkqkrksktkukvkwkxkzk}k~k
l l#l%l+l,l-l1l3l6l7l9l:l;l<l>l?lClDlElHlKlLlMlNlOlQlRlSlVlXlYlZlblclelflglklllmlnlolqlslulwlxlzl{l|l
m m!m"m#m$m&m(m)m,m-m/m0m4m6m7m8m:m?m@mBmDmImLmPmUmVmWmXm[m]m_mambmdmemgmhmkmlmmmpmqmrmsmumvmymzm{m}m~m
n"n&n'n(n*n,n.n0n1n3n5n
6n7n9n;n<n=n>n?n@nAnBnEnFnGnHnInJnKnLnOnPnQnRnUnWnYnZn\n]n^n`nanbncndnenfngnhninjnlnmnonpnqnrnsntnunvnwnxnynzn{n|n}n
o!o"o#o%o&o'o(o,o.o0o2o4o5o7o8o9o:o;o<o=o?o@oAoBo
CoDoEoHoIoJoLoNoOoPoQoRoSoToUoVoWoYoZo[o]o_o`oaocodoeogohoiojokolooopoqosouovowoyo{o}o~o
p p!p"p$p%p&p'p(p)p*p
+p,p-p.p/p0p1p2p3p4p6p7p8p:p;p<p=p>p?p@pApBpCpDpEpFpGpHpIpJpKpMpNpPpQpRpSpTpUpVpWpXpYpZp[p\p]p_p`papbpcpdpepfpgphpipjpnpqprpsptpwpypzp{p}p
q q!q"q#q$q%q'q(q)q*q+q,q-q.q2q3q4q
5q7q8q9q:q;q<q=q>q?q@qAqBqCqDqFqGqHqIqKqMqOqPqQqRqSqTqUqVqWqXqYqZq[q]q_q`qaqbqcqeqiqjqkqlqmqoqpqqqtquqvqwqyq{q|q~q
r r!r"r#r$r%r&r'r)r+r-r.r/r2r3r4r:r<r>r@rArBrCrDrErFrIrJrKrNrOrPrQrSrTrUrWrXrZr\r^r`rcrdrerhrjrkrlrmrprqrsrtrvrwrxr{r|r}r
 p!q!r!s!t!u!v!w!x!y!5
"#"R"f"g"
"P%Q%R%S%T%U%V%W%X%Y%Z%[%\%]%^%_%`%a%b%c%d%e%f%g%h%i%j%k%l%m%n%o%p%q%r%s%
!0"0#0$0%0&0'0(0)0
s s#s$s&s's(s-s/s0s2s3s5s6s:s;s<s=s@sAsBsCsDsEsFsGsHs
IsJsKsLsNsOsQsSsTsUsVsXsYsZs[s\s]s^s_sasbscsdsesfsgshsisjsksnspsqsrssstsusvswsxsyszs{s|s}s
t t!t#t$t't)t+t-t/t1t2t7t8t9t:t;t=t>t?t@tBtCtDtEtFtGtHtItJtKtLtMt
NtOtPtQtRtStTtVtXt]t`tatbtctdtetftgthtitjtktltntotqtrtstttutxtytzt{t|t}t
u u!u"u#u$u&u'u*u.u4u6u9u<u=u?uAuBuCuDuFuGuIuJuMuPuQuRuSuUuVuWuXu
]u^u_u`uaubucuduguhuiukulumunuoupuqusuuuvuwuzu{u|u}u~u
v!v#v'v(v,v.v/v1v2v6v7v9v:v;v=vAvBvDvEvFvGvHvIvJvKvNvOvPvQvRvSvUvWvXvYvZv[v]v_v`vavbvdvevfvgvhvivjvlvmvnvpvqvrvsvtvuvvvwvyvzv|v
w!w#w$w%w'w*w+w
,w.w0w1w2w3w4w9w;w=w>w?wBwDwEwFwHwIwJwKwLwMwNwOwRwSwTwUwVwWwXwYw\w]w^w_w`wdwgwiwjwmwnwowpwqwrwswtwuwvwwwxwzw{w|w
x x!x"x$x(x*x+x.x/x1x2x3x5x6x=x?xAxBxCxDxFxHxIxJxKxMxOxQxSxTxXxYxZx
[x\x^x_x`xaxbxcxdxexfxgxhxixoxpxqxrxsxtxuxvxxxyxzx{x}x~x
y y!y"y#y%y&y'y(y)y*y+y,y-y.y/y0y1y2y3y5y6y7y8y9y=y?yByCyDyEyGyJyKyLyMyNyOyPyQyRyTyUyXyYyaycy
dyfyiyjykylynypyqyrysytyuyvyyy{y|y}y~y
z!z"z$z%z&z'z(z)z*z+z,z-z.z/z0z1z2z4z5z6z8z:z>z@zAzBzCzDzEzGzHzIzJzKzLzMzNzOzPzRzSzTzUzVzXzYzZz[z\z]z^z_z`zazbzczdzezfzgzhz
izjzkzlzmznzozqzrzszuz{z|z}z~z
{!{"{#{'{){-{/{0{2{4{5{6{7{9{;{={?{@{A{B{C{D{F{H{J{M{N{S{U{W{Y{\{^{_{a{c{d{e{f{g{h{i{j{k{l{m{o{p{s{t{v{x{z{|{}{
| |!|"|#|$|%|(|)|+|,|-|.|/|0|1|2|3|4|5|6|7|9|:|;|<|=|>|B|C|D|E|F|G|H|I|J|K|L|N|O|P|Q|R|S|T|U|V|W|X|Y|Z|[|\|]|^|_|`|a|b|c|d|e|f|g|h|i|j|k|l|m|n|o|p|q|r|u|v|w|x|y|z|~|
}!}#}$}%}&}(})}*},}-}.}0}1}2}3}4}5}6}7}8}9}:};}<}=}>}?}@}A}B}C}D}E}F}G}H}I}J}K}L}M}N}O}P}Q}R}S}T}U}V}W}X}Y}Z}[}\}]}^}_}`}a}b}c}d}e}f}g}h}i}j}k}l}m}o}p}q}r}s}t}u}v}
x}y}z}{}|}}}~}
~ ~!~"~#~$~%~&~'~(~)~*~+~,~-~.~/~0~1~2~3~4~5~6~7~8~9~
:~<~=~>~?~@~B~C~D~E~F~H~I~J~K~L~M~N~O~P~Q~R~S~T~U~V~W~X~Y~Z~[~\~]~^~_~`~a~b~c~d~e~f~g~h~i~j~k~l~m~n~o~p~q~r~s~t~u~v~w~x~y~z~{~|~}~~~
!&"&#&$&%&&&'&(&)&*&+&,&-&.&/&0&1&
2&3&4&5&6&7&8&
A&B&C&D&E&F&G&H&I&J&K&L&M&N&O&P&Q&
R&S&T&U&V&W&X&''
!'"'#'$'%'&'(')'*'+','-'.'/'0'1'2'3'4'5'6'7'8'9':';'<'='>'?'@'A'Q'R'S'T'U'V'X'Y'Z'['\']'^'_'`'a'b'c'd'e'f'g'h'i'j'k'l'm'n'o'p'q'
q"r"s"t"u"v"w"x"y"z"{"|"
{!|!z!}!
D!E!I!H!R!
`!_!C!K!
P!Y"Z"["\"]"^"_"`"a"b"
E"F"G"H"I"J"K"L"M"N"O"P"Q"R"S"T"U"V"W"X"1"2"3"4"5"6"7"8"9":";"<"=">"?"@"A"B"C"D"$)%)&)')()))*)+),)-).)/)0)1)2)3)4)5)6)7)8)9):);)<)=)>)?)@)A)B)C)D)E)F)G)H)I)J)K)L)M)N)O)P)Q)R)S)T)U)V)W)X)Y)Z)[)\)])^)_)`)a)b)c)d)e)f)g)h)i)j)k)l)m)n)o)
a!!!"!#!(!
4!5!6!7!8!9!:!;!>!?!
~!2!3!<!=!
!$"$#$$$%$&$'$($)$*$+$,$-$.$/$0$1$2$3$4$5$6$7$8$9$:$;$<$=$>$?$@$A$B$C$D$E$F$G$H$I$J$K$L$M$N$O$P$Q$R$S$T$U$V$W$X$Y$Z$[$\$]$^$_$`$a$b$c$d$e$f$g$h$i$j$k$l$m$n$o$p$q$r$s$
!%"%#%$%%%&%'%(%)%*%+%,%-%.%/%0%1%2%3%4%5%6%7%8%9%:%;%<%=%>%?%@%A%B%C%D%E%F%G%H%I%J%K%L%M%N%O%P%Q%R%S%T%U%V%W%X%Y%Z%[%\%]%^%_%`%a%b%c%d%e%f%g%h%i%j%k%l%m%n%o%p%q%r%s%t%u%v%
E(F(G(H(I(J(K(L(M(N(O(P(Q(R(S(T(U(V(W(X(Y(Z([(\(](^(_(`(a(b(c(d(e(f(g(h(i(e"f"g"h"i"j"k"l"m"n"
rMIU}HOIBO"X;2kSD
(WRG'X@JF
pG{15RT4+6?K)XG
v8>Q\cPVM
hM$5*NwVS
v@Y>/XT
1X4CeRY
.VZN'Uu:&7V@Z
9FREGG[
?XE>rF2R0OgO_
BJ~6!XZSw?
FT%;AXeN.>
=XoYvM:?
;=%:`Rz2`:6D
mO)>$MAA
ZR2JJHlXjXFXv=MFp3
V2PWKJ{KLU68IO
iN?<|7%7]P
ZVESo;a;qX
KIvXWBwX
;NM5!WtWSS
"Y\Y`S}Xp7wW~XzX!YcD
D=lU`2HGk?-YA
Y4m64YT
^YNG~@8Y[
7Y#1aS9Yb
2Y)A3Yg
s<^P)8i
UYTYWYj
*TVPd3WU
K0+9yAbY
X9KPx1dF_>d5HW
k7y1|Ye3v>
9M<0v3w;J[/:T
dT65s5VXPHU
V7PGWXW
>kPAuArTU844_
FV"K/H2IL4L?o
[X\Xg6A<jLq
0Hl0&9S<qN=[SA
/6zV,EY=>[?[
0X/;11D
%FxG=R\
}IgN\;k0b
01dW?Wf
%5tBODg
e12_<U(?,BUX1Bk
4X.C!S#Np
4<4HQBq
r6|Lz@z
9QaQGX}
VSf20<QS+K47
!H\Jd1pP
Z?E9d>mA
6_5_;VP=YUH0#6I?(L3_7JRS
OX6RE:>K>L
,M{Cs:t@BMrO8_EO
_ALMwRM7A_
q7I0V6T7
,:}LT?1KtF
<_=_>_;E?_B_1TC_
G:N_H_^E
W_V_IWc_d_ke'RR_B
^_'07FS_L
_6[M~9UTN
__lO%0g_Q_FQU_X_Y_\_P
b_f_h_4SS
g86Ej_ZI(ADDX
q_FLr_p
o_p_=;}
[J(N'`*3
!F6I2@u_
#`$`%`%P
&?/`9N+`FI
.@.`m:0:)`
>`*`$IA`
CKM`F`B`
a`]`-Rq
[`Y`_`x
wF,XkTf`IJ
n`X;6XrRo`EM
ZTW[Y[S
X[g9\[][X5T
[[!3_[[
P[.L2?5;xWS?f
a<3L^[S0kNX79WBFm
g[a[:Fc[q
94,@"Bb[d[
s[R[89+Tl[
DRd?P<a6
fFNDn7G
<1H^1=WLJ^M
yegHze}Mk
1W>8hBl
~e%fWM~
A7|e}e#f
c=C9&fUP/N
^M&B+f,f?=.f3f
$S?ftICfP
^fW?PTI
VWf4oKZfCXNW"PJ
_f><B9[f'QM
|K3e,U^
nSXJ20_
ZWY9fV(6pMKR&15Jg
h3sIM?{PRJ6eB;h
&:gQ|OR<q
m?v1^Ku
D<zR\C\?x
g4T6BK0Q<5
,J|R_3jeaD!>2NrDV>(Fc2
|GkLl=]N
:JAFle<P
+aZ8-a.a0a:51a
6a5akAA
=a?aMBj
$9sWIG^>.9|
:<QRHKM0
1Ay`cV/2DV[5
[gC;WSDS
b?&SW5Rbj5
Vb|J5?9SUb
[bZb*@I
C^%X*?M[lRzF*Ek
<Bhegeie
_a\:`a2;IBaa
DP`bX1dR
cb~l}l/_
bb>V|M&C
v:ib^73;,LKKdbfbjbkb
tbuTsbD
zUBE@2G
rb/A<KJ
1<qbTP9TubV9vbO
%m~bQJ_
V;'mtPu
$m^:w6!c26qL'9w
zb{b}b|bUD"c}
k5e>R2M3
91+cQ2,5_9h6
lN'jgPyJVH7OI3RNd=
^cr;(j=U
flel?7yKb1
VJP^E2zT@
KFG0r4SHB
)@Q^(IoQ$Eg063EHQ
RUP3<<Z
VRcJ%Wg
6M669?[Uh
R^Y?UB@Gl
S^:Qi3|
tV#5p24DiD-@T^
OMV^P>>WU^PU]0
5S9@!E&2qT
(@CJW^|U
4F'W0JCD
NN"L.PSD25X^uU7<S;
[^F04:SIsDh>
^6ZJt5e^
X?FMZQk4
aWo^hCaLI
l^s2i8'Bi
cIs^Z0!Rw1
9l8lCB7l
UH)5I><VgT
.QqP8j9j:j5:@
WRtN?jV
DjGjFjj
9I~OJjNTMjOj~
BTPSCksED
4N)D>1}TX
n@SPD2e4k
=hxJ\8uLt
nQ?hBhy
Uh\<O<[h
X03DL8bF>HaH
j1;UNhPh06Sh
nhlhp9RLfh&Nr?
bhcheh55ghEGkhmh0=.WD
NC`Nf@t
,?1i:iQ
\S4i5i7iY
7GN46;@P#l
9V}UK4=2dNgFh
bicijQei}
>69XH1O1Q1~E
%CxF-kJD
.k/k0kU7
$:uQ102k4k
4QacjH/9-=X3[NB
hcictMG
_GJRVNV
cc=E$AYBW2h
mc&;-Di
{cucS:l
NVSUA94UXQq
|coc(7wctc~
vc]E(2|F
zc}c)Lsc
C14mqcrc
xc:PCFsT~c
n;]M"GIE
3G,===%d
k;0d(E1d
T@5d0A6dPN
sH'=GU,I"8Jd
MW@d}O?d
KdUWBdj
|T32Wdu
MVYd\dzB^d
l@]Qnd]
vdtd~Bn
Elf>?LZE<>
Cl8KC@~L
37UIGlb;H
LL}=HHI
bl:1Y7i
LlfQMl|
t>88/RV0y5
ujvj,Og@
4WnaoaLS
qaq?paR5
@6AO(JvaxU|Sxa|ayaK
~a!bG@N
(b~2"ba
MCB2'b&bd
IPmV(C,bk
`i-b*br
bg7;VOo
UAYG}ECEj
'hw:xg$h
5h2h3hb
J80_uI\
&8.pB1g
8eoLISW<jIh
tAN[3nsP
1E]pqQM
`pL0j=N
/4h7fpep#FapbpC4T
[LR>2<X
hpgpdp!2[
"V8S7>,H\
LV[:ipc
!Akpnpk
mppplpl
tpvpa4{
T=J;'pr
An;05UNQ`<P:E
G8A5LEG
pmqm<Cg
wmt?l>xm
/K!n=6D
%n:X#n&nW
'n$n9O`
C=soL6+0C
yN/7s?8mkB0IN
)W:m;m[
FmNmhUb
iIRTAmBmCmEml
6KLmMm|
RmrA2SKm7H
5B-0iKF
UmSmWmM
vEn<Zm<Lj2[
_mZ@h4k
>Jjlq@i
qlnlol#WqInKtl}
mS.Xk@c
>5Z<|;X
?>nG6q7qU?
;qQ=04=>
:>9>BUq
$7p?~V2MU
esfsjsaBlsoshs}<
`@LtQWu
PtOtQtZK
TtUt+>@
b8GL\tO
yf@>zfl:{fKO|f<T6<}f~fM<RH3N!g
?4"g4IY8ID
]WZBW7=VFND7
&E#g_O$g%g&g7AiWpI8O/VUV'gm0(g)g\IoR->*gs0^Ha=+gFH
,gf;x8$Q-ggBx>J=3M.g/gn>eP
gKPLL<0g(<wP1g
xP2g3gB44g5g~I,N`C7gA1q3
8g9g[W@U:gLB:W;g<g=gj<eCB@>g?g)<
@gAg6gP6Bg
CgDg:;^5FB`1Eg5TFg?8HgGgl7
Igx2JgKgLgMgNgOgPg'SuKQgRgSgTgIIUgVgWgXgYgI=Zg>s
;nVUoWL
Ft_PGtr
<?#k_UHjT
sqx6#KX
hq{8iqD:ETR0\
mqnqoqqqpqUEd
tq.RG^JKl
DA{A0Vwqw
G6X8@kN8P
?k&3I9+VQ
g<>7FkU
Gk90O?V
BkDkvIWVMU2POk8NPk]
31Rk%Lc
Qk_ENk$JUk{0k
JkKkLkMkVk@fYkp
h?HRWk\kl8Xkq
Zk[k`TjFTD_k'EuY
0@8RgkH
hk;GsML
98YOeDokpkZLHMr0d
EL$D%Ox
NM!l[17S
(R(t)tb
*tK>_Sc
-t.t/tt
=:3tc00ty
1t"=U2z
6t7tf602OO4t,4{
^t<Ah<D
+I^QueE
4\,05\K
VI:\6\S
<\E\=\X
R\f=+B^
8\K\N\>\R7E0G\>PA\(;_
F\?\[Gb
C\H\I\T2Q\UKl
7T[\_\&Lf\m
z069e\S\q
D\V\tH`?r
BW/C67QG)Cb\X\k\T\
|\n\pRh2
s\v<h\D;L
T<i\j\R
q\v\y\45S
YHg;~\}\+S!]#]%]qR$]&]'])RT
6]1]4]]
9]3]-]*D|
(]3@+A*]+]
2]q;5](S:]
T]bAF7B
B]HC<F.NL]S
)S*SS]tOxHc
Y]X]p8V]
[]\]^]I
tUs]p]m
>Gz]|]~]"^*0N1k
&^6=oHt
4^mJ9^c
.r";2B0EGB
g:3r5r4rdK:O2r4JORlBJ
CN8rv07rQ
;r6r?r=rd
GrDrFrg
JrBr@ri
HrF905v
CrIrPrVrx
]ULrMrOrSr
XrZr]r[r
/@lr^rE
,Seru2_
vrxrzrr
orwrmrnr
's)s$sE
/s~r-s_
b:iaBRBq92r
MqOqc?Pqf
f9YCSJhj@@u>ijjjkj`
ljmjnjojG=a
%ZF<)6<8OH%<&Z'ZVLCH(Z}F
5QiR6QG<
2=d;)Z*ZHQ+ZmPo6[B
OKm7hIC7w>$V,Z-Z@FgW6J
)U_KoU.Z_VJ40Z/Z
kR1Z2Z3ZTJ4Z+J5Z6ZO3oV7Z0;.58Z9Zn9/QhR:ZC8jOo2;Z<Z
k=\NoS=ZsN>ZUSe;?Z5KPK@ZkGnVAZ5EA6BZL7N?CZDZ-KEZw5FZBA;WGZ8L
jR1DHZ}5Q;IZ3PJZKZ=NLZMZNZw2QZOZhQPZUCRZ
SZTZUZ;P%Ry0VZ+GWZw=!CXZYZ}C7LZZ[Z>@WF\Z]Z4G^Z_ZH9@
tu*1r2t
41jU:8O
19F2pTMO\0KUu;JV770L6Fa1:9|Va9!7z<Zj[jyLs9\j{43CQ7X:]jtT^jV<_;_j^A8B_TJW`jajdjbjcj^I38D6ejjJMIM4P
YbbEfj5@R
8Wgj,W|HSXMX^TS
yTDI.SS8`3T
qt08TUO8pF]
`>Huz8D
r9<uMuK
NuOuQue6RuR
Wua>Xul
?e85cuhu#L
53~Tl9yPa
mi*WniVBmHd:oipiqiaVrisiuitiviwiaGxiXTyiN=b
zi{iO=|i(8>A}i21T;u9~ic
!j"j#jx7-<d
dJN`/T=O7U$j^U%jAP<9e
x=6T%N,AY3
JeGeO5HF
KMMKJJSLLeKefD
8MpVOe]5
EJQ3YKlTRej7B
Ue~4VeK
t6ZeXeYe@5_
JS*:"[qG
|Z{Z[I}Z
![^W~ZZA
I@#[&[#VH
.[,[B:O
*[GT?2U
OSztuGCWdE|t}t{tC
"u!u(:~tVKN
*M%u#u4=(uS
)uM=8Ca?aK*uT
&u'upDW
W4+u.u_
-u/uQPa
3u4u5uv
o@XV0R?A
DnEnFnkU$6HnGnInJn%GKnLn
07v5MnOn
F8PnQnRn[6.3SVFD51V8SnTn?TUG{>YN39VnUnXnWn%EYnZn.G[n/G\n'2]n^n_n`nanjWbncnX<dnKSzL,2eAen&G-C
fngnhninjnknln
pnqnrntnsn
un-MABvnwnxn!Uyn3Ozn{n
|n}n!o~n"ou8zC#o$oB=?Ry2%o&o'oxR(o}V)oLF
*o+o4A,ozOxK.o-oz3x9/o0obP1o2of7?P3o4o5oqH`L6o7o8o9o:o`U;om4*C<o
}N@o`B846Wu=@
GOCoAoBoDo'6|<b>LCEoFoA
GoOoHoIoJoBGqoM6KoB
LoMoF6>CNoC
PoQoRorUD
ToxDUoVod8w0WoXoYoF
Zo[o\o]oG
^o5>ao_o`oH
bocoMAdoeofogohoiojokoloX@I
mo-AnooopoJ
ECEcAIFc\
U1JN34rHGcPOHcd<IcJcFC"UVDk9ENKcvCLc]
'7s8R:McNcDTOc^
PcKQQcRcScTcVQUc{2;@Vc_
+@WcXcYc`
eZ@7tQuRsUW=p
hWhZgZt
=8J<=B$BB3jZw
*B0D5=x
mZITUOcE
pZjAUL]O
sZ/06OG
@vAvQDc
[PEQ/<M9f
F4:SBv{3i
jS'v)Q~
*vpU,v9C
??RCfCr
+:8h9h:hB>
3R%6jG|qnO3KkPoggMK9Y6}qd0LK~q$T-BlADF1>!rU<F
$rCR5FH
1SE?bLJ
&r'rUQn6(r)r_5*r+rK
|2,r-r'HL
)l*l+lt
.F-l.lw
<b=b>b?b@bAb97{R$=NJ%1GK
Bb|6DHCb
FbZO]9Gb!@
sAJbKbxBLbMbNbWJ8XeYcOB
mB&TTM1Q[3}GR
52?B`f;JafbfT>cf$WUMef]<dfffgfnBS
>=hffB':ifT
jfR3iQU
%?kfoFlfmfW
nf-FofY
'Ipfqfrf9esftfbBufvfhVwfZ
>w<w!:f
BwAwDwk
}?j;IwGFHwq
JwLwKwr
QvRvSvTv
_v`vavbvcvdvp@evfvgvhviv
mvnvovpvqvrvsvtv(>
uvvvwvxv
zHyvzv{v|v
}v~v!w"w#w$w%w
&w'w(wn1)w*w+w
,w-w[A.w
qD/p&<0pyC\
1p2p3p4p5p<Q^
7p6p'T`
RM8p:p9p;p<pa
k8=ph:c
>p?pi>@pl6ApBpCpDp5HEpFpd
KpLpMpk
PpQpRpSpTpUpVpXpq
rJh@$p[
lwmwnwc
4vdA5v6v7v8v9v:v#H;v
!#"###g!%#&#'#(#)#*#+#,#-#.#/#0#1#2#3#4#5#6#7#8#9#:#;#<#=#>#?#@#A#B#C#D#E#F#G#H#I#J#K#L#M#N#O#P#Q#R#S#T#U#V#W#X#Y#Z#[#\#]#^#_#`#a#b#c#d#e#f#g#h#i#j#k#l#m#n#o#p#q#r#s#t#u#v#w#x#y#z#{#|#}#+!
.GIzI}I
l!o!, z!
"L%O%V#t%
3F4m0H4r4
9r:m6t:M;
<U@j9W@^A
DKFYAMF`F
IvL)FxL
__create_codec
_multibytecodec
multibytecodec.__map_*
no such codec is supported.
encoding name must be a string.
_codecs_cn
big5hkscs_nonbmp
big5hkscs_bmp
big5hkscs
ExEgrwM
;6GDGGL@L
F#k%rTZc
Y2Y4Yf[
S#Tm5r5
N>5#\Q_
8Lb5ezk5l:llp+r,N
QY50]"a2
A>]H]V]
] 888B^
hr;q;{;	iCi\rdi
;ejtjqj
n$o4oF=A?
=PpTpop
Ieq1>\U
>BO.PlP
qdeFj+):"+P4
,;dkeri
nGX$mBx;q
MX?Uusv
DWmO~gp
?S?Bumuru
@Cw9@agE@
wj@o@^\
@9xGxQxfxH
A!Nb{l{{{
|`BzB{|
#*'q(O)
UFTnTRk
s4?U2v^U
W?I]XfP
-j_6id!
y4j[k,]
{f}zAC{~y	
g 7.c%}
kb`$a$b$c$d$e$f$g$h$i$t$u$v$w$x$y$z${$|$}$p!q!r!s!t!u!v!w!x!y!6N?N
='A0B0C0D0E0F0G0H0I0J0K0L0M0N0O0P0Q0R0S0T0U0V0W0X0Y0Z0[0\0]0^0_0`0a0b0c0d0e0f0g0h0i0j0k0l0m0n0o0p0q0r0s0t0u0v0w0x0y0z0{0|0}0~0
ZT%f%W%`%l%c%Z%i%]%R%d%U%^%j%a%X%g%[%S%e%V%_%k%b%Y%h%\%Q%P%m%n%p%o%
Typ+UWf[mmTSkt
f::dW:Me
eme_e~0
iY6*!Ej
Do\oN=top
QVAWA@A
qwB+qEq
B,qZD'J"J
V.r@rtI
hUrWrU>D0
MuJugunu
v,vQvOvovvv
map data must be a Capsule.
_codecs_tw
__map_big5
_codecs_hk
iso2022_jp_ext
iso2022_jp_3
iso2022_jp_2004
iso2022_jp_2
iso2022_jp_1
iso2022_jp
iso2022_kr
__map_ksx1001
_codecs_kr
__map_cp949
__map_jisx0208
_codecs_jp
__map_jisxcommon
__map_jisx0212
__map_jisx0213_pair
__map_jisx0213_2_emp
__map_jisx0213_1_emp
__map_jisx0213_emp
__map_jisx0213_2_bmp
__map_jisx0213_1_bmp
__map_jisx0213_bmp
__map_gb2312
__map_gbcommon
_codecs_iso2022
shift_jisx0213
euc_jisx0213
euc_jis_2004
shift_jis_2004
shift_jis
cp932ext
jisx0213_pair
jisx0213_emp
jisx0213_2_emp
jisx0213_1_emp
jisx0213_bmp
jisx0213_2_bmp
jisx0213_1_bmp
jisxcommon
jisx0212
jisx0208
"4"B&@&
"a"R"j"k"
"5"+","
+!0 o&m&j&  ! 
A0B0C0D0E0F0G0H0I0J0K0L0M0N0O0P0Q0R0S0T0U0V0W0X0Y0Z0[0\0]0^0_0`0a0b0c0d0e0f0g0h0i0j0k0l0m0n0o0p0q0r0s0t0u0v0w0x0y0z0{0|0}0~0
%,%$%4%<%
%#%3%+%;%K% %/%(%7%?%
%0%%%8%B%
U0[q_ f
OxSi`)nOz
hwmppLu
h>kSkWl"o
_%`Qe=gBlrl
\7_J_/`P`m`
e#k=k4t
RDQSU-W
_u`vaga
c:dleofBh
P kzlTotzP}@
N9P&PeP|Q8RcR
^'_8bEe
OHSIT>T/Z
W}YT[][
i_l*mim/n
dR(WPgj
R:\Sg|p5rL
NOOEQAS
f-fvf~g
m	nXn<q&qgq
dagVgDm
N,p]u/f
wMzM|>~
NHQCS`S
g\oNq}q
U8o6qhQ
OtPGRsSo`Ic_g,n
_ `Ka4b
n'pSSDU
_e`zf`l
gnoRr:u:wt
X,[,}*r
NNO\PuPCR
xQkX)YU\
e\g!n{v
UTXXXWY
b-dqgCh
uwyI{T{R{
~wuWS`i
l>m6t4xFZu
Qu`ukQb
g>lNlHr
enfnm6r&{P
NuOuQ@Xc^s^
{OP	YGr
WUcik+u
SFT1XIY
d4ggrfwFz
XL^TY,g
R"Y!q_r
m6s7s1uPy
n	tYukx
a#oIq>|
N*N1N6N<N?NBNVNXN
N	OZO0O[O]OWOGOvO
O{OiOpO
O!P)P,P
gUPPPHPZPVPlPxP
Q!Q:Q7Q<Q;Q?Q@QRQLQTQbQ
ziQjQnQ
R'R*R.R3R9RORDRKRLR^RTRjRtRiRsR
S#S/S1S3S8S@SFSES
Q^SiSnS
T=T@T,T-T<T.T6T)T
T_TqTwTpT
T9U@UcULU.U\UEUVUWU8U3U]U
q4V6V2V8VkVdV/VlVjV
W&W7W8WNW;W@WOWiW
XrX!XbXKXpX
kRX=XyX
h%Y,Y-Y2Y8Y>Y
zUYPYNYZYXYbY`YgYlYiYxY
Z@ZlZIZ5Z6ZbZjZ
Z*[6[>[C[E[@[Q[U[Z[[[e[i[p[s[u[x[
\ \"\(\8\9\A\F\N\S\P\O\q[l\n\bNv\y\
]L]R]N]K]l]s]v]
^6^7^D^C^@^N^W^T^_^b^d^G^u^v^z^
_	_]_\_
_)_-_8_A_H_L_N_/_Q_V_W_Y_a_m_s_w_
`:`Z`A`j`w`_`J`F`M`c`C`d`B`l`k`Y`
aGa>a(a'aJa?a<a,a4a=aBaDasawaXaYaZakataoaeaqa_a]aSaua
b!b*b.b0b2b3bAbNb^bcb[b`bhb|b
bPc>cMc
dgdodvdNd*e
e$e#e+e4e5e7e6e8eKuHeVeUeMeXe^e]erexe
esg5f6f4f
fOfDfIfAf^f]fdfgfhf_fbfpf
.g?g6gAg8g7gFg^g`gYgcgdg
hFh)h@hMh2hNh
h+hYhchwh
hyiwi\ixikiTi~ini9iti=iYi0iai^i]i
jrj6jxjGjbjYjfjHj8j"j
GkCkIkPkYkTk[k_kakxkyk
l$l#l^lUlbljl
l~lhlsl
6m+m=m8m
mdmZmymYm
m-nnn.n
nrn_n>n#nkn+nvnMn
nCn:nNn$n
p0p>p2pQpcp
qfqbqLqVqlq
r(r-r,r0r2r;r<r?r@rFrKrXrtr~r
s4s/s)s%s>sNsOs
Wsjshspsxsus{szs
s2t:tUt?t_tYtAt\titptctjtvt~t
u&u,u<uDuMuJuIu[uFuZuiudugukumuxuvu
v'v v!v"v$v4v0v;vGvHvFv\vXvavbvhvivjvgvlvpvrvvvxv|v
w7w8wGwZwhwkw[wew
x&y x*yEx
y,y+y@y`yWy_yZyUySyzy
y1z;z>z7zCzWzIzazbziz
{5{({6{P{z{
{L{E{u{e{t{g{p{q{l{n{
{#|'|*|
|7|+|=|L|C|T|O|@|P|X|_|d|V|e|l|u|
}E}K}.}2}?}5}F}s}V}N}r}h}n}O}c}
~"~F~f~;~5~9~C~7~2~:~g~]~V~^~Y~Z~y~j~i~|~{~
N#N$N(N+N.N/N0N5N@NANDNGNQNZN\NcNhNiNtNuNyN
O.O1O`O3O5O7O9O;O>O@OBOHOIOKOLOROTOVOXO_OcOjOlOnOqOwOxOyOzO}O~O
P"P'P.P0P2P3P5P@PAPBPEPFPJPLPNPQPRPSPWPYP_P`PbPcPfPgPjPmPpPqP;P
Q#Q'Q(Q,Q-Q/Q1Q3Q4Q5Q8Q9QBQJQOQSQUQWQXQ_QdQfQ~Q
R"R(R1R2R5R<RERIRURWRXRZR\R_R`RaRfRnRwRxRyR
S%S'S(S)S+S,S-S0S2S5S<S=S>SBSLSKSYS[SaScSeSlSmSrSyS~S
T!T'T(T*T/T1T4T5TCTDTGTMTOT^TbTdTfTgTiTkTmTnTtT
U*U+U2U5U6U;U<U=UAUGUIUJUMUPUQUXUZU[U^U`UaUdUfU
V,V0V3V5V7V9V;V<V=V?V@VAVCVDVFVIVKVMVOVTV^V`VaVbVcVfViVmVoVqVrVuV
W W"W#W$W%W)W*W,W.W/W3W4W=W>W?WEWFWLWMWRWbWeWgWhWkWmWnWoWpWqWsWtWuWwWyWzW{W|W~W
X X&X'X-X2X9X?XIXLXMXOXPXUX_XaXdXgXhXxX|X
Y!Y#Y$Y(Y/Y0Y3Y5Y6Y?YCYFYRYSYYY[Y]Y^Y_YaYcYkYmYoYrYuYvYyY{Y|Y
Z#Z$Z'Z(Z*Z-Z0ZDZEZGZHZLZPZUZ^ZcZeZgZmZwZzZ{Z~Z
[![%[-[8[A[K[L[R[V[^[h[n[o[|[}[~[
\#\&\)\+\,\.\0\2\5\6\Y\Z\\\b\c\g\h\i\m\p\t\u\z\{\|\}\
]+]#]$]&]']1]4]9]=]?]B]C]F]H]U]Q]Y]J]_]`]a]b]d]j]m]p]y]z]~]
^ ^.^(^2^5^>^K^P^I^Q^V^X^[^\^^^h^j^k^l^m^n^p^
_!_"_#_$_(_+_,_._0_4_6_;_=_?_@_D_E_G_M_P_T_X_[_`_c_d_g_o_r_t_u_x_z_}_~_
`$`-`3`5`@`G`H`I`L`Q`T`V`W`]`a`g`q`~`
a"a*a+a0a1a5a6a7a9aAaEaFaIa^a`alaraxa{a|a
b b"b#b'b)b+b9b=bBbCbDbFbLbPbQbRbTbVbZb\bdbmbobsbzb}b
c)c*c-c5c6c9c<cAcBcCcDcFcJcKcNcRcScTcXc[cecfclcmcqctcucxc|c}c
d d"d$d%d)d*d/d0d5d=d?dKdOdQdRdSdTdZd[d\d]d_d`dadcdmdsdtd{d}d
e"e&e)e.e1e:e<e=eCeGeIePeReTe_e`egekeze}e
f!f"f#f$f&f)f*f+f,f.f0f1f3f9f7f@fEfFfJfLfQfNfWfXfYf[f\f`faf
fjfkflf~fsfuf
fwfxfyf{f
g g"g3g>gEgGgHgLgTgUg]gfglgngtgvg{g
h(h'h,h-h/h0h1h3h;h?hDhEhJhLhUhWhXh[hkhnhohphqhrhuhyhzh{h|h
i1i3i5i8i;iBiEiIiNiWi[icidieifihiiilipiqirizi{i
j j$j(j0j2j4j7j;j>j?jEjFjIjJjNjPjQjRjUjVj[jdjgjjjqjsj~j
k$k(k+k,k/k5k6k;k?kFkJkMkRkVkXk]k`kgkkknkpkuk}k~k
l&l'l(l,l.l3l5l6l:l;l?lJlKlMlOlRlTlYl[l\lklmloltlvlxlyl{l
m&m'm(mgl.m/m1m9m<m?mWm^m_mamemgmompm|m
n"n'n2n6n9n;n<nDnEnHnInKnOnQnRnSnTnWn\n]n^nbncnhnsn{n}n
o&o)o*o/o0o3o6o;o<o-oOoQoRoSoWoYoZo]o^oaoboholo}o~o
p p#p/p4p7p9p<pCpDpHpIpJpKpTpUp]p^pNpdpeplpnpupvp~p
q q+q-q/q0q1q8qAqEqFqGqJqKqPqRqWqZq\q^q`qhqyq
r$r+r/r4r8r9rArBrCrErNrOrPrSrUrVrZr\r^r`rcrhrkrnrorqrwrxr{r|r
s"s$s's(s,s1s2s5s:s;s=sCsMsPsRsVsXs]s^s_s`sfsgsiskslsnsosqswsys|s
t$t&t(t)t*t+t,t-t.t/t0t1t9t@tCtDtFtGtKtMtQtRtWt]tbtftgthtktmtntqtrt
u u!u$u'u)u*u/u6u9u=u>u?u@uCuGuHuNuPuRuWu^u_uauouquyuzu{u|u}u~u
v#v%v&v)v-v2v3v5v8v9v:v<vJv@vAvCvDvEvIvKvUvYv_vdvevmvnvovqvtv
w"w(w-w.w/w4w5w6w9w=w>wBwEwFwJwMwNwOwRwVwWw\w^w_w`wbwdwgwjwlwpwrwswtwzw}w
x!x"x#x-x.x0x5x7xCxDxGxHxLxNxRx\x^x`xaxcxdxhxjxnxzx~x
y y%y'y)y-y1y4y5y;y=y?yDyEyFyJyKyOyQyTyXy[y\ygyiykyryyy{y|y~y
z!z'z+z-z/z0z4z5z8z9z:zDzEzGzHzLzUzVzYz\z]z_z`zezgzjzmzuzxz~z
{#{'{){*{+{-{.{/{0{1{4{={?{@{A{G{N{U{`{d{f{i{j{m{o{r{s{w{
| |%|&|(|,|1|3|4|6|9|:|F|J|U|Q|R|S|Y|Z|[|\|]|^|a|c|g|i|m|n|p|r|y|||}|
}#}&}*}-}1}<}=}>}@}A}G}H}M}Q}S}W}Y}Z}\}]}e}g}j}p}x}z}{}
~ ~'~(~,~-~/~3~6~?~D~E~G~N~P~R~X~_~a~b~e~k~n~o~s~x~~~
!&"&#&$&%&&&'&(&)&*&+&,&-&.&/&0&1&
2&3&4&5&6&7&8&e
A&B&C&D&E&F&G&H&I&J&K&L&M&N&O&P&Q&x
R&S&T&U&V&W&X&u
!'"'#'$'%'&'(')'*'+','-'.'/'0'1'2'3'4'5'6'7'8'9':';'<'='>'?'@'A'Q'R'S'T'U'V'X'Y'Z'['\']'^'_'`'a'b'c'd'e'f'g'h'i'j'k'l'm'n'o'p'q'
+","*"-"
J"K"A"@"i"j"
]"^"!(,("(-(
t"!!"!#!7!
9!:!;!R!S!T!U!V!W!X!Y!Z![!)"."L!M!
!$"$#$$$%$&$'$($)$*$+$,$-$.$/$0$1$2$3$4$5$6$7$8$9$:$;$<$=$>$?$@$A$B$C$D$E$F$G$H$I$J$K$L$M$N$O$P$Q$R$S$T$U$V$W$X$Y$Z$[$\$]$^$_$`$a$b$c$d$e$f$g$h$i$j$k$l$m$n$o$p$q$r$s$
+!,!5!6!
!%"%#%$%%%&%'%(%)%*%+%,%-%.%/%0%1%2%3%4%5%6%7%8%9%:%;%<%=%>%?%@%A%B%C%D%E%F%G%H%I%J%K%L%M%N%O%P%Q%R%S%T%U%V%W%X%Y%Z%[%\%]%^%_%`%a%b%c%d%e%f%g%h%i%j%k%l%m%n%o%p%q%r%s%t%u%v%
&!<!3!4!l0zC!
|Kf>0;e><2$
n3#P$@BRV5:J
Ii*Ph>+P524
=MhA/Pv;sF=
3P4P5P4K6P
}5~5bD<NA
:=N?>PC
;P:P)JD
F;E;>B?PUIg@E
8!@PBPG
`8l4zI2HY5X
L0cD;=4:$Ml
>MEPGPn:HP$Up
87%Bd28
oJMCePq7Y
bPjPdPQNkPAOZ
qPuPN0d
1;wH{P%
~P#Q}PD:
75.Q/QI
2Q1Q0QS
9Q:Qt0e
58;7<={C$6h@w8f
n9<QHLFEg
4A@QAQ,Hx8;OBQ
<J6Bq65E
HQnfIQAKJQ
KQLQi>t
ZIPQQQRQ_Ex
VQTQUQSQc:WQjLdNy
[Q%tE6(
!HbQaE0
)@~:t7kQI;o9=
o:nQoQ0A
u7^:mGH
{Ij>{Qd3uQsQOA
`7|Q-NP
u=XEe9"R#R
!>)RgJ-Rp
*@*RP6q
8R=2LK$
>R$Ih6e03
?F?R==6
AR@R#>a8CR>H8
\H4BnB(6
HR,1u0m4@
tK5:Z5'MPA?H}<Y
C1QA}8E8g6a
[R!C~B+6$>\RZRD2fB8<K;&1
g9H5_D%11F>L!9yMGE~8
^4aRbRdRk
-JcR_Rc8
kRiRuR'
%Sv0$S8
wR}RH::
oB6S&>W
n4e3DS@S
v7JSHSSAJ5,6s
TS(>313
dS`ScSO
sSqSoSrS
)T50_:2
,T/TA:#9@
?T@T>Tk
!ta1sJ*
IEdE9HMD
WTQTTTVTP
\T^T]TY
TAcT<@m0dG^
eTdTfTgThTiT
IRH=?BlTkLg
7E@BWIoTpT{1l
wTUAvT@7t
|T)>~T%C}
"U!G^HQL
<U@U=U~
UUVUZ;'9?
(5I8WUX3
'1i<B0J
WA045<K
!=14hCjD8095uJ
R5k@<<(MaU
23c1,>H2X
d<cUs4RF)LdU
2?kU!;d
hUlUiU+GM\3?
PBw<uIl@
M<qU->rUsUS0:BR?i
yUzU\<,?tFT?xH"GI6{U
S;}U"V!V}6
CV=V33>VGVFVEVAV
)98:*9p5!
J8aV&LCGbV
(HqV>JrV
34?J/GtVuV
,944vV88DM)Mv4xVB
C0n=/9GM
|VwN-OR
@I3>'W&W"W
0W{F[J\
2W@J5W!P1P`
]5$Dz07W&J09a
oL98L8h
L:7I&DKIEW
JW}1,@IWHWB7TB
KW'Ne8*
y=MWLE>=
SW|I[=1
VWV;:K;K
^5hW-@e1bWx2gW
z2sWuWQC
(:82mWxWwW36
'XpD{Wq
aH\W,X0XeL~
p>/XWF%
T0*X(X1
f<9X<X6
>X?XU0<
FXIXAXEX
DXVB292X5?
8NSXV0UXV
LXRXYXD7MXW
jX):hXfXeXlXdXnXs
vXuXwXtXxX$
.@f2|2(
Cl!Ya7+
<Kj=(Y3
^M3Y4Y8YjE5Y39^@
;Y!2jCO
4C>YEY@YGYCY
<Y}2:Yq5sB6YS
9Y49[@U
g3!?IYNY
&==Y};LY[
X;MYD0]
]Y+NN:5CZY/
59d?f1<AXYE51
+Z,Z'E.Z+
=Z>Z@Z?ZAZ~2G
EZDZTGGZ56
8J]UF@X
QZB;GC`
SZVZ9NTZ
|F6Cl5];aA
eZcZdZ0
jZ~;89hZ2
lZkZpZ=
"3nZoZUH@
HCE0xZR
J6H199*[
+[q=bAm
XR>A=AXBG:
s:?D-[/O
+D.[|4t
$LvK\K%;2[
{MI0`:<B
9[+B:[r>]L<[=[hM!
UG?[lE^ZbZ$
M2H[N[T[
U[pG?K;4?
xLF<t:G
oKA3NDJFI1
[[t3a[P
\[e7K7mEX
mTh8|Mv
tD#3-:y
ILw[}4}
:L}["?GDs[8
z?/\q3!8
oF@\jFH
H6:\]=O
4\6\3\R
0OZ39\T
N\=9HDdAL\
i\l\f\w
OLx\k\{
w\y<r3#
8]7]:]=5o
D]_;5@!:
T]S]U]%2JC
&;L3W]2
rFg]>9SC
;:m]o]q
(J}L!^#<B>x]~]h1
#^YBv])
H^B^?^V
;^I^:Ef
i3Q:D>=^B=
[^t5OEj
V^_^/021k
X^,BO^Q^A9
x^`^y5:I
"_i1fAF
,_,D)_YD
(_'_-_c
c7yB2_;G
M_TFO_0
Y_:C\_W_T
aGe_h_H>!
lL+`,`VA$<-`.`M
F`,CE`}
TLJ`L`,
O`vC-G1
j`VNW6|HJG
o`j8M1q`A
,a+a-a~
DE3MC9=?
.Dh26a-
:a9aBZ&38a4
1N=a;a\C&@8
?a,NM7@a
DamFCa=
WahHQaM
VaTa@<O
iakalamau
tarasa)
|ayaza{a
/HPE$brG4I
is0b1b2b
F4WH9bR
?b>b}H\
]b[b\b;
;Cdb:6I
qb73lbp
jb*c)cG
@5'5c;Q
0cDA-cV
K=@?.c,c
Y6S2EF(=d;t
#IEcFcUC2
KcT2N7LcF9r9
Q@O1:2,0
Zc\cYc[c
v3bcacd
opO>ncocW=
?Q]C3<p
Z6%d#d(
5H~c^C{E
;;0d9d4d:
BdURIdCd
Ud|NmJZd
sLH9~dL
S<I9f;i56J"eT
GABKw:V
'e_NY:Z
*=>8HA%e+e`
.e2ek7c
Q73B9enA~
@ez<]0;eCeGeK9VL%
lekeoe_
ze;Evee
uewexef
"f#f$fs
.f,f-fa:S7
eM1f4f3f
M9NfT<MfH
af`f0Di
gfifhf%Hk
<6H@FO.LwfT@)
<g:g?G=g
DgCgFg]
JgKg11k
Pg=6*ZQg
e@RgK<o
Tg^J\4r
UgR9VgLH
IBuG?8Wg%Az
kgngNGE
q1rgjN]BP
c<l6wCU
PLwgX2}3{g_
"h!hcCo
Z2V8)IKh
Fh(KLh`0H
rIdh!F]
YhrASh[h`ha
VMch83|
~hV>I<#i
OO"FsIQ
*i';E?07tLt
=iBitA~
c2RiSiL
_iHIZHbi
eijimit
8j<j7jn
U9Mja03
SjPj^68
[:vNajbjuA
ljX>jjS
ij=@~?U
~j_6}jv
$JFG*k$
G?pCZ>U
>:BBHk^
MOMkLk'A
M5CO:3\>
Xkm8UkVkz
\kgk5D/
,8jkV9<
#lD5Afy>
k9.P7lx
8l?I9l|
OI_2NHElS4U@DlIlyCcL
JlcG_B*
GKl2Ll(OBDEO,
Ol?;r;4
QlRlX9Pl>
sltlYMx
vlwlyl|
!m%m"m~l-
9mH?;mN
V<Bm0537
FmEmZ7Hme
LmNmeJKmk
QmOm15n
m3Wm\m"
Zm2E]m#
%7`mambm,
fmpegm$C+?@G
BL~mqmrmI
vm%n)F`Csm
~DSEtmxm`?O
B@wm.B$Bum)0"O
&n7M?1]
WJa2!n"n#n$n;F#Cc0(n
xAW<,nd
e=-n+A*Af
rH3n2n0ndcT4g
SFDn6=`<[GqCV
PHS:a<Xn
Yn$NE=nLLNZnb6
^nx3K?)
2o3o6oG
UoSoVoXo
DJ[o+3$
X4U3^96H+
EJ}o!p~o"p
!1X?|=Y4#p
MN+F|o&N
)p'pd7g
.p,p-pp
0plN1p2pq
:Mm28=[8
4ps;6p3p
=pL?>p#
QpSsLL7
A6GJ:D":
rpBMh4RH\Fx
QIjMxp)
{pjB[3\3zp
t;0K~>P
/qn20qT
s<DqEqa9
sCNqp6'
)r*r+r,r1
!32:1r0r%L
:r+J8r]
LrIrHrJrw
PrOrNr|
WrSrYr'
XrTrRrQr*
II[rs0`r7
crar-C@
qr>Fnrmr
-1!s"st
Psm9MLcKwV
TsP5UsVsWs
cBYs[sZsu
rssstspNqs
t!p!s!u!
J!K!v!\!$!
%!?!0#1#2#3#4#5#6#7#8#9#'!(!c!a!d!)!w!A#B#C#D#E#F#G#H#I#J#K#L#M#N#O#P#Q#R#S#T#U#V#W#X#Y#Z#N!
O!0!2!.!a#b#c#d#e#f#g#h#i#j#k#l#m#n#o#p#q#r#s#t#u#v#w#x#y#z#P!C!Q!
"4"B&@&
`$a$b$c$d$e$f$g$h$i$j$k$l$m$n$o$p$q$r$s$`!a!b!c!d!e!f!g!h!i!
363Q3W3
3&3#3+3J3;3
2122292~3}3|3R"a"+"."
"5")"*"
PFPpPBP
YSY[Y]YcY
]!_4_g_
f;f	f.f
f$fefWfYf
i0jkjFjsj~j
m9n\n'n<n
q\qFqGq
s&t*t)t.tbt
R!xNxdxzx0y
p!q!r!s!t!u!v!w!x!y!
p!q!r!s!t!u!v!w!x!y!`!a!b!c!d!e!f!g!h!i!
PFPpPBP
YSY[Y]YcY
]!_4_g_
f;f	f.f
f$fefWfYf
i0jkjFjsj~j
m9n\n'n<n
q\qFqGq
s&t*t)t.tbt
R!xNxdxzx0y
304050;0<0
b"C"E"H"v"w"
n&k&l&i&
0d&`&b&f&a&e&g&c&
"S!T!U!
#Q2R2S2T2U2V2W2X2Y2Z2[2\2]2^2_2
%< G H I 
v'w'x'y'z'{'|'}'~'
$p!q!r!s!t!u!v!w!x!y!z!{!
Q B `$a$b$c$d$e$f$g$h$i$j$k$l$m$n$o$p$q$r$s$`!a!b!c!d!e!f!g!h!i!j!I3
363Q3W3
3&3#3+3J3;3
2122292~3}3|3
4(N/N0N
O`OHOIOVO_OjOlO~O
P'P.P@P;PAP
RIRWRaR
U+U5UPU^U
V;VIVvVfV8
!W/W3W4WpWwW|W
Z#ZgZmZwZ~Z
[%[]RA[V[}[
F]G]S]J]m]
_#_4_6_=_@_E_T_X_d_g_}_
`3`5`G`=
a+a0a7a>
"b>bCbVbZbob
c9cCcec|c
d"dydQd`dmd
f:f"f$f+f0f1f3f
YfZfafefsfwfxf
3gfgGgHg{g
h,h1h[hrhuhD
5iBiWicidihi
;j>jEjPjVj[jkjsj
k,k5kFkVk`kekgkwk
l3lYl\l
m.m1m9m?mXmemE
4nDn\n^n
*o/o3oQoYo^oaobo~o
p(pJp]p^pNpdpup
q q.q0qFqGqQqH
Rq\q`qhq
rUrVr?>
&t(t*t+t,t.t/t0tDtFtGtKtWtbtktmt
u/uouyu
v-v5vCvKvdvevmvovqv
w4w6wFwMwNw\w_wbwzw
w-xCxNxOxQxhxnxK
y.y1y4yL
9z]zmzU
{-{;{G{N{`{m{o{r{
| |3|6|dB
}#}1}A}H}S}\}z}
Y[\w^&vk~
N)N+N.N@NGNHN
OdO7O>OTOXO
wOxOzO}O
P"Ph4BPFPNPSPWPcPfPjPpP
UR\RlRwR
S$S5S>SBS
SUT$T(Tn5CTbTfTlT
U	U<UAU
5`UaUdU
5=V?V@VGV^V`VmV
EWFWLWMW
hWoWsWtWuW{W
X X'X2X9X
Z'Z-ZUZeZzZ
[4[-[L[R[h[o[|[
_\c\g\h\i\p\
] ]$]&]1]9]B]
^.^>^I^\8V^a8k^l^m^n^
_G_c_r_~_
a:ao9AaFa`a|a
b#b)bFbLbQbRbabdb{bmbsb
2c5c;c<cAcDcNc
d%d)d/dZd[d]dsd}d
e2eDeTekeze
f!f*fEfQfNf
jfkflfmf{f
LgMgTg]g
3h;h>hDhEhIhLhUhWhw;khnhzh|h
;Fiiilirizi
2j3j4j?jFjIjzjNjRjdj
k&</kJkXklkukzk
l5l6l:l
?lMl[lml
m$m&m'mgl/m<m[m^m`mpm
=2n<nHnInKnLnOnQnSnTnWncn
o%o6o<o
RoWoZo`oho
9p:p<pCpGpKp
=Tpepiplpnpvp~p
=/q1qPqJqSq^q
+r4r8r9r,NBrSrWrcr
>9s,s1s3s=sRs
nsosqsws
t$t1t9tSt@tCtMtRt]tqt
 u$u*uW?
=u>u@uHuNuPuRuluruquzu}u~u
%v(v<v3v
w-w5w9@
x!x,xGxdxjx
y0y%y;yJyXy[y
zcA-z8zGzLzVzYz\z_z`zgzjzuzxz
={'{*{.{/{1{
AU{y{d{f{i{s{
|&|E|J|Q|W|^|a|i|n|o|p|
=}>}@}G}
BY}Z}j}p}
~ ~'~,~E~s~u~~~
.)/)0)1)2)3)4)5)6)7)8)9):);)<)=)>)?)@)A)B)C)D)E)F)G)H)I)J)K)L)M)
N)O)P)Q)R)S)T)U)V)W)X)Y)Z)[)
])^)_)`)a)b)c)d)e)f)g)h)i)j)k)l)
m)n)o)p)q)r)s)t)u)z):*I*!*,*<*K*Y*_*
=*L*@*O*
>*M*?*N*Z*`*
#*.*A*Q*
C*S*++*+9*H*
D*T*%*0*]*c*'*3*&*2*G*W*(*4*
w)|)^*d*E*U*F*V*
)*5*+*8***7*
E+3+9+:+%+
?+n*&+.+
2+u*(+y*
6+<+"+B+,+
j*t*k*4+{*e*v*o*
|*q*h*'+
m*-+5+f*
\+Z+_+}+[+
j+v+w+k+l+
i+{+|+t+n+
Y&r(s(F+G+P+Q+|#
5-6-7-8-9-:-;-<-=->-?-W-
5,6,7,8,9,:,;,<,=,>,?,@,
'#%#&#(#
+#,#*#-#G"
v'w'H"I"
B'C'D'E'F'G'H'I'J'K'L'M'N'O'P'
!-"-#-$-%-&-'-(-)-*-+-,---.-/-0-1-2-3-4-
A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,
+,,,-,.,/,0,1,2,3,4,Z&[&\&]&^&_&`&a&b&c&m&
g(h(i(j(
?#h&i&j&k&
:&=&;&@&9&>&<&?&l&}"
!,",#,$,%,&,',(,),*,.#/#
}#~#Z"["X"Y"
r's't'u'
8"n&o&p&q&r&s&t&
v&w&y&z&{&|&}&~&j-k-
A(B(C(D(E(F(G(H(I(J(K(L(M(N(O(
e-f-g-h-i-
P(Q(R(S(T(U(V(W(X(Y(Z([(\(](^(
[,\,],^,_,`,a,b,c,d,e,f,g,h,i,j,k,l,m,n,
_-o-n-m-
+x,x-xo
izjzkzlz
]}K/W/rO
8.I.P.c.h.n.,///6/Z/^/aObOPt\t^tat(u+uCueuivwv%wUw)
%x'y3y4y7y8y9y;y?y@yMyQydy.zP
3z:zDzXzt
'{o{y{/|0|8|=|i
Y|c}v}{}>#=#0"
cp949ext
ksx1001
"5"+","
"*")"'"("
%d&`&a&e&g&c&
!m&i&j&l&
112131415161718191:1;1<1=1>1?1@1A1B1C1D1E1F1G1H1I1J1K1L1M1N1O1P1Q1R1S1T1U1V1W1X1Y1Z1[1\1]1^1_1`1a1b1c1d1e1f1g1h1i1j1k1l1m1n1o1p1q1r1s1t1u1v1w1x1y1z1{1|1}1~1
1p!q!r!s!t!u!v!w!x!y!
`!a!b!c!d!e!f!g!h!i!
%,%$%4%<%
%#%3%+%;%K% %/%(%7%?%
%0%%%8%B%
%!%"%&%'%)%*%-%.%1%2%5%6%9%:%=%>%@%A%C%D%E%F%G%H%I%J%
`2a2b2c2d2e2f2g2h2i2j2k2l2m2n2o2p2q2r2s2t2u2v2w2x2y2z2{2
$`$a$b$c$d$e$f$g$h$i$j$k$l$m$n$
[!\!]!^!
$t$u$v$w$x$y$z${$|$}$~$
 A0B0C0D0E0F0G0H0I0J0K0L0M0N0O0P0Q0R0S0T0U0V0W0X0Y0Z0[0\0]0^0_0`0a0b0c0d0e0f0g0h0i0j0k0l0m0n0o0p0q0r0s0t0u0v0w0x0y0z0{0|0}0~0
RNW*XL]
^:_J_wa_lzu
QOX7a>aha9e
Ppg@h	Q
bzlToP}:
OSU:XQYc[F\
b7eEere
h>kLp/t
]*eNe!hKj
RGWGu`{
S%`qbrl
h_j:k#l}l
xAyGyHyzy
OczcWS!
b#e#oIq
o;v/}7~
p	t`tYu$vkx,
]N_ba=cif
Y=^Uaxdyd
k_rarAt8w
c4fsg:n+s
Z>\K]L_
hci<nDn	ws|
d$nQo|v
Y(\G^w_?b>e
g"h}v~vD
PuQ[\w^
PVRoR&T
W+YfZZ[u[
n6r&{?|6
l#n	pEs
x>y@y`y
P*Rq\ceUl
`QhajXn=r@r
r^tn{n}
{+| }9},
d6exe9j
]']i]_t
Z8\N\M\
q3u^y3}N
ORQ^U%Z
\	cOfHh<w
CP0Xf_	q
PHS>T3T
qbt(u,us
NQOvP*Q
e1f/h\q6z
n0r?sWt
f-n2rKt
YP[W[\[c`Ha
[MbPg=h
PhQxQMRjRaX|X`Y
oNq t0u8uQurvL{
N\PuPHT
`:c?ete
t:wVyZy
m.t.zB}
\Yf=jZm
w%xIyWy
UuX/c"dIfKfmh
SyXXaYa
	P!PuR1U<Z
^p_4a^e
S9T4V6Z1\
,PSSDU|W
S*Y `Ka
l>m,r6t4xw
OOPAbGr
O}Rj_SaSg
awiwm#p
s)wMwC}b}#~7
\'_6bHb
[:jkpuu
cakefSh
`0aLaCfDf
oppjsj~
 k=kFk8Tp`=m
F!>!w)x)%"
R"$!,"v),(
y(v(z(/"
((())())
("+"*"-"
)"A%B%C%D%E%F%G%H%I%J%K%L%M%N%O%P%Q%
R%S%T%U%V%W%X%
a%b%c%d%e%f%g%h%i%j%k%l%m%n%o%p%q%
r%s%t%u%v%w%x%',
!,",#,$,%,&,(,),*,+,,,-,.,/,0,1,2,3,4,5,6,7,8,9,:,;,<,=,>,?,@,A,Q,R,S,T,U,V,X,Y,Z,[,\,],^,_,`,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,
{)|)})~)
{(|(}(~(
0%1%2%3%4%5%6%7%8%9%
!%"%#%$%%%&%'%(%)%*%
g!h!f!i!j!U"X"V"Y"W"
|!}!{!z!r!s!
Q!R!g(h(i(j(k(l(m(n(o(p(q(r(s(t(u(
g)h)i)j)k)l)m)n)o)p)q)r)s)t)u)
M)N)O)P)Q)R)S)T)U)V)W)X)Y)Z)[)\)])^)_)`)a)b)c)d)e)f)
M(N(O(P(Q(R(S(T(U(V(W(X(Y(Z([(\(](^(_(`(a(b(c(d(e(f(!&,&"&-&
#&H&G&.&$&B&A&/&&&F&E&1&%&D&C&0&'&<&I&J&7&K&L&2&)&>&M&N&9&O&P&4&(&Q&R&8&=&S&T&3&*&U&V&:&?&W&X&5&+&Y&Z&;&[&\&@&]&^&_&`&a&b&c&d&6&
C"G"H"K"J"I"L"
]!\!D"E"Z!Y!
?"M"["\"
]"Z"!!"!#!(!
4!5!6!7!8!9!:!;!<!=!
!*"*#*$*%*&*'*(*)***+*,*-*.*/*0*1*2*3*4*5*6*7*8*9*:*;*<*=*>*?*@*A*B*C*D*E*F*G*H*I*J*K*L*M*N*O*P*Q*R*S*T*U*V*W*X*Y*Z*[*\*]*^*_*`*a*b*c*d*e*f*g*h*i*j*k*l*m*n*o*p*q*r*s*
!+"+#+$+%+&+'+(+)+*+++,+-+.+/+0+1+2+3+4+5+6+7+8+9+:+;+<+=+>+?+@+A+B+C+D+E+F+G+H+I+J+K+L+M+N+O+P+Q+R+S+T+U+V+W+X+Y+Z+[+\+]+^+_+`+a+b+c+d+e+f+g+h+i+j+k+l+m+n+o+p+q+r+s+t+u+v+!$"$#$$$%$&$'$($)$*$+$,$-$.$/$0$1$2$3$4$5$6$7$8$9$:$;$<$=$>$?$@$A$B$C$D$E$F$G$H$I$J$K$L$M$N$O$P$Q$R$S$T$U$V$W$X$Y$Z$[$\$]$^$_$`$a$b$c$d$e$f$g$h$i$j$k$l$m$n$o$p$q$r$s$t$u$v$w$x$y$z${$|$}$~$1)2)3)4)5)6)7)8)9):);)<)=)>)?)@)A)B)C)D)E)F)G)H)I)J)K)L)_"
1(2(3(4(5(6(7(8(9(:(;(<(=(>(?(@(A(B(C(D(E(F(G(H(I(J(K(L(
^"I'J'K'L'M'
:';'\']'^'6'7'8'T'U'V'W'X'!'"'#'%'+','-'.'/'0'1'2'3'4'''(')'*'='>'e'f'g'h'a'b'c'?'@'A'B'C'D'E'F'G'H'N'O'P'Q'R'S'Z'['c"l'&'`'o'a"<'m'5'
d'n'i'ilKo
2X[m2_>_;y
=zHLMoUU
(mB^bv\mu\9`
jgkPQ\i[L}
Hj8n,q%qNi
yejlV]Bm
RgCWpv^h
*j|zvu<pT};`CN
:P:wsXMw
.RonWUdj"xkM?W1{
2\lP}Npn
$plagOKs)m>J
{^;P7Uqn
.cmgA}bZ
d]opqvpz
Qi)s`PRi
Ug?u"O/M#O
0M~q#P/a#x
&J;wjrH^Si
RT#Y(}YWNw>z
gjC_RQbN
7V3MUxXe
%P4q1|xL
,wDkam+`G]
5ws|sp/N5qRoHhqk
TK>`xcij2|
*zCf2a+J
Vn2jvPYlKZ(O
ugohyc;Rss{c
bmvnOjnp|c
9cEk)t6MyR
oM'qeN]K
yP+lS^iw
^anK<cVx
3|jjkjzP
]dn_,K<i
tssxAp/^0x
<u$rNXOX
a|0mQ};v
)ev`3v~a
PJ+zkkxgeY
hU.[6a7x
ivsh,Opp
@NTcOQuq
sMOuseBp
%b9MrjGK
ZhCZDZET
%Yg{K]TP
EpAcL|M|
{g7|d|E{gc9X
cJv_GpFp
1ZGXb\Nstu
]W:z'n=u
Z[;YsJSvxfuj
3WCc}sZ^
zKyy}L~S
xQxjyj3Z
6|-rao.sF\kY
#fq{0K.r
6jzyLfXv
RYKSwX)Zxu
=v;a?MTtMf
nO>v2`~|+Q
h{htte<tUt6_
`^}ZFd>h
cM;X[ewx
-Lzv2VXR
Uy:gUkwUgo>a
`X:|/}Np
ibJ\4l@z
{WVPu]qw
ERQ{@g%k
#o&k#Kic
0h0tjsnZ
tT![\[][
TpdKT{fujc
XP"|>T3bg^
j[LNhuUw
3eu{ai`}<|
i^\N5rdPQ]
{pazZpgLtZ
=l\bk^\p
vz*vwzfX
ESl|[RkT
R]tw\g%d
IM7yhqrYu[5JFY
$|JMTW#^
~}%|1zY_
tY&hNMia
gQGYWd]j
8^'||w1w;N!t
uYEyS]qV|lp|
8]EO__>r!v
tK0T2s7{
3sXdyOZO
etBXP\nL
`UJvJ}VXOt
*\cr4i\R
Zu\wjaAN1T
&`AV\acpdqq\'V
-y-idX3zEb=|
7kxo\uLmU[Oq
7`lWlq/eaUmWQQ
vbJS|oDQ1o
XyYy`JJZ
Nxpym`3c3t
UW6ThyAW
)j:d"sRM
fqAm<hQn
Bza{mz"pqL
hgWhxZKT
x^ix^cuN
ZNk{&[^[eX
S}mk\V$e
OO!0"0A
$0%0&0'0E
(0)0*0+0,0-0.0/0J
0010203040K
90:0;0X
M0N0O0P0
Q0R0S0T0
;1<1=1>1
Z1[1\1E
]2^2_2H
.3/30313
4353637383E
:3;3<3G
A3B3C3T
C4D4E4g
]4^4_4`4a4
e4f4g4h4i4
+5,5-5T
w5x5y5z5H
#6$6%6Z
&6'6(6e
-6.6/6r
y6z6{6|6
}6~6!7"7
'7(7)7J
98:8;8<8=8
K8L8M8N8
]8^8_8H
d8e8f8U
k8l8m8p
+9,9-9K
/9091929N
T9U9V9G
Y9Z9[9\9]9K
^9_9`9a9b9M
n9o9p9k
Q:R:S:T:
;;<;=;l
k;l;m;n;
-<.</<0<1<
8<9<:<A
B<C<D<S
K<L<M<l
W=X=Y=D
r>s>t>u>c
v>w>x>y>z>{>|>h
0?1?2?3?4?5?
6?7?8?9?
o?p?q?M
@@A@B@C@D@E@F@G@
U@V@W@X@
c@d@e@f@
m@n@o@F
-B.B/BL
6B7B8Be
BBCBDBS
vBwBxBC
~B!C"C#CO
*C+C,Cg
9C:C;CR
$D%D&Ds
9D:D;DH
VDWDXDi
?E@EAEv
DFEFFFN
LFMFNFY
VFWFXFq
aFbFcFf
^G_G`GY
hHiHjHkHv
PKVKgKOMhM-N{O"P8PPP]PTQUQXQ[Q\Q]Q^Q_Q`QbQcQdQeQfQhQiQjQkQmQoQpQrQvQzQ|Q}Q~Q"R#R'R(R)R*R+R-R2R>RBRCRDRFRGRHRIRJRKRMRNRORPRQRRRSRTRURVRWRYRZR^R_RaRbRdReRfRgRhRiRjRkRpRqRrRsRtRuRwRxRfT|T%U+U.U8VMVKWdWE[d[%\%]U]t]|^~^3_a_h_q`-amauc!d)d.e1e2e9e;e<eDeNePeReVeze{e|e~e!f$f'f-f/f0f1f3f7f8f<fDfFfGfJfRfVfYf\f_fafdfefffhfjfkflfofqfrfufvfwfyf!g&g)g*g,g-g0g?gAgFgGgKgMgOgPgSg_gdgfgwgghhhphqhwhyh{h~h'i,iLiwiAjejtjwj|j~j$k'k)k*k:k;k=kAkBkFkGkLkOkPkQkRkXk&l'l*l/l0l1l2l5l8l:l@lAlElFlIlJlUl]l^laldlglhlwlxlzl!m"m#mnm[n=rzr1s'tnttvvv8wHwSw[xpx!z"zfz)|!#"###$#%#&#'#(#)#*#+#,#-#.#/#0#1#2#3#4#5#6#7#8#9#:#;#<#=#>#?#@#A#B#C#D#E#F#G#H#I#J#K#L#M#N#O#P#Q#R#S#T#U#V#W#X#Y#Z#[#,!]#^#_#`#a#b#c#d#e#f#g#h#i#j#k#l#m#n#o#p#q#r#s#t#u#v#w#x#y#z#{#|#}#&"
K!L!~!~#
124789ABCEFGHIJKLMN
12345679:;<=>?@A
BDEFGHJKLMN
cp950ext
3+"."5"4"@&B&A&	&
YQ[Q^Q]QaQcQ
%<%4%,%$%
n%p%o%P%^%j%a%
%q%r%s%
`!a!b!c!d!e!f!g!h!i!!0"0#0$0%0&0'0(0)0ASDSES!
1 1!1"1#1$1%1&1'1(1)1
N?QeQkQ
QENHN_N^N
Y'YsYP[Q[S[
\"\8\q\
N-N0N9NKN9\
NCQAQgQmQnQlQ
S9SHSGSES^S
X)Y+Y*Y-YT[
\$\:\o\
b6bKbNb/e
g(g kbkyk
l4lkp*r6r;rGrYr[r
N;NMNONNN
NJSISaS`SoSnS
.Y1YtYvYU[
bSbTbRbQb
e.g,g*g+g-gck
l8lAl@l>l
u(u)u0u1u2u3u
NRNSNiN
OIQGQFQHQhQqQ
S!S SpSqS	T
V3W0W(W-W,W/W)W
bcb[bXb6e
f	g=g4g1g5g!kdk{k
l]lWlYl_l`lPlUlal[lMlNlpp_r]r~v
NMOOOGOWO^O4O[OUO0OPOQO=O:O8OCOTO<OFOcO\O`O/ONO6OYO]OHOZOLQKQMQuQ
Q%R$R)R*R(R
R#SsSuS
T>T&TNT'TFTCT3THTBT
T)TJT9T;T8T.T5T6T T<T@T1T+T
VJWQW@WMW
GWNW>WPWOW;W
Y][\[Z[[[
[,\@\A\?\>\
_d_b_w_y_
b|b~bybsb
b9e;e8e
f_gNgOgPgQg\gVg^gIgFg`gSgWgek
lrl~ltl
lvp|p}pxpbrar`r
s,u+u7u8u
OzOTQRQUQiQwQvQxQ
Q;R8R7R:R0R.R6RAR
RRSTSSSQSfSwSxSyS
WwWjWiWaWfWdW|W
YIYGYHYDYTY
Y_[d[c[
^&_'_)_
`!`'`)`+`
b?b>b@b
g|gjgrg#kfkgk
p,r-r8rHrgrir
w>y@yAy
QNRCRJRMRLRKRGR
WUYQYOYNYPY
\N\O\M\K\
`(`M`p`h`b`F`C`l`k`j`d`Ab
e%f-f f'f/f
f(f1f$f
m2m*mAm%m
;m=m>m6m
l9m'm8m)m.m5m
p0rrrortr
u-uOuLuNuKu
xFyIyHyGy
O+P	P|Q
QVR\RTR[R]R*S
YWYXYZY
Y Z#Z)Z%Z
Z	Zk[X\
\Q\U\P\
c`e`P`U`m`i`o`
bNc>c/cUcBcFcOcIc:cPc=c*c+c(cMcLcHeIe
eBfIfOfCfRfLfEfAf
g!h8hHhFhSh9hBhTh)h
hLhQh=h
gPh@h<hCh*hEh
k#l'l(l&l$l
mfmxmwmYm
mnmZmtmim
sTu]u\uZuYu
w0x'x8x
x2xUyPy`y_yVy^y]yWyZy
~NzP}P\PGPCPLPZPIPePvPNPUPuPtPwPOP
PoPmP\Q
S?S@S>S
fFUjUfUDU^UaUCUJU1UVUOUUU/UdU8U.U\U,UcU3UAUWU
W YbY6ZAZIZfZjZ@Z<ZbZZZFZJZp[
\`\\\]\
]8^6^3^7^
^5_7_W_l_i_k_
c{cichczc]eVeQeYeWe_UOeXeUeTe
e]fZfdfhfff^f
u"ueufubupu
v7w>w<w6w8w:wkxCxNxeyhymy
|F}C}q}.}9}<}@}0}3}D}/}B}2}1}=
QrRtRuRiR
W/X*X4X$X0X1X!X
\1\L]P]4]G]
]E^=^@^C^~^
c^efebece
enfpftfvfof
fzf~fwf
h>k:k=k
k.l/l,l/n8nTn!n2ngnJn n%n#n
n[nXn$nVnnn-n&non4nMn:n,nCn
nNncnDnrnin_n
q&q0q!q6qnq
r6s%s4s)s:t*t3t"t%t5t6t4t/t
t&t(t%u&ukuju
w]xlxox
zI{V{F{P{R{T{M{K{O{Q{
|^}P}h}U}+}n}r}a}f}b}p}s}
W^XQXXXWXZXTXkXLXmXJXbXRXKXgY
Zi]o]L^y^
aNaLaDaMa>a4a'a
a7a!b"b
d*d-d=d,d
Ziwi`iTiui0i
iJihiki^iSiyi
i]ici[iGkrk
nNqYqiqdqIqgq\qlqfqLqeq^qFqhqVq:rRr7sEs?s>sotZtUt_t^tAt?tYt[t\tvuxu
v[wkwfw^wcwywjwlw\wewhwbw
{`{n{g{
X%Y"Y$YjYiY
][^c^U^W^T^
_Ga?aKawabaca_aZaXaua*b
dxd_dzdQdgd4dmd{dre
iIkLk3l3o
n)o>o o,o
o1o8o2o#o
rDsPsdtctjtptmt
S.V;V9V2V?V4V)VSVNVWVtV6V/V0V
]b^_^a^
_vagana]aUa
|apaka~a
a.bidodyd
duewexe
oQofoTo
omo[oxono
ozopodo
noo`o_o
rNsWsit
v$v&v!v"v
x?z<z@z=z7z;z
RYVkVyViVdVxVjVhVeVqVoVlVbVvV
f=j8j:jYjkjXj9jDjbjajKjGj5j_jHjYkwk
u4v8v:v
yMzNzFzLzKz
X0[*[$[z[7\h\
q5rFrpsrs
tFvBvLv
|.~>~F~7~2~C~+~=~1~E~A~4~9~H~5~?~/~D
yazbz`z
z+|'|*|
|T~U~^~Z~a~R~Y~H
ykziz>|?|8|=|7|@|k~m~y~i~j~
X@[C[}[
j>p0p2p
tbvev&y*y,y+y
zL|C|M|
kakQpXp
b#e+e*e
zd|c|e|
X,e^pqvrv
kcpl|n|;
0A0B0C0D0E0F0G0H0I0J0K0L0M0N0O0P0Q0R0S0T0U0V0W0X0Y0Z0[0\0]0^0_0`0a0b0c0d0e0f0g0h0i0j0k0l0m0n0o0p0q0r0s0t0u0v0w0x0y0z0{0|0}0~0
`$a$b$c$d$e$f$g$h$i$t$u$v$w$x$y$z${$|$}$BN\N
l?r1N<N
SLS"W#W
\;\t\s\
6lCl?l;l
V.W*W4W<Y
Y{Y~YwY
\%\|\z\{\~\
_\b^bdbabfbbbYb`bZbeb
e>g9g8g;g:g?g<g3g
lFlRl\lOlJlTlKlLlqp^r
VO;ObOIOSOdO>OgORO_OAOXO-O3O?OaO
R	ScSrS
S0T7T*TTTET
=TOTAT(T$TGT
VAWEWLWIWKWRW
bqb{bzbpb
bwb}brbtb7e
eEgGgYgUgLgHg]gMgZgKg
lxlglkl
lqlolil
lflslel{l
ltpzpcr
Q5R2R3RFR1R
TkTzT~TeTlTtTfT
ToTaT`T
TcTgTdT
VoWrWmWkWqWpWvW
WuW{WsWtWbWhW}W
^(_"_#_$_T_
t?u@u>u
]!^"^#^ ^$^
_7`9`T`r`^`E`S`G`I`[`L`@`B`_`$`D`X`f`n`BbCb
e6f!f2f5f
f&f"f3f+f:f
f4f9f.f
k l!l(m4m-m
pArIrJrlrprsrnr
t.uGuHu
xJyLyKyEyDy
{z|x|y|
O3P7P,P
P P'P5P/P1P
QaRZRRR^R_RURbR
^3_0_g_]`Z`g`
cVc,cDcEc6cCc
c9cKcJc<c)cAc4cXcTcYc-cGc3cZcQc8cWc@cHcJeFe
eJf_fGfQf
hIh2h3h;hKhOh
h5h+h-h/hNhDh4h
h&h(h.hMh:h%h h,k/k-k1k4kmk
k%lzmcmdmvm
mXmbmmmom
m^mgm`m
mpm|m_m
m{m}mum
t!u[u_u
w"w'w#x,x"x5x/x(x.x+x!x)x3x*x1xTy[yOy\ySyRyQy
NpPjPaP^P`PSPKP]PrPHPMPAP[PJPbP
PEP_PiPkPcPdPFP@PnPsPWPQP
QkRmRlRnR
SuUvU<UMUPU4U*UQUbU6U5U0URUEU
U2UeUNU9UHU-U;U@UKU
X\Y`ZXZUZgZ^Z8Z5ZmZPZ_ZeZlZSZdZWZCZ]ZRZDZ[ZHZ
Z>ZMZ9ZLZpZiZGZQZVZBZ\Zr[n[
].]>^4^
eefaf[fYf\fbf
h|hkhrh
h}h6k3k7k8k
q~r{r|r
v9w/w-w1w2w4w3w=w%w;w5wHxRxIxMxJxLx&xExPxdygyiyjycykyay
z5{G{4{%{0{"{${3{
{1{+{-{/{2{8{
|5}=}8}6}:}E},})}A}G}>}?}J};}(}c
X'X#X(X
X3X?X6X.X9X8X-X,X;XaY
\0\7]C]k]A]K]?]5]Q]N]U]3]:]R]=]1]Y]B]9]I]8]<]2]6]@]E]D^A^X_
c2egejede\eheee
fqfyfjfrf
h9k;k?k<k
n<n=nEnbn+n?nAn]nsn
n3nKn@nQn;n
n.n^nhn\nan1n(n`nqnkn9n"n0nSnen'nxndnwnUnynRnfn5n6nZn q
p.q1q#q%q"q2q
s0s"s1s3s's2s-s&s#s5s
s.t,t0t+t
t!t-t1t$t#t
t)t t2t
t/uoulu
vFwGwDwMwEwJwNwKwLw
w`xdxex\xmxqxjxnxpxixhx^xbxtysyrypy
zJ{;{D{H{L{N{@{X{E{
|X}o}c}S}V}g}j}O}m}\}k}R}T}i}Q}_}N}>
QzRxR{R|R
WSXhXdXOXMXIXoXUXNX]XYXeX[X=XcXqX
\3\q]c]J]e]r]l]^]h]g]b]
]O^N^J^M^K^
`IaJa+aEa6a2a.aFa/aOa)a@a bh
d	d d$d
d9d7d"d#d
d&d0d(dAd5d/d
d@d%d'd
fxf gfi_i8iNibiqi?iEiji9iBiWiYiziHiIi5ili3i=iei
hxi4iii@ioiDiviXiAitiLi;iKi7i\iOiQi2iRi/i{i<iFkEkCkBkHkAk
nGqTqRqcq`qAq]qbqrqxqjqaqBqXqCqKqpq_qPqSq
DqMqZqOr
r<sBs;s:s@sJsIsDtJtKtRtQtWt@tOtPtNtBtFtMtTt
vUw_w`wRwVwZwiwgwTwYwmw
zf{d{m{t{i{r{e{s{q{p{a{x{v{c{
]X^Y^S^
^D_C_o_
_,a(aAa^aqasaRaSarala
ataTaza[aea;ajaaaVa)b'b+b+dMd[d]dtdvdrdsd}dudfd
d^d\dKdSd`dPd
d?dldkdYdedwdse
iJkMkKk
n.o	oNo
n-o@o0o<o5o
rCsMsQsLsbtstqtutrtgtnt
y+zJz0z/z(z&z
RHVBVLV5VAVJVIVFVXVZV@V3V=V,V>V8V*V:V
]i^]^`^\^
a-bndpd
dvezeye{e
lAo&o~o
oUoroRoPoWo
oaoko}ogo
ocowojo{o
rXsRs^s_s`s]s[sasZsYs
SpV`VnVsVfVcVmVrV^VwV
]g^h^f^o^
f#g4jfjIjgj2jhj>j]jmjvj[jQj(jZj;j?jAjjjdjPjOjTjojij`j<j^jVjUjMjNjFjUkTkVk
risfsgslsesksjs
u/v-v1v=v3v<v5v2v0v
yDzHzGz
&Q%Q"Q$Q Q)Q
X-[%[2[#[,['[&[/[.[{[
qssnsos
uCvHvIvGv
y\z[zVzXzTzZz
|-~<~B~3~H
8~*~I~@~G~)~L~0~;~6~D~:~E
VpY<[i\j\
u\vdvYvPvSvWvZv
|&|(|"|%|0|\~P~V~c~X~b~_~Q~`~W~S~
Y=[>[?[
p+p!p"p#p)p
ygzhz3|<|9|,|;|
|v~u~x~p~w~o~z~r~t~h~K
j<p5p/p7p4p1pBp8p?p:p9p@p;p3pAp
w%y#y'y(y$y)y
ynzlzmz
zI|H|J|G|E|
kCpDpJpHpIpEpFp
w-y1y/yT|S|
VqYK[L[
^!e e&e"e
lUpVpWpRp
ypzqzW|\|Y|[|Z|
k[pZp"r
VN[m\-e
k_pap]p`p#r
w9yi|k|
ZT%f%W%`%l%c%Z%i%]%R%d%U%^%j%a%X%g%[%S%e%V%_%k%b%Y%h%\%Q%P%m%n%p%o%
MultibyteStreamWriter
MultibyteStreamReader
MultibyteIncrementalDecoder
MultibyteIncrementalEncoder
MultibyteCodec
how to treat errors
errors must be a string
internal codec error
encoding error handler must return (unicode, int) tuple
position %zd from error handler out of bounds
incomplete multibyte sequence
unknown runtime error
illegal multibyte sequence
decoding error handler must return (unicode, int) tuple
couldn't convert the object to unicode.
O|z:encode
s*|z:decode
pending buffer overflow
O|i:encode
codec is unexpected type
|s:IncrementalEncoder
s*|i:decode
|s:IncrementalDecoder
stream function returned a non-string object
arg 1 must be an integer
O|s:StreamReader
arg must be a sequence object
O|s:StreamWriter
argument type invalid
can't initialize the _multibytecodec module
Exception raised when I/O would block on a non-blocking I/O stream
BlockingIOError
characters_written
OO|n:BlockingIOError
unknown mode: '%s'
can't have unbuffered text I/O
binary mode doesn't take a newline argument
binary mode doesn't take an errors argument
binary mode doesn't take an encoding argument
must have exactly one of read/write/append mode
can't use U and writing mode at once
invalid mode: '%s'
can't have text and binary mode at once
invalid file: %s
closefd
newline
O|sizzzi:open
buffering
cannot fit '%.200s' into an offset-sized integer
integer argument expected, got '%.200s'
writable
seekable
readinto
readable
newlines
IncrementalNewlineDecoder
TextIOWrapper
BufferedRandom
BufferedRWPair
BufferedWriter
BufferedReader
BytesIO
_TextIOBase
_BufferedIOBase
_RawIOBase
_IOBase
s(OO){}
UnsupportedOperation
DEFAULT_BUFFER_SIZE
_io.BufferedRandom
_io.BufferedRWPair
_io.BufferedWriter
_io.BufferedReader
_io._BufferedIOBase
read() should return bytes
w*:readinto
reentrant call inside %s
I/O operation on uninitialized object
raw stream has been detached
Raw stream returned invalid position %lld
can't allocate read lock
buffer size must be strictly positive
<%s name=%s>
O|n:BufferedReader
buffer_size
raw readinto() returned invalid length %zd (should have been between 0 and %zd)
max_buffer_size is deprecated
O|nn:BufferedWriter
max_buffer_size
raw write() returned invalid length %zd (should have been between 0 and %zd)
write could not complete without blocking
write to closed file
OO|nn:BufferedRWPair
the BufferedRWPair object is being garbage-collected
O|nn:BufferedRandom
flush of closed file
|n:peek
read length must be positive
n:read1
readline of closed file
|O&:readline
whence must be between 0 and 2, not %d
seek of closed file
O|i:seek
|O:truncate
readline() should have returned a bytes object, not '%.200s'
read of closed file
read length must be positive or -1
|O&:read
_io.BytesIO
True if the file is closed.
new buffer size too large
CI/O operation on closed file.
integer argument expected, got '%s'
|O:read
|O:readline
|O:readlines
negative size value %zd
invalid whence (%i, should be 0, 1 or 2)
negative seek value %zd
%.200s.__setstate__ argument should be 3-tuple, got %.200s
second item of state must be an integer, not %.200s
third item of state should be a dict, got a %.200s
position value cannot be negative
|O:BytesIO
initial_bytes
_io.FileIO
String giving the file mode
True if the file descriptor will be closed
readall
File not open for %s
reading
unbounded read returned more bytes than a Python string can hold 
writing
an integer is required
<_io.FileIO name=%s mode='%s'>
<_io.FileIO fd=%d mode='%s'>
<_io.FileIO [closed]>
Must have exactly one of read/write/append mode and at most one plus
Cannot use closefd=False with file name
invalid mode: %.200s
encoder failed to return bytes
Negative filedescriptor
O|si:fileio
_io._RawIOBase
_io._IOBase
_checkWritable
_checkReadable
_checkSeekable
_checkClosed
__IOBase_closed
File or stream is not seekable.
File or stream is not readable.
File or stream is not writable.
read() should have returned a bytes object, not '%.200s'
peek() should have returned a bytes object, not '%.200s'
|O&:readlines
O:writelines
_io.StringIO
line_buffering
readline() should have returned an str object, not '%.200s'
Negative size value %zd
Can't do nonzero cur-relative seeks
Negative seek position %zd
Invalid whence (%i, should be 0, 1 or 2)
unicode argument expected, got '%s'
initial_value must be unicode or None, not %.200s
illegal newline value: %s
|Oz:__init__
initial_value
%.200s.__setstate__ argument should be 4-tuple, got %.200s
third item of state must be an integer, got %.200s
fourth item of state should be a dict, got a %.200s
_io.TextIOWrapper
_CHUNK_SIZE
utf-32-le
utf-32-be
utf-16-le
utf-16-be
iso8859-1
_io.IncrementalNewlineDecoder
_io._TextIOBase
Oi|O:IncrementalNewlineDecoder
decoder
decoder should return a string result, not '%.200s'
IncrementalNewlineDecoder.__init__ not called
O|i:IncrementalNewlineDecoder
could not determine default encoding
getpreferredencoding
O|zzzi:fileio
underlying buffer has been detached
decoder getstate() should have returned a bytes object, not '%.200s'
underlying read1() should have returned a bytes object, not '%.200s'
not readable
<_io.TextIOWrapper name=%s encoding=%s>
<_io.TextIOWrapper encoding=%s>
a strictly positive integer is required
not writable
U:write
can't restore logical file position
underlying read() should have returned a bytes object, not '%.200s'
negative seek position %s
invalid whence (%d, should be 0, 1 or 2)
can't do nonzero end-relative seeks
can't do nonzero cur-relative seeks
underlying stream is not seekable
can't reconstruct logical file position
telling position disabled by next() call
null argument to internal routine
expected a character buffer object
expected a single-segment buffer object
expected a readable buffer object
expected a writeable buffer object
'%100s' does not have the buffer interface
Object is not writable.
unsupported operand type(s) for %.100s: '%.100s' and '%.100s'
unsupported operand type(s) for pow(): '%.100s', '%.100s', '%.100s'
unsupported operand type(s) for ** or pow(): '%.100s' and '%.100s'
divmod()
bad operand type for unary -: '%.200s'
bad operand type for unary +: '%.200s'
bad operand type for unary ~: '%.200s'
bad operand type for abs(): '%.200s'
null byte in argument for int()
'%.200s' object cannot be interpreted as an index
__index__ returned non-(int,long) (type %.200s)
cannot fit '%.200s' into an index-sized integer
__int__
int() argument must be a string or a number, not '%.200s'
__trunc__ returned non-Integral (type %.200s)
__int__ returned non-int (type %.200s)
null byte in argument for long()
long() argument must be a string or a number, not '%.200s'
__long__ returned non-long (type %.200s)
__float__ returned non-float (type %.200s)
PyNumber_ToBase: index not int or long
object of type '%.200s' has no len()
'%.200s' object can't be concatenated
'%.200s' object can't be repeated
'%.200s' object does not support indexing
'%.200s' object is unsliceable
'%.200s' object does not support item assignment
'%.200s' object doesn't support item deletion
'%.200s' object doesn't support slice assignment
'%.200s' object doesn't support slice deletion
'%.200s' object is not callable
NULL result without error in PyObject_Call
 while calling a Python object
attribute of type '%.200s' is not callable
__bases__
isinstance() arg 2 must be a class, type, or tuple of classes and types
__instancecheck__
 in __instancecheck__
issubclass() arg 2 must be a class or tuple of classes
issubclass() arg 1 must be a class
__subclasscheck__
 in __subclasscheck__
'%.200s' object is not iterable
iter() returned non-iterator of type '%.100s'
'%.200s' object has no attribute '__getitem__'
sequence index must be integer, not '%.200s'
'%.200s' object does not support item deletion
both destination and source must have the buffer interface
destination is too small to receive data from source
format expects arg 2 to be string or unicode, not %.100s
%.100s.__format__ must return string or unicode, not %.100s
Type %.100s doesn't define __format__
object.__format__ with a non-empty format string is deprecated
can't multiply sequence by non-int of type '%.200s'
index exceeds C integer size
count exceeds C integer size
sequence.index(x): x not in sequence
argument of type '%.200s' is not iterable
|O:bool
%s buffer type not available
Py_TPFLAGS_HAVE_GETCHARBUFFER needed
single-segment buffer object expected
offset must be zero or positive
size must be zero or positive
buffer object expected
O|nn:buffer
buffer()
buffer() not supported in 3.x
<%s buffer for %p, size %zd, offset %zd at %p>
<%s buffer ptr %p, size %zd at %p>
read-write
read-only
writable buffers are not hashable
result too large
buffer index out of range
sequence index must be integer
buffer assignment index out of range
right operand must be a single byte
buffer is read-only
right operand length must match slice length
buffer indices must be integers
B.isspace() -> bool
Return True if all characters in B are whitespace
and there is at least one character in B, False otherwise.
B.isalpha() -> bool
Return True if all characters in B are alphabetic
and there is at least one character in B, False otherwise.
B.isalnum() -> bool
Return True if all characters in B are alphanumeric
and there is at least one character in B, False otherwise.
B.isdigit() -> bool
Return True if all characters in B are digits
and there is at least one character in B, False otherwise.
B.islower() -> bool
Return True if all cased characters in B are lowercase and there is
at least one cased character in B, False otherwise.
B.isupper() -> bool
Return True if all cased characters in B are uppercase and there is
at least one cased character in B, False otherwise.
B.istitle() -> bool
Return True if B is a titlecased string and there is at least one
character in B, i.e. uppercase characters may only follow uncased
characters and lowercase characters only cased ones. Return False
otherwise.
B.lower() -> copy of B
Return a copy of B with all ASCII characters converted to lowercase.
B.upper() -> copy of B
Return a copy of B with all ASCII characters converted to uppercase.
B.title() -> copy of B
Return a titlecased version of B, i.e. ASCII words start with uppercase
characters, all remaining cased characters have lowercase.
B.capitalize() -> copy of B
Return a copy of B with only its first character capitalized (ASCII)
and the rest lower-cased.
B.swapcase() -> copy of B
Return a copy of B with uppercase ASCII characters converted
to lowercase ASCII and vice versa.
bytearray_iterator
bytearray
startswith
splitlines
rpartition
partition
isupper
istitle
isspace
islower
isdigit
isalpha
isalnum
fromhex
endswith
__alloc__
byte must be in range(0, 256)
an integer or string of size 1 is required
string must be of size 1
accessing non-existent bytes segment
Type %.100s doesn't support the buffer API
Existing exports of data: object cannot be re-sized
Negative size passed to PyByteArray_FromStringAndSize
can't concat %.100s to %.100s
bytearray index out of range
bytearray indices must be integers
can't set bytearray slice from %.100s
bytearray indices must be integer
can assign only bytes, buffers, or iterables of ints in range(0, 256)
attempt to assign bytes of size %zd to extended slice of size %zd
encoding or errors without a string argument
negative count
unicode argument without an encoding
encoding or errors without sequence argument
|Oss:bytearray
bytearray object is too large to make repr
bytearray(b
Comparison between bytearray and string
deallocated bytearray object has exported buffers
result is too long
|i:expandtabs
n|c:ljust
n|c:rjust
n|c:center
n:zfill
find/rfind/index/rindex
subsection not found
replace string is too long
replace bytes is too long
OO|n:replace
|On:split
|On:rsplit
cannot add more objects to bytearray
pop from empty bytearray
value not found in bytearray
|O:strip
|O:lstrip
|O:rstrip
|ss:decode
can only join an iterable of bytes (item %ld has type '%.100s')
can only join an iterable
|i:splitlines
non-hexadecimal number found in fromhex() arg at position %zd
s#:fromhex
(O(Ns)N)
latin-1
..\..\Objects\bytearrayobject.c
PyCapsule
PyCapsule_New called with null pointer
PyCapsule_GetPointer called with incorrect name
PyCapsule_GetPointer called with invalid PyCapsule object
PyCapsule_GetName called with invalid PyCapsule object
PyCapsule_GetDestructor called with invalid PyCapsule object
PyCapsule_GetContext called with invalid PyCapsule object
PyCapsule_SetPointer called with invalid PyCapsule object
PyCapsule_SetPointer called with null pointer
PyCapsule_SetName called with invalid PyCapsule object
PyCapsule_SetDestructor called with invalid PyCapsule object
PyCapsule_SetContext called with invalid PyCapsule object
PyCapsule_Import "%s" is not valid
PyCapsule_Import could not import module "%s"
<capsule object %s%s%s at %p>
cell_contents
..\..\Objects\cellobject.c
cell comparisons not supported in 3.x
<cell at %p: %.80s object at %p>
<cell at %p: empty>
Cell is empty
instancemethod
__self__
the instance to which a method is bound; None for unbound methods
im_self
__func__
the function (or other callable) implementing a method
im_func
the class associated with a method
im_class
instance
classobj
..\..\Objects\classobject.c
class %.50s has no attribute '%.400s'
class.__dict__ not accessible in restricted mode
__dict__ must be a dictionary object
__name__ must be a string object
__name__ must not contain null bytes
<class ?.%s at %p>
<class %s.%s at %p>
instance() second arg must be dictionary or None
O!|O:instance
%.50s instance has no attribute '%.400s'
__class__ must be set to a class
__class__ not accessible in restricted mode
__dict__ must be set to a dictionary
__dict__ not accessible in restricted mode
coercion should return None or 2-tuple
 after coercion
__coerce__
__ror__
__rand__
__rxor__
__rlshift__
__rrshift__
__radd__
__rsub__
__rmul__
__rdiv__
__rmod__
__divmod__
__rdivmod__
__rfloordiv__
__rtruediv__
comparison did not return an int
__cmp__
__rpow__
 in __call__
%.200s instance has no __call__ method
__call__
unbound methods must have non-NULL im_class
<bound method %s.%s of %s>
<unbound method %s.%s>
unbound method %s%s must be called with %s instance as first argument (got %s%s instead)
 instance
PyClass_New: name must be a string
PyClass_New: dict must be a dictionary
PyClass_New: base must be a class
__delattr__
__setattr__
__getattr__
PyClass_New: bases must be a tuple
__bases__ must be a tuple object
__bases__ items must be classes
a __bases__ item causes an inheritance cycle
classes are read-only in restricted mode
__init__() should return None
this constructor takes no arguments
__init__
instance.__dict__ not accessible in restricted mode
<?.%s instance at %p>
<%s.%s instance at %p>
__repr__
__str__
__hash__() should return an int
unhashable instance
__hash__
__len__() should return an int
__len__() should return >= 0
__len__
in 3.x, __getslice__ has been removed; use __getitem__
in 3.x, __setslice__ has been removed; use __setitem__
in 3.x, __delslice__ has been removed; use __delitem__
__nonzero__ should return >= 0
__nonzero__ should return an int
__nonzero__
object cannot be interpreted as an index
__long__
__float__
__oct__
__hex__
iteration over non-sequence
__iter__ returned non-iterator of type '%.100s'
__iter__
instance has no next() method
PyCObject
CObject type is not supported in 3.x. Please use capsule objects instead.
PyCObject_FromVoidPtrAndDesc called with null description
PyCObject_AsVoidPtr called with null pointer
PyCObject_AsVoidPtr with non-C-object
PyCObject_GetDesc called with null pointer
PyCObject_GetDesc with non-C-object
Invalid call to PyCObject_SetVoidPtr
co_lnotab
co_firstlineno
co_name
co_filename
co_cellvars
co_freevars
co_varnames
co_names
co_consts
co_code
co_flags
co_stacksize
co_nlocals
co_argcount
0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz
non-string found in code slot
..\..\Objects\codeobject.c
name tuples must contain only strings, not '%.500s'
code: nlocals must not be negative
code: argcount must not be negative
iiiiSO!O!O!SSiS|O!O!:code
<code object %.100s at %p, file "%.300s", line %d>
code inequality comparisons not supported in 3.x
complex
the imaginary part of a complex number
the real part of a complex number
__getnewargs__
conjugate
__complex__
__complex__ should return a complex object
%s%s%sj%s
complex division by zero
classic complex division
complex remainder
complex divmod(), // and % are deprecated
complex divmod()
complex exponentiation
0.0 to a negative or complex power
complex modulo
absolute value too large
no ordering relation is defined for complex numbers
can't convert complex to int
can't convert complex to long
can't convert complex to float
__format__ requires str or unicode
complex() arg is a malformed string
complex() arg is not a string
complex() can't take second arg if first is a string
complex() argument must be a string or a number
float(r) didn't return a float
complex() second arg can't be a string
|OO:complex
property
deleter
method-wrapper
dictproxy
D.copy() -> a shallow copy of D
D.iteritems() -> an iterator over the (key, value) items of D
D.itervalues() -> an iterator over the values of D
itervalues
D.iterkeys() -> an iterator over the keys of D
iterkeys
D.items() -> list of D's (key, value) pairs, as 2-tuples
D.values() -> list of D's values
D.keys() -> list of D's keys
D.get(k[,d]) -> D[k] if D.has_key(k), else d.  d defaults to None.
D.has_key(k) -> True if D has a key k, else False
has_key
wrapper_descriptor
getset_descriptor
member_descriptor
classmethod_descriptor
method_descriptor
__objclass__
<method '%s' of '%s' objects>
<member '%s' of '%s' objects>
<attribute '%s' of '%s' objects>
<slot wrapper '%s' of '%s' objects>
descriptor '%s' for '%s' objects doesn't apply to '%s' object
descriptor '%s' for type '%s' doesn't apply to type '%s'
descriptor '%s' for type '%s' needs either an object or a type
descriptor '%s' for type '%s' needs a type, not a '%s' as arg 2
attribute '%.300s' of '%.100s' objects is not readable
descriptor '%.200s' for '%.100s' objects doesn't apply to '%.100s' object
attribute '%.300s' of '%.100s' objects is not writable
descriptor '%.200s' requires a '%.100s' object but received a '%.100s'
descriptor '%.300s' of '%.100s' object needs an argument
descriptor '%s' requires a subtype of '%.100s' but received '%.100s
descriptor '%s' requires a type but received a '%.100s'
descriptor '%s' of '%.100s' object needs an argument
dict_proxy(%s)
<method-wrapper '%s' of %s object at %p>
wrapper %s doesn't take keyword arguments
unreadable attribute
can't set attribute
can't delete attribute
|OOOO:property
dict_values
dict_items
dict_keys
dictionary-itemiterator
dictionary-valueiterator
dictionary-keyiterator
fromkeys
viewvalues
viewitems
viewkeys
popitem
setdefault
..\..\Objects\dictobject.c
cannot convert dictionary update sequence element #%zd to a sequence
dictionary update sequence element #%zd has length %zd; 2 is required
dict inequality comparisons not supported in 3.x
dict.has_key() not supported in 3.x; use the in operator
popitem(): dictionary is empty
%s() requires a dict argument, not '%s'
difference_update
intersection_update
symmetric_difference_update
<dummy key>
reversed
enumerate
O|O:enumerate
argument to reversed() must be a sequence
reversed()
Base class for warnings about bytes and buffer related problems, mostly
related to conversion from str or comparing to str.
exceptions.BytesWarning
Base class for warnings about Unicode related problems, mostly
related to conversion problems.
exceptions.UnicodeWarning
Base class for warnings about probable mistakes in module imports
exceptions.ImportWarning
Base class for warnings about constructs that will change semantically
in the future.
exceptions.FutureWarning
Base class for warnings about dubious runtime behavior.
exceptions.RuntimeWarning
Base class for warnings about dubious syntax.
exceptions.SyntaxWarning
Base class for warnings about features which will be deprecated
in the future.
exceptions.PendingDeprecationWarning
Base class for warnings about deprecated features.
exceptions.DeprecationWarning
Base class for warnings generated by user code.
exceptions.UserWarning
Base class for warning categories.
exceptions.Warning
Buffer error.
exceptions.BufferError
Out of memory.
exceptions.MemoryError
Weak ref proxy used after referent went away.
exceptions.ReferenceError
Internal error in the Python interpreter.
Please report this to the Python maintainer, along with the traceback,
the Python version, and the hardware/OS platform and version.
exceptions.SystemError
Second argument to a division or modulo operation was zero.
exceptions.ZeroDivisionError
Result too large to be represented.
exceptions.OverflowError
Floating point operation failed.
exceptions.FloatingPointError
Base class for arithmetic errors.
exceptions.ArithmeticError
Assertion failed.
exceptions.AssertionError
Unicode translation error.
exceptions.UnicodeTranslateError
Unicode decoding error.
exceptions.UnicodeDecodeError
Unicode encoding error.
exceptions.UnicodeEncodeError
exception reason
exception end
exception start
exception object
exception encoding
Unicode related error.
exceptions.UnicodeError
Inappropriate argument value (of correct type).
exceptions.ValueError
Mapping key not found.
exceptions.KeyError
Sequence index out of range.
exceptions.IndexError
Base class for lookup errors.
exceptions.LookupError
Improper mixture of spaces and tabs.
exceptions.TabError
Improper indentation.
exceptions.IndentationError
Invalid syntax.
exceptions.SyntaxError
exception print_file_and_line
print_file_and_line
exception text
exception offset
exception lineno
exception msg
Attribute not found.
exceptions.AttributeError
Local name referenced but not bound to a value.
exceptions.UnboundLocalError
Name not found globally.
exceptions.NameError
Method or function hasn't been implemented yet.
exceptions.NotImplementedError
Unspecified run-time error.
exceptions.RuntimeError
Read beyond end of file.
exceptions.EOFError
MS-Windows OS system call failed.
exceptions.WindowsError
Win32 exception code
winerror
POSIX exception code
OS system call failed.
exceptions.OSError
I/O operation failed.
exceptions.IOError
Base class for I/O related errors.
exceptions.EnvironmentError
exception filename
exception strerror
exception errno
Import can't find module, or can't find name in module.
exceptions.ImportError
Program interrupted by user.
exceptions.KeyboardInterrupt
Request to exit from the interpreter.
exceptions.SystemExit
exception code
Request that a generator exit.
exceptions.GeneratorExit
Signal the end from iterator.next().
exceptions.StopIteration
Inappropriate argument type.
exceptions.TypeError
Base class for all standard Python exceptions that do not represent
interpreter exiting.
exceptions.StandardError
Common base class for all non-exit exceptions.
exceptions.Exception
Common base class for all exceptions
exceptions.BaseException
message
__unicode__
__getitem__ not supported for exception classes in 3.x; use args attribute
__getslice__ not supported for exception classes in 3.x; use args attribute
__dict__ must be a dictionary
__dict__ may not be deleted
args may not be deleted
BaseException.message has been deprecated as of Python 2.6
message attribute was deleted
EnvironmentError
[Errno %s] %s
[Errno %s] %s: %s
[Error %s] %s
[Error %s] %s: %s
tuple index out of range
%s (line %ld)
%s (%s)
%s (%s, line %ld)
%.200s attribute must be str
%.200s attribute not set
%.200s attribute must be unicode
O!O!nnO!
'%.400s' codec can't encode characters in position %zd-%zd: %.400s
'%.400s' codec can't encode character u'\%s' in position %zd: %.400s
'%.400s' codec can't decode bytes in position %zd-%zd: %.400s
'%.400s' codec can't decode byte 0x%s in position %zd: %.400s
can't translate characters in position %zd-%zd: %.400s
can't translate character u'\%s' in position %zd: %.400s
init of pre-allocated RuntimeError failed
cannot allocate tuple for RuntimeError pre-allocation
cannot allocate argument for RuntimeError pre-allocation
maximum recursion depth exceeded
Cannot pre-allocate RuntimeError instance for recursion errors
Cannot pre-allocate MemoryError instance
BytesWarning
UnicodeWarning
ImportWarning
FutureWarning
RuntimeWarning
SyntaxWarning
PendingDeprecationWarning
DeprecationWarning
UserWarning
Warning
BufferError
MemoryError
ReferenceError
SystemError
ZeroDivisionError
OverflowError
FloatingPointError
ArithmeticError
AssertionError
UnicodeTranslateError
UnicodeDecodeError
UnicodeEncodeError
UnicodeError
ValueError
KeyError
IndexError
LookupError
TabError
IndentationError
SyntaxError
AttributeError
UnboundLocalError
NameError
NotImplementedError
RuntimeError
EOFError
WindowsError
OSError
IOError
ImportError
KeyboardInterrupt
SystemExit
GeneratorExit
StopIteration
TypeError
StandardError
Exception
Module dictionary insertion problem.
BaseException
exceptions
exceptions bootstrapping error.
end-of-line convention used in this file
Unicode error handler
file encoding
file name
file mode ('r', 'U', 'w', 'a', possibly with 'b' or '+' added)
xreadlines
UNICODE
UTF-16LE
mode string must begin with one of 'r', 'w', 'a' or 'U', not '%.200s'
universal newline mode can only be used with modes starting with 'r'
Invalid mode ('%.50s')
empty mode string
invalid mode ('%.50s') or filename
file() constructor not accessible in restricted mode
PyFileObject locking error in destructor (refcnt <= 0 at close).
close() called during concurrent operation on the same file object.
Mixing iteration and read methods would lose data
<%s file %s, mode '%s' at %p>
<%s file u'%s', mode '%s' at %p>
line is longer than a Python string can hold
EOF when reading a line
object.readline() returned non-string
..\..\Objects\fileobject.c
writelines() argument must be a sequence of strings
writelines() requires an iterable argument
f.xreadlines() not supported in 3.x, try 'for line in f' instead
Unknown newlines value 0x%x
file.softspace not supported in 3.x
can't delete softspace attribute
<uninitialized file>
O|si:file
et|si:file
U|si:file
writeobject with NULL file
null file for PyFile_WriteString
argument must be an int, or have a fileno() method.
fileno() returned a non-integer
file descriptor cannot be a negative integer (%i)
close failed in file object destructor:
requested number of bytes is more than a Python string can hold
|l:read
|l:readlines
__setformat__
__getformat__
Returns True if the float is an integer.
is_integer
as_integer_ratio
Returns the Integral closest to x between 0 and x.
Returns self, the complex conjugate of any float.
sys.float_info
FLT_ROUNDS -- addition rounds
FLT_RADIX -- radix of exponent
DBL_EPSILON -- Difference between 1 and the next representable float
epsilon
DBL_MANT_DIG -- mantissa digits
mant_dig
DBL_DIG -- digits
DBL_MIN_10_EXP -- minimum int e such that 10**e is a normalized
min_10_exp
DBL_MIN_EXP -- minimum int e such that radix**(e-1) is a normalized float
min_exp
DBL_MIN -- Minimum positive normalizer float
DBL_MAX_10_EXP -- maximum int e such that 10**e is representable
max_10_exp
DBL_MAX_EXP -- maximum int e such that radix**(e-1) is representable
max_exp
DBL_MAX -- maximum representable finite float
invalid literal for float(): %.200s
float() argument must be a string or a number
a float is required
nb_float should return float object
float division by zero
classic float division
float modulo
float divmod()
negative number cannot be raised to a fractional power
0.0 cannot be raised to a negative power
pow() 3rd argument not allowed unless all arguments are integers
rounded value too large to represent
%s0%se%d
0x%sp%c%d
-0x%sp%c%d
0@0x0.0p+0
-0x0.0p+0
invalid hexadecimal floating-point string
hexadecimal value too large to represent as a float
hexadecimal string too long to convert
Cannot pass NaN to float.as_integer_ratio.
Cannot pass infinity to float.as_integer_ratio.
|O:float
__getformat__() argument 1 must be 'double' or 'float'
unknown
IEEE, big-endian
IEEE, little-endian
insane float_format or double_format
__getformat__() argument must be string, not %.500s
__setformat__() argument 1 must be 'double' or 'float'
__setformat__() argument 2 must be 'unknown', 'IEEE, little-endian' or 'IEEE, big-endian'
can only set %s format to 'unknown' or the detected platform value
ss:__setformat__
?C#   <float at %p, refcnt=%ld, val=%s>
: %d unfreed float%s
# cleanup floats
float too large to pack with f format
frexp() result out of range
`Afloat too large to pack with d format
>can't unpack IEEE 754 special value on non-IEEE platform
f_exc_value
f_exc_type
f_exc_traceback
f_restricted
f_trace
f_lineno
f_locals
f_lasti
f_globals
f_builtins
f_exc_traceback has been removed in 3.x
f_exc_type has been removed in 3.x
f_exc_value has been removed in 3.x
can't jump to 'except' line as there's no exception
can't jump into the middle of a block
can't jump into or out of a 'finally' block
line %d comes after the current code block
line %d comes before the current code block
f_lineno can only be set by a line trace function
lineno must be an integer
XXX block stack overflow
XXX block stack underflow
staticmethod
classmethod
function
closure
argdefs
globals
func_name
func_dict
__defaults__
func_defaults
__code__
func_code
__globals__
func_globals
func_doc
__closure__
func_closure
..\..\Objects\funcobject.c
non-tuple default args
expected tuple for closure, got '%.100s'
function attributes not accessible in restricted mode
setting function's dictionary to a non-dict
function's dictionary may not be deleted
__code__ must be set to a code object
%s() requires a code object with %zd free vars, not %zd
__name__ must be set to a string object
__defaults__ must be set to a tuple object
arg 5 (closure) expected cell, found %s
%s requires closure of length %zd, not %zd
arg 5 (closure) must be None or tuple
arg 5 (closure) must be tuple
arg 4 (defaults) must be None or tuple
arg 3 (name) must be None or string
O!O!|OOO:function
<function %s at %p>
uninitialized classmethod object
uninitialized staticmethod object
generator
gi_code
gi_running
gi_frame
can't send non-None value to a just-started generator
generator already executing
generator ignored GeneratorExit
instance exception may not have a separate value
throw() third argument must be a traceback object
exceptions must be classes, or instances, not %s
<generator object %.200s at %p>
the denominator of a rational number in lowest terms
denominator
the numerator of a rational number in lowest terms
numerator
Truncating an Integral returns itself.
bit_length
Returns self, the complex conjugate of any int.
__int__ method should return an integer
Python int too large to convert to C int
invalid literal for int() with base %d: %s
int() base must be >= 2 and <= 36
@@integer division or modulo by zero
classic int division
division by zero
pow() 3rd argument cannot be 0
pow() 2nd argument cannot be negative when 3rd argument specified
int() can't convert non-string with explicit base
int() missing string argument
|Oi:int
#   <int at %p, refcnt=%ld, val=%ld>
: %d unfreed int%s
# cleanup ints
negative shift count
callable-iterator
iterator
..\..\Objects\iterobject.c
listreverseiterator
listiterator
cmpwrapper
sortwrapper
..\..\Objects\listobject.c
list index out of range
list assignment index out of range
cannot add more objects to list
 while getting the repr of a list
can only concatenate list (not "%.200s") to list
can only assign an iterable
argument must be iterable
pop from empty list
comparison function must return int, not %.200s
expected a sortwrapperobject
list modified during sort
the cmp argument is not supported in 3.x
|OOi:sort
%r is not in list
O|O&O&:index
list.remove(x): x not in list
|O:list
list indices must be integers, not %.200s
attempt to assign sequence of size %zd to extended slice of size %zd
must assign iterable to extended slice
sys.long_info
size in bytes of the C type used to represent a digit
sizeof_digit
size of a digit in bits
bits_per_digit
Returns size in memory, in bytes
Returns self, the complex conjugate of any long.
too many digits in integer
cannot convert float NaN to integer
cannot convert float infinity to integer
nb_int should return int object
..\..\Objects\longobject.c
Python int too large to convert to C long
long int too large to convert to int
can't convert negative value to unsigned long
long int too large to convert
long has too many bits to express in a platform size_t
byte array too long to convert to int
long too big to convert
can't convert negative long to unsigned
integer conversion failed
long is too large to format
long string too large to convert
invalid literal for long() with base %d: %s
Along() arg 2 must be >= 2 and <= 36
huge integer: number of bits overflows a Py_ssize_t
<long int too large to convert to float
integer division result too large for a float
intermediate overflow during division
long() can't convert non-string with explicit base
long() missing string argument
|Oi:long
long division or modulo by zero
classic long division
memoryview
tobytes
readonly
suboffsets
strides
exported buffer does not have any shape information associated to it
cannot make memory view because object does not have the buffer interface
O:memoryview
object does not have the buffer interface
writable contiguous buffer requested for a non-contiguousobject.
tolist() only supports byte views
tolist() only supports one-dimensional objects
<memory at %p>
index out of bounds
invalid indexing of 0-dim memory
cannot index memory using "%.200s"
cannot modify size of memoryview object
mismatching item sizes for "%.200s" and "%.200s"
cannot delete memory
cannot modify read-only memory
builtin_function_or_method
..\..\Objects\methodobject.c
%.200s() takes no keyword arguments
%.200s() takes exactly one argument (%zd given)
%.200s() takes no arguments (%zd given)
method.__self__ not accessible in restricted mode
<built-in method %s of %s object at %p>
<built-in function %s>
builtin_function_or_method order comparisons not supported in 3.x
__methods__ not supported in 3.x
__methods__
__package__
..\..\Objects\moduleobject.c
nameless module
module filename missing
__file__
#   clear[2] %s
#   clear[1] %s
S|O:module.__init__
<module '%s' from '%s'>
<module '%s' (built-in)>
NotImplementedType
NoneType
__repr__ returned non-string (type %.200s)
<%s object at %p>
__str__ returned non-string (type %.200s)
 while getting the str of an object
tp_compare didn't return -1, 0 or 1
tp_compare didn't return -1 or -2 for exception
unhashable type: '%.200s'
'%.50s' object has no attribute '%.400s'
attribute name must be string, not '%.200s'
assign to
'%.100s' object has only read-only attributes (%s .%.100s)
'%.100s' object has no attributes (%s .%.100s)
'%.50s' object attribute '%.400s' is read-only
'%.100s' object has no attribute '%.200s'
number coercion failed
dir(): expected keys() of locals to be a list, not '%.200s'
frame does not exist
deallocating None
NotImplemented
Can't initialize sequence iterator type
Can't initialize call iter type
Can't initialize cell type
Can't initialize capsule type
Can't initialize file type
Can't initialize member descriptor type
Can't initialize ellipsis type
Can't initialize instance type
Can't initialize wrapper type
Can't initialize get-set descriptor type
Can't initialize generator type
Can't initialize dict proxy type
Can't initialize class type
Can't initialize function type
Can't initialize method type
Can't initialize builtin function type
Can't initialize frame type
Can't initialize code type
Can't initialize reversed type
Can't initialize enumerate type
Can't initialize tuple type
Can't initialize memoryview type
Can't initialize property type
Can't initialize frozenset type
Can't initialize int type
Can't initialize long type
Can't initialize buffer type
Can't initialize float type
Can't initialize complex type
Can't initialize static method type
Can't initialize slice type
Can't initialize unicode type
Can't initialize set type
Can't initialize dict type
Can't initialize xrange type
Can't initialize object type
Can't initialize super type
Can't initialize traceback type
Can't initialize NotImplemented type
Can't initialize None type
Can't initialize list type
Can't initialize bytearray type
Can't initialize str type
Can't initialize bool type
Can't initialize weakref proxy type
Can't initialize callable weakref proxy type
Can't initialize weakref type
Can't initialize type type
Py_Repr
<refcnt %ld at %p>
print recursion
type    : %s
refcount: %ld
address : %p
object  : 
..\..\Objects\object.c
 in cmp
comparing unequal types not supported in 3.x
A__members__ and __methods__ not supported in 3.x
__members__
%.200s.__dict__ is not a dictionary
__dir__() must return a list, not %.200s
__dir__
rangeiterator
xrange() result has too many items
xrange() arg 3 must not be zero
ll|l;xrange() requires 1-3 int arguments
l;xrange() requires 1-3 int arguments
xrange()
xrange object index out of range
xrange(%ld, %ld, %ld)
xrange(%ld, %ld)
xrange(%ld)
(O(lll))
..\..\Objects\rangeobject.c
frozenset
symmetric_difference
issuperset
issubset
isdisjoint
intersection
difference
discard
setiterator
%s(...)
pop from an empty set
Set changed size during iteration
frozenset()
can only compare to a set
cannot compare sets using cmp()
..\..\Objects\setobject.c
indices
ellipsis
Ellipsis
slice step cannot be zero
slice()
unhashable type
basestring
_formatter_parser
_formatter_field_name_split
fieldnameiterator
formatteriterator
decoder did not return a string object (type=%.400s)
encoder did not return a string object (type=%.400s)
deletion of interned string failed
Inconsistent interned string state.
Immortal interned string died.
expected string without null bytes
expected string or Unicode object, %.200s found
..\..\Objects\stringobject.c
strings are too large to concat
cannot concatenate 'str' and '%.200s' objects
repeated string is too long
'in <string>' requires string as left operand, not %.200s
accessing non-existent string segment
Cannot use string as modifiable buffer
substring not found
startswith first arg must be str, unicode, or tuple, not %s
endswith first arg must be str, unicode, or tuple, not %s
encoder did not return a string/unicode object (type=%.400s)
|ss:encode
decoder did not return a string/unicode object (type=%.400s)
cannot switch from automatic field numbering to manual field specification
cannot switch from manual field specification to automatic field numbering
Too many decimal digits in format string
Missing ']' in format string
Empty attribute in format string
Only '.' or '[' may follow ']' in format field specifier
expected ':' after format specifier
end of format while looking for conversion specifier
unmatched '{' in format
Single '{' encountered in format string
Single '}' encountered in format string
Unknown conversion specifier \x%x
Unknown conversion specifier %c
__format__ arg must be str or unicode, not %s
The basestring type cannot be instantiated
not enough arguments for format string
formatted integer is too long (precision too large?)
%s%%%s.%dl%c
%s0%c%%.%dl%c
int argument required, not %.200s
b;%c requires int or char
c;%c requires int or char
PyString_InternInPlace: strings only please!
total size of all interned strings: %Id/%Id mortal/immortal
releasing %Id interned strings
string is too large
Negative size passed to PyString_FromStringAndSize
string is too long for a Python string
string is too large to make repr
string index out of range
string indices must be integers, not %.200s
sequence item %zd: expected string, %.80s found
join() result is too long for a Python string
%s arg must be None, str or unicode
deletions are implemented differently for unicode
Max string recursion exceeded
float argument required, not %.200s
string too large in _PyString_FormatLong
unsupported format character '%c' (0x%x) at index %zd
not all arguments converted during string formatting
%%%c format: a number is required, not %.200s
%s argument has non-string str()
prec too big
width too big
* wants int
format requires a mapping
incomplete format key
incomplete format
Trailing \ in string
invalid \x escape
decoding error; unknown error handling code: %.400s
unnamed field
structseq index must be integer
%.500s() takes a %zd-sequence (%zd-sequence given)
%.500s() takes an at most %zd-sequence (%zd-sequence given)
%.500s() takes an at least %zd-sequence (%zd-sequence given)
%.500s() takes a dict as second arg, if any
constructor requires a sequence
O|O:structseq
(O(OO))
tupleiterator
..\..\Objects\tupleobject.c
tuple assignment index out of range
 while getting the repr of a tuple
can only concatenate tuple (not "%.200s") to tuple
tuple.index(x): x not in tuple
|O:tuple
tuple indices must be integers, not %.200s
the type of the instance invoking super(); may be None
__self_class__
the instance invoking super(); may be None
the class invoking super()
__thisclass__
x.__contains__(y) <==> y in x
x.__delslice__(i, j) <==> del x[i:j]
           
           Use of negative indices is not supported.
x.__setslice__(i, j, y) <==> x[i:j]=y
           
           Use  of negative indices is not supported.
x.__getslice__(i, j) <==> x[i:j]
           
           Use of negative indices is not supported.
x.__rmul__(n) <==> n*x
x.__mul__(n) <==> x*n
x.__delitem__(y) <==> del x[y]
x.__setitem__(i, y) <==> x[i]=y
x.__getitem__(y) <==> x[y]
x.__len__() <==> len(x)
x[y:z] <==> x[y.__index__():z.__index__()]
x.__itruediv__(y) <==> x/y
x.__ifloordiv__(y) <==> x//y
x.__rtruediv__(y) <==> y/x
x.__truediv__(y) <==> x/y
x.__rfloordiv__(y) <==> y//x
x.__floordiv__(y) <==> x//y
x.__ior__(y) <==> x|=y
x.__ixor__(y) <==> x^=y
x.__iand__(y) <==> x&=y
x.__irshift__(y) <==> x>>=y
x.__ilshift__(y) <==> x<<=y
x.__ipow__(y) <==> x**=y
x.__imod__(y) <==> x%=y
x.__idiv__(y) <==> x/=y
x.__imul__(y) <==> x*=y
x.__isub__(y) <==> x-=y
x.__iadd__(y) <==> x+=y
x.__hex__() <==> hex(x)
x.__oct__() <==> oct(x)
x.__float__() <==> float(x)
x.__long__() <==> long(x)
x.__int__() <==> int(x)
x.__coerce__(y) <==> coerce(x, y)
x.__ror__(y) <==> y|x
x.__or__(y) <==> x|y
x.__rxor__(y) <==> y^x
x.__xor__(y) <==> x^y
x.__rand__(y) <==> y&x
x.__and__(y) <==> x&y
x.__rrshift__(y) <==> y>>x
x.__rshift__(y) <==> x>>y
x.__rlshift__(y) <==> y<<x
x.__lshift__(y) <==> x<<y
x.__invert__() <==> ~x
x.__nonzero__() <==> x != 0
x.__abs__() <==> abs(x)
x.__pos__() <==> +x
x.__neg__() <==> -x
y.__rpow__(x[, z]) <==> pow(x, y[, z])
x.__pow__(y[, z]) <==> pow(x, y[, z])
x.__rdivmod__(y) <==> divmod(y, x)
x.__divmod__(y) <==> divmod(x, y)
x.__rmod__(y) <==> y%x
x.__mod__(y) <==> x%y
x.__rdiv__(y) <==> y/x
x.__div__(y) <==> x/y
x.__rmul__(y) <==> y*x
x.__mul__(y) <==> x*y
x.__rsub__(y) <==> y-x
x.__sub__(y) <==> x-y
x.__radd__(y) <==> y+x
x.__add__(y) <==> x+y
x.__init__(...) initializes x; see help(type(x)) for signature
descr.__delete__(obj)
__delete__
descr.__set__(obj, value)
__set__
descr.__get__(obj[, type]) -> value
__get__
x.next() -> the next value, or raise StopIteration
x.__iter__() <==> iter(x)
x.__ge__(y) <==> x>=y
x.__gt__(y) <==> x>y
x.__ne__(y) <==> x!=y
x.__eq__(y) <==> x==y
x.__le__(y) <==> x<=y
x.__lt__(y) <==> x<y
x.__delattr__('name') <==> del x.name
x.__setattr__('name', value) <==> x.name = value
x.__getattribute__('name') <==> x.name
x.__str__() <==> str(x)
x.__call__(...) <==> x(...)
x.__hash__() <==> hash(x)
x.__repr__() <==> repr(x)
x.__cmp__(y) <==> cmp(x,y)
__getattribute__
T.__new__(S, ...) -> a new object with type S, a subtype of T
The most base type
__sizeof__() -> int
size of object in memory, in bytes
default object formatter
__subclasshook__
helper for pickle
the object's class
__subclasscheck__() -> bool
check if a class is a subclass
__instancecheck__() -> bool
check if an object is an instance
__subclasses__() -> list of immediate subclasses
__subclasses__
mro() -> list
return a type's method resolution order
list of weak references to the object (if defined)
__weakref__
dictionary for instance variables (if defined)
__abstractmethods__
__mro__
__dictoffset__
__base__
__weakrefoffset__
__flags__
__itemsize__
__basicsize__
can only assign string to %s.__name__, not '%s'
can't delete %s.__name__
can't set %s.__name__
can't delete %s.__module__
can't set %s.__module__
type inequality comparisons not supported in 3.x
<%s '%s'>
<%s '%s.%s'>
duplicate base class %s
Cannot create a consistent method resolution
order (MRO) for bases
this __dict__ descriptor does not support '%.200s' objects
This object has no __weakref__
__slots__ must be identifiers
__slots__ items must be strings, not '%.200s'
object.__init__() takes no parameters
Can't instantiate abstract class %s with abstract methods %s
object() takes no parameters
<%s.%s object at %p>
%s assignment: '%s' deallocator differs from '%s'
%s assignment: '%s' object layout differs from '%s'
__class__ assignment: only for heap types
__class__ must be set to new-style class, not '%s' object
can't delete __class__ attribute
copy_reg._slotnames didn't return a list or None
_slotnames
__slotnames__
__getnewargs__ should return a tuple, not '%.200s'
_reduce_ex
|i:__reduce__
|i:__reduce_ex__
argument to __format__ must be unicode or str
method cannot be both class and static
Overriding __eq__ blocks inheritance of __hash__ in 3.x
expected %d arguments, got %zd
PyArg_UnpackTuple() argument list is not a tuple
%s.__cmp__(x,y) requires y to be a '%s', not a '%s'
can't apply this %s to %s object
__get__(None, None) is invalid
%s.__new__(): not enough arguments
%s.__new__(%s) is not safe, use %s.__new__()
%s.__new__(%s): %s is not a subtype of %s
%s.__new__(X): X is not a type object (%s)
__new__() called with non-type 'self'
Out of memory interning slotdef names
<super: <class '%s'>, NULL>
<super: <class '%s'>, <%s object>>
super(type, obj): obj must be an instance or subtype of type
O!|O:super
cannot create '%.100s' instances
mro() returned a non-class ('%.500s')
mro() returned base with unsuitable layout ('%.500s')
This object has no __dict__
__dict__ must be set to a dictionary, not a '%.200s'
type.__init__() takes 1 or 3 arguments
type.__init__() takes no keyword arguments
type '%.100s' participates in gc and is a base type but has inappropriate tp_free slot
%s should return bool or int, returned %s
__coerce__ didn't return a 2-tuple
__init__() should return None, not '%.200s'
bases must be types
multiple bases have instance lay-out conflict
a new-style class can't have only classic bases
__weakref__ slot disallowed: either we already got one, or __itemsize__ != 0
__dict__ slot disallowed: we already got one
nonempty __slots__ not supported for subtype of '%s'
__slots__
type '%.100s' is not an acceptable base type
metaclass conflict: the metaclass of a derived class must be a (non-strict) subclass of the metaclasses of all its bases
SO!O!:type
type() takes 1 or 3 arguments
type object '%.50s' has no attribute '%.400s'
can't set attributes of built-in/extension type '%s'
%s.__bases__ must be tuple of old- or new-style classes, not '%s'
can only assign non-empty tuple to %s.__bases__, not ()
can only assign tuple to %s.__bases__, not %s
can't delete %s.__bases__
can't set %s.__bases__
?333333
?UUUUUU
@unicode
isnumeric
isdecimal
O!n;translating error handler must return (unicode, int) tuple
EncodingMap
Return the size (in bytes) of this object
O!n;encoding error handler must return (unicode, int) tuple
O!n;decoding error handler must return (unicode, int) tuple
can't resize shared unicode objects
..\..\Objects\unicodeobject.c
unichr() arg not in range(0x10000) (narrow Python build)
unterminated shift sequence
unexpected special character
non-zero padding bits in shift sequence
partial character in shift sequence
ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/
invalid start byte
internal error
invalid continuation byte
codepoint not in range(0x110000)
truncated data
illegal encoding
illegal UTF-16 surrogate
\N escapes not supported (can't load unicodedata module)
unicodeescape
\ at end of string
illegal Unicode character
unknown Unicode character name
unicodedata.ucnhash_CAPI
malformed \N character escape
truncated \UXXXXXXXX escape
truncated \uXXXX escape
truncated \xXX escape
truncated \uXXXX
rawunicodeescape
\Uxxxxxxxx out of range
unicode_internal
truncated input
xmlcharrefreplace
ordinal not in range(128)
ordinal not in range(256)
character mapping must return integer, None or unicode
character mapping must be in range(0x110000)
charmap
character maps to <undefined>
character mapping must return integer, None or str
character mapping must be in range(256)
character mapping must be in range(0x%lx)
decimal
invalid decimal Unicode string
padded string is too long
string indices must be integers
accessing non-existent unicode segment
cannot use unicode as modifiable buffer
Can't initialize formatter iter type
Can't initialize field name iterator type
Can't initialize 'unicode'
Negative size passed to PyUnicode_FromStringAndSize
decoder did not return an unicode object (type=%.400s)
%c arg not in range(0x10000) (narrow Python build)
%c requires int or char
decoding bytearray is not supported
coercing to Unicode: need string or buffer, %.80s found
decoding Unicode is not supported
|Oss:unicode
sequence item %zd: expected string or Unicode, %.80s found
The fill character must be exactly one character long
The fill character cannot be converted to Unicode
n|O&:center
Unicode unequal comparison failed to convert both arguments to Unicode - interpreting them as being unequal
Unicode equal comparison failed to convert both arguments to Unicode - interpreting them as being unequal
n|O&:ljust
%s arg must be None, unicode or str
n|O&:rjust
weakcallableproxy
weakproxy
weakref
:__call__
weak object has gone away
<weakref at %p; dead>
<weakref at %p; to '%.50s' at %p (%s)>
<weakref at %p; to '%.50s' at %p>
cannot create weak reference to '%s' object
weakly-referenced object no longer exists
<weakproxy at %p to %.100s at %p>
..\..\Objects\weakrefobject.c
no mem to add parser accelerators
XXX ambiguity!
XXX too high nonterminal number!
XXX too many states!
no mem to build parser accelerators
no mem for bitset
FIRST set for '%s': {
Left-recursion below '%s'
no mem to resize sym in calcfirstset
no mem for new sym in calcfirstset
Re-calculating FIRST set for '%s' ???
Left-recursion for '%s'
Calculate FIRST set for '%s'
Adding FIRST sets ...
no mem for new grammar
no mem to resize dfa in adddfa
no mem to resize state in addstate
no mem to resize arc list in addarc
Label @ %8p, %d: %s
no mem to resize labellist in addlabel
grammar.c:findlabel()
Label %d/'%s' not found
Can't translate label '%s'
Can't alloc dest '%s'
Label %s is a keyword
Can't translate STRING label %s
Unknown OP label %s
Label %s is terminal %d.
Label %s is non-terminal %d.
Can't translate NAME label '%s'
Translating label %s ...
%.32s(%.32s)
input line too long
can't re-enter readline
s_push: parser stack overflow
unicode_literals
print_function
with_statement
__future__
no mem for next token
no mem for new parser
<string>
set tabsize=
:tabstop=
tab-width:
<N_TOKENS>
<ERRORTOKEN>
DOUBLESLASHEQUAL
DOUBLESLASH
DOUBLESTAREQUAL
RIGHTSHIFTEQUAL
LEFTSHIFTEQUAL
CIRCUMFLEXEQUAL
VBAREQUAL
AMPEREQUAL
PERCENTEQUAL
SLASHEQUAL
STAREQUAL
MINEQUAL
PLUSEQUAL
DOUBLESTAR
RIGHTSHIFT
LEFTSHIFT
CIRCUMFLEX
GREATEREQUAL
LESSEQUAL
NOTEQUAL
EQEQUAL
BACKQUOTE
PERCENT
GREATER
NEWLINE
ENDMARKER
iso-latin-1-
iso-8859-1-
latin-1-
iso-latin-1
iso-8859-1
encoding problem: %s
with BOM
Non-ASCII character '\x%.2x' in file %.200s on line %i, but no encoding declared; see http://www.python.org/peps/pep-0263.html for details
tok_backup: beginning of buffer
%s: inconsistent use of tabs and spaces in indentation
<> not supported in 3.x; use !=
Tab size set to %d
GetModuleFileName
GetVersion
WaitForSingleObject
GetExitCodeProcess
TerminateProcess
CreateProcess
CreatePipe
DuplicateHandle
GetCurrentProcess
GetStdHandle
_subprocess_handle
:Detach
i:GetStdHandle
:GetCurrentProcess
LLLii|i:DuplicateHandle
Oi:CreatePipe
environment can only contain strings
environment must be dictionary or None
hStdError
hStdOutput
hStdInput
wShowWindow
dwFlags
zzOOiiOzO:CreateProcess
Li:TerminateProcess
L:GetExitCodeProcess
Li:WaitForSingleObject
:GetVersion
L:GetModuleFileName
STILL_ACTIVE
CREATE_NEW_PROCESS_GROUP
CREATE_NEW_CONSOLE
WAIT_OBJECT_0
INFINITE
SW_HIDE
STARTF_USESHOWWINDOW
STARTF_USESTDHANDLES
DUPLICATE_SAME_ACCESS
STD_ERROR_HANDLE
STD_OUTPUT_HANDLE
STD_INPUT_HANDLE
_subprocess
SetValueEx
SetValue
SaveKey
QueryReflectionKey
QueryInfoKey
QueryValueEx
QueryValue
OpenKeyEx
OpenKey
LoadKey
FlushKey
ExpandEnvironmentStrings
EnumValue
EnumKey
EnableReflectionKey
DisableReflectionKey
DeleteValue
DeleteKeyEx
DeleteKey
CreateKeyEx
CreateKey
ConnectRegistry
CloseKey
bad operand type
<PyHKEY at %p (%p)>
<PyHKEY:%p>
The object is not a PyHKEY object
None is not a valid HKEY in this context
A handle must be a HKEY object or an integer
Objects of type '%s' can not be used as binary registry values
registry string is too long for a Python string
O:CloseKey
zO:ConnectRegistry
Oz:CreateKey
Oz|ii:CreateKeyEx
Os:DeleteKey
not implemented on this platform
RegDeleteKeyExA
advapi32.dll
Os|ii:DeleteKeyEx
Oz:DeleteValue
Oi:EnumKey
Oi:EnumValue
u:ExpandEnvironmentStrings
O:FlushKey
Oss:LoadKey
Oz|ii:OpenKey
O:QueryInfoKey
Oz:QueryValue
Oz:QueryValueEx
Os:SaveKey
Type must be _winreg.REG_SZ
OOiO:SetValue
Could not convert the data to the specified type.
OzOiO:SetValueEx
RegDisableReflectionKey
O:DisableReflectionKey
RegEnableReflectionKey
O:EnableReflectionKey
RegQueryReflectionKey
O:QueryReflectionKey
REG_RESOURCE_REQUIREMENTS_LIST
REG_FULL_RESOURCE_DESCRIPTOR
REG_RESOURCE_LIST
REG_MULTI_SZ
REG_LINK
REG_DWORD_BIG_ENDIAN
REG_DWORD_LITTLE_ENDIAN
REG_DWORD
REG_BINARY
REG_EXPAND_SZ
REG_NONE
REG_LEGAL_CHANGE_FILTER
REG_NOTIFY_CHANGE_SECURITY
REG_NOTIFY_CHANGE_LAST_SET
REG_NOTIFY_CHANGE_ATTRIBUTES
REG_NOTIFY_CHANGE_NAME
REG_NO_LAZY_FLUSH
REG_REFRESH_HIVE
REG_WHOLE_HIVE_VOLATILE
REG_OPENED_EXISTING_KEY
REG_CREATED_NEW_KEY
REG_LEGAL_OPTION
REG_OPTION_OPEN_LINK
REG_OPTION_BACKUP_RESTORE
REG_OPTION_CREATE_LINK
REG_OPTION_VOLATILE
REG_OPTION_NON_VOLATILE
REG_OPTION_RESERVED
KEY_WOW64_32KEY
KEY_WOW64_64KEY
KEY_ALL_ACCESS
KEY_EXECUTE
KEY_WRITE
KEY_READ
KEY_CREATE_LINK
KEY_NOTIFY
KEY_ENUMERATE_SUB_KEYS
KEY_CREATE_SUB_KEY
KEY_SET_VALUE
KEY_QUERY_VALUE
HKEY_DYN_DATA
HKEY_CURRENT_CONFIG
HKEY_PERFORMANCE_DATA
HKEY_USERS
HKEY_LOCAL_MACHINE
HKEY_CURRENT_USER
HKEY_CLASSES_ROOT
HKEYType
_winreg
_warnings
marshal
ReleaseActCtx
AddRefActCtx
DeactivateActCtx
ActivateActCtx
GetCurrentActCtx
Python failed to activate the activation context before loading a DLL
Python failed to de-activate the activation context
Python failed to load the default activation context
Software\Python\PythonCore\
\PythonPath
buffer overflow in getpathp.c's joinpath()
Using default static path.
Using environment $PYTHONPATH.
Can't malloc dynamic PYTHONPATH.
.\DLLs;.\lib;.\lib\plat-win;.\lib\lib-tk
lib\os.py
PYTHONPATH
Software\Python\PythonCore\%s\Modules\%s%s
ungetwch
getwche
ungetch
get_osfhandle
open_osfhandle
setmode
locking
heapmin
:heapmin
iil:locking
ii:setmode
li:open_osfhandle
i:get_osfhandle
:getwch
:getche
:getwche
c:putch
Expected unicode string of length 1
u#:putwch
c:ungetch
u:ungetwch
LK_UNLCK
LK_RLCK
LK_NBRLCK
LK_NBLCK
LK_LOCK
warn_explicit
module_globals
registry
stacklevel
category
warnings
onceregistry
defaultaction
_warnings.defaultaction not found
_warnings.filters item %zd isn't a 5-tuple
_warnings.filters must be a list
filters
<unknown>
lost sys.stderr
warnings.showwarning() must be set to a function or method
showwarning
Unrecognized action (%s) in warnings.filters:
'registry' must be a dict
__warningregistry__
category is not a subclass of Warning
O|On:warn
OOOi|OOO:warn_explicit
unknown action
default_action
once_registry
nonlocal is a keyword in 3.x
nonlocal
assignment to True or False is forbidden in 3.x
cannot assign to __debug__
__debug__
cannot assign to None
Non-statement found: %d %d
unexpected expression in assignment %d (line %d)
can't %s %s
conditional expression
comparison
literal
dict comprehension
set comprehension
list comprehension
yield expression
generator expression
function call
invalid augassign: %s
invalid comp_op: has %d children
invalid comp_op: %s %s
invalid comp_op: %s
unexpected node in varargslist: %d @ %d
non-default argument follows default argument
parenthesized arg with default
parenthesized argument names are invalid in 3.x
tuple parameter unpacking has been removed in 3.x
logic error in count_list_fors
logic error in count_comp_fors
unexpected import name: %d
unknown import statement: starts with command '%s'
trailing comma not allowed without surrounding parentheses
Unexpected node-type in from-import
\U%02x%02x%02x%02x
string to parse is too long
..\..\Python\ast.c
unhandled factor: %d
lambda cannot contain assignment
keyword can't be an expression
keyword argument repeated
non-keyword arg after keyword arg
only named arguments may follow *expression
more than 255 arguments
Generator expression must be parenthesized if not sole argument
unhandled atom %d
backquote not supported in 3.x; use repr()
(unicode error) unknown error
(unicode error) %s
unhandled expr: %d
assignment to yield expression not possible
illegal expression for augmented assignment
unexpected flow_stmt: %d
poorly formed 'exec' statement: %d parts to statement
improper number of parts to 'assert' statement: %d
unexpected token in 'if' statement: %s
wrong number of tokens for 'while' statement: %d
wrong number of children for 'except' clause: %d
malformed 'try' statement
unhandled small_stmt: TYPE=%d NCH=%d
invalid node %d for PyAST_FromNode
encoding declaration in Unicode string
setattr
raw_input
issubclass
isinstance
hasattr
getattr
execfile
delattr
callable
__import__
ndigits
dont_inherit
s|OOOi:__import__
apply() arg 3 expected dictionary, found %s
apply() arg 2 expected sequence, found %s
apply() not supported in 3.x; use func(*args, **kwargs)
O|O:format
chr() arg not in range(256)
i:unichr
coerce() not supported in 3.x
compile() arg 3 must be 'exec', 'eval' or 'single'
compile() expected string without null bytes
compile(): unrecognised flags
Oss|ii:compile
eval must be given globals and locals when called without a frame
eval() arg 1 must be a string or code object
code object passed to eval() may not contain free variables
globals must be a dict
globals must be a real dict; try eval(expr, {}, mapping)
locals must be a mapping
s|O!O:execfile
execfile() not supported in 3.x; use exec()
getattr(): attribute name must be string
hasattr(): attribute name must be string
map(None, ...) not supported in 3.x; use list(...)
map() requires at least two args
%.200s object is not an iterator
hex() argument can't be converted to hex
__hex__ returned non-string (type %.200s)
can't intern subclass of string
S:intern
iter(v, w): v must be callable
%s() arg is an empty sequence
%s() got an unexpected keyword argument
oct() argument can't be converted to oct
__oct__ returned non-string (type %.200s)
ord() expected a character, but string of length %zd found
ord() expected string of length 1, but %.200s found
end must be None, str or unicode, not %.200s
sep must be None, str or unicode, not %.200s
|OOO:print
range() integer %s argument expected, got %s.
__int__ should return int object
range() result has too many items
range() step argument must not be zero
ll|l;range() requires 1-3 int arguments
l;range() requires 1-3 int arguments
[raw_]input: input too long
[raw_]input: lost sys.stdout
[raw_]input: lost sys.stdin
[raw_]input
functools
reduce() not supported in 3.x; use functools.reduce()
In 3.x, reload() is renamed to imp.reload()
d|O:round
O|OOi:sorted
vars() argument must have __dict__ attribute
vars(): no locals!?
sum() can't sum strings [use ''.join(seq) instead]
zip argument #%zd must support iteration
filter(): unsubscriptable tuple
can't filter str to str: __getitem__ returned different type
can't filter unicode to unicode: __getitem__ returned different type
s;embedded '\0' in input line
PyEval_AcquireThread: non-NULL old thread state
PyEval_AcquireThread: NULL new thread state
PyEval_ReleaseThread: wrong thread state
PyEval_ReleaseThread: NULL thread state
_after_fork
threading
PyEval_SaveThread: NULL tstate
PyEval_RestoreThread: NULL tstate
maximum recursion depth exceeded%s
exc_traceback
exc_value
exc_type
calling %s() should have returned an instance of BaseException, not '%s'
exceptions must derive from BaseException in 3.x
exceptions must be old-style classes or derived from BaseException, not %s
raise: arg 3 must be a traceback or None
too many values to unpack
need more than %d value%s to unpack
keyword list must be a dictionary
argument list must be a tuple
 object
 constructor
%.200s() takes exactly one argument (%d given)
%.200s() takes no arguments (%d given)
%.200s%s got multiple values for keyword argument '%.200s'
slice indices must be integers or None or have an __index__ method
catching classes that don't inherit from BaseException is not allowed in 3.x
catching of string exceptions is deprecated
cannot import name %.230s
from-import-* object has no __dict__ and no __all__
__all__
%.200s%.200s argument after * must be a sequence, not %200s
%.200s%.200s argument after ** must be a mapping, not %.200s
Error when calling the metaclass bases
__metaclass__
unknown opcode
XXX lineno: %d, opcode: %d
'finally' pops bad exception
no locals found during 'import *'
__import__ not found
free variable '%.200s' referenced before assignment in enclosing scope
error return without exception set
no locals when loading %s
global name '%.200s' is not defined
no locals when deleting %s
name '%.200s' is not defined
no locals found when storing %s
no locals
bad RAISE_VARARGS oparg
lost sys.stdout
lost sys.displayhook
displayhook
invalid argument to DUP_TOPX (bytecode corruption?)
local variable '%.200s' referenced before assignment
ceval: orphan tstate
ceval: tstate mix-up
at least
%.200s() keywords must be strings
%.200s() got an unexpected keyword argument '%.400s'
%.200s() got multiple values for keyword argument '%.400s'
%.200s() takes %s %d argument%s (%d given)
at most
exactly
PyEval_EvalCodeEx: NULL globals
code object passed to exec may not contain free variables
exec: arg 3 must be a mapping or None
exec: arg 2 must be a dictionary or None
exec: arg 1 must be a string, file, or code object
globals and locals cannot be NULL
Implements the 'backslashreplace' error handling, which replaces an unencodable character with a backslashed escape sequence.
backslashreplace_errors
backslashreplace
Implements the 'xmlcharrefreplace' error handling, which replaces an unencodable character with the appropriate XML character reference.
xmlcharrefreplace_errors
Implements the 'replace' error handling, which replaces malformed data with a replacement marker.
replace_errors
Implements the 'ignore' error handling, which ignores malformed data and continues.
ignore_errors
Implements the 'strict' error handling, which raises a UnicodeError on coding errors.
strict_errors
handler must be callable
don't know how to handle %.400s in error callback
codec must pass exception instance
encodings
can't initialize codec registry
can't initialize codec error registry
argument must be callable
codec search functions must return 4-tuples
unknown encoding: %s
no codec search functions registered: can't find encoding
incrementalencoder
incrementaldecoder
encoder must return a tuple (object,integer)
decoder must return a tuple (object,integer)
unknown error handler name '%.400s'
'continue' not properly in loop
'continue' not supported inside 'finally' clause
private identifier too large to be mangled
compiler_exit_scope()
compile.c compiler unit
opcode_stack_effect()
opcode = %d
unknown scope for %.100s in %.100s(%s) in %s
symbols: %s
locals: %s
globals: %s
unary op %d should not be possible
binary op %d should not be possible
inplace binary op %d should not be possible
too many statically nested blocks
invalid %s kind %d in subscript
compiler_make_closure()
lookup %s in %s %d %d
freevars of %s: %s
param invalid for local variable
param invalid for global variable
can not delete variable '%s' referenced in nested scope
param invalid for deref variable
param invalid for name variable
<lambda>
from __future__ imports must occur at the beginning of the file
unknown comprehension type %d
<genexpr>
<setcomp>
<dictcomp>
param invalid in subscript expression
param invalid in attribute expression
'yield' outside function
invalid node type (%d) for augmented assignment
param invalid in simple slice
extended slice invalid in nested slice
extended slice
invalid subscript kind %d
default 'except:' must be last
assertion is always true, perhaps remove parentheses?
'break' outside loop
'return' outside function
suite should not be possible
module kind %d should not be possible
<module>
no symtable
Module use of %.150s conflicts with this version of Python.
python%d%d.dll
DLL load failed: 
DLL load failed with error code %d
init%.200s
bad argument type for built-in operation
Windows Error 0x%X
PyErr_NewException: name must be module.class
 ignored
Exception 
%s:%d: bad argument to internal function
bad argument to internal function
Unknown format code '%c' for object of type '%.200s'
Cannot specify ',' with '%c'.
Invalid conversion specification
Format specifier missing precision
'=' alignment not allowed in string format specifier
Alternate form (#) not allowed in string format specifier
Sign not allowed in string format specifier
Thousands separators not allowed with integer format specifier 'c'
Sign not allowed with integer format specifier 'c'
Precision not allowed in integer format specifier
Alternate form (#) not allowed in float format specifier
'=' alignment flag is not allowed in complex format specifier
Zero padding is not allowed in complex format specifier
Alternate form (#) not allowed in complex format specifier
Unknown format code '\x%x' for object of type '%.200s'
Cannot specify ',' with '\x%x'.
__phello__.spam
__phello__
__hello__
future feature %.100s is not defined
not a chance
absolute_import
division
generators
nested_scopes
getargs.cleanup_ptr
getargs.cleanup_buffer
 %.256s
argument
, item %d
argument %d
%.200s() 
must be %d-item sequence, not %.50s
expected %d arguments, not %.50s
is not retrievable
expected %d arguments, not %d
must be sequence of length %d, not %d
must be %.50s, not %.50s
string or read-only buffer
(unspecified)
string or single-segment read-only buffer
contiguous buffer
convertible to a buffer
string or buffer
impossible<bad format char>
Unmatched right paren in format string
Unmatched left paren in format string
at most 
unpacked tuple should have %s%zd elements, but has %zd
%s expected %s%zd arguments, got %zd
at least 
%s does not take keyword arguments
..\..\Python\getargs.c
string or read-only character buffer
string or pinned buffer
invalid use of 't' format character
single-segment read-write buffer
read-write buffer
pinned buffer
cannot convert raw buffers
(unknown parser marker combination)
encoded string without NULL bytes
(buffer overflow)
(memory error)
(buffer_len is NULL)
(encoder failed to return a string)
(encoding failed)
string or unicode or text buffer
(buffer is NULL)
string or None
string without null bytes or None
string without null bytes
size does not fit in an int
(unicode conversion error)
(cleanup problem)
complex<D>
float<d>
float<f>
integer<K>
long<L>
integer<k>
integer<l>
integer<n>
integer<I>
signed integer is less than minimum
signed integer is greater than maximum
integer<i>
integer<H>
signed short integer is greater than maximum
signed short integer is less than minimum
integer<h>
integer<B>
unsigned byte integer is greater than maximum
unsigned byte integer is less than minimum
integer<b>
keywords must be strings
'%s' is an invalid keyword argument for this function
More keyword list entries (%d) than format specifiers (%d)
Required argument '%s' (pos %d) not found
%s: '%s'
more argument specifiers than keyword list entries (remaining format:'%s')
Argument given by name ('%s') and position (%d)
%s%s takes at most %d argument%s (%d given)
%.150s%s takes %s %d argument%s (%ld given)
bad format string: %.200s
new style getargs format but argument is not a tuple
old style getargs format uses new features
%.200s%s takes at least one argument
%.200s%s takes no arguments
missing ')' in getargs format
too many tuple nesting levels in argument format string
excess ')' in getargs format
[MSC v.1600 64 bit (AMD64)]
Argument expected for the -%c option
Unknown option: -%c
-X is reserved for implementation-specific arguments
-J is reserved for Jython
--version
%.80s (%.80s) %.80s
yield_expr
encoding_decl
classdef
dictorsetmaker
testlist_comp
listmaker
arith_expr
shift_expr
and_expr
xor_expr
not_test
and_test
or_test
old_test
except_clause
with_item
with_stmt
try_stmt
for_stmt
while_stmt
if_stmt
assert_stmt
exec_stmt
global_stmt
dotted_name
dotted_as_names
import_as_names
dotted_as_name
import_from
raise_stmt
return_stmt
continue_stmt
break_stmt
pass_stmt
expr_stmt
varargslist
funcdef
decorated
decorators
decorator
eval_input
file_input
single_input
Null importer object
imp.NullImporter
Always return None
load_source
load_package
load_dynamic
load_compiled
is_frozen
is_builtin
init_frozen
init_builtin
get_frozen_object
lock_held
new_module
get_suffixes
get_magic
__stderr__
__stdout__
__stdin__
float_info
meta_path
path_importer_cache
path_hooks
last_traceback
last_value
last_type
exitfunc
Can't initialize import file table.
not holding the import lock
PyImport_GetModuleDict: no module dictionary!
# cleanup __builtin__
# cleanup sys
# cleanup[2] %s
# cleanup[1] %s
# cleanup __main__
# restore sys.%s
# clear sys.%s
# clear __builtin__._
_PyImport_FixupExtension: module %.200s not loaded
import:  deleting existing key insys.modules failed
Loaded module %.200s not found in sys.modules
# %s matches %s
Non-code object in %.200s
import %s # precompiled from %s
Bad magic number in %.200s
# can't write %s
# wrote %s
# can't create %s
unable to get file status from '%s'
dont_write_bytecode
import %s # from %s
Can't find file for module %.100s
(filename %.300s)
PYTHONCASEOK
Excluded frozen object named %.200s
No such frozen object named %.200s
<frozen>
frozen object %.200s is not a code object
import %s # frozen%s
 package
Parent module '%.200s' not loaded, cannot perform relative import
Attempted relative import beyond toplevel package
Parent module '%.200s' not found while handling absolute import
Module name too long
Could not set __package__
Package name too long
Attempted relative import in non-package
__package__ set to non-string
s:init_frozen
s:get_frozen_object
s:is_builtin
s:is_frozen
bad/closed file object
ss|O!:load_compiled
ss|O!:load_dynamic
ss|O!:load_source
s:new_module
existing directory
empty pathname
s:NullImporter
NullImporter()
NullImporter
IMP_HOOK
PY_CODERESOURCE
PY_FROZEN
C_BUILTIN
PKG_DIRECTORY
PY_RESOURCE
C_EXTENSION
PY_COMPILED
PY_SOURCE
SEARCH_ERROR
import %s # previously loaded (%s)
sys.path must be a list of directory names
sys.path_hooks must be a list of import hooks
sys.path_importer_cache must be a dict
No module named %.200s
# trying %s
Not importing directory '%.*s': missing __init__.py
No frozen submodule named %.200s
sys.meta_path must be a list of import hooks
full frozen module name too long
module name is too long
import %s # builtin
Cannot re-init internal module %.200s
Os(ssi)
s|O:find_module
s:init_builtin
import %s # directory %s
Don't know how to import %.200s (type code %d)
import hook without loader
%s module %.200s not properly initialized
Purported %s module %.200s not found
builtin
file object required for import (type code %d)
reload() argument must be module
reload(): parent %.200s not in sys.modules
reload(): module %.200s not in sys.modules
PyImport_ReloadModule: no modules_reloading dictionary!
load_module arg#2 should be a file or None
invalid file open mode %.200s
sOs(ssi):load_module
ss:load_package
Empty module name
Item in ``from list'' not a string
Import by filename is not supported.
Failed to import %.200s because the import lockis held by another thread.
# can't import zipimport
# can't import zipimport.zipimporter
# installed zipimport hook
initializing sys.meta_path, sys.path_hooks, path_importer_cache, or NullImporter failed
# installing zipimport hook
import %s # dynamically loaded from %s
dynamic module not initialized properly
dynamic module does not define init function (init%.200s)
bad marshal data (long size out of range)
bad marshal data (digit out of range in long)
bad marshal data (unnormalized long data)
bad marshal data (unknown type code)
cannot unmarshal code objects in restricted execution mode
bad marshal data (set size out of range)
NULL object in marshal data for set
bad marshal data (list size out of range)
NULL object in marshal data for list
bad marshal data (tuple size out of range)
NULL object in marshal data for tuple
bad marshal data (unicode size out of range)
bad marshal data (string ref out of range)
bad marshal data (string size out of range)
EOF read where object expected
recursion limit exceeded
NULL object in marshal data for object
XXX readobject called with exception set
unmarshallable object
object too deeply nested to marshal
too much marshall data for a string
marshal.dump() 2nd arg must be file
OO|i:dump
marshal.load() arg must be file
s#:loads
version
module functions cannot set METH_CLASS or METH_STATIC
Python import machinery not initialized
unmatched paren in format
Unmatched paren in format
NULL object passed to Py_BuildValue
string too long for Python string
bad format char passed to Py_BuildValue
module '%s' has no __dict__
PyModule_AddObject() needs non-NULL value
PyModule_AddObject() needs module as first arg
unexpected binary operation %d on a constant
unexpected unary operation %d on a constant
 !"#$%&'()*+,-./0123456789:;<=>?@abcdefghijklmnopqrstuvwxyz[\]^_`abcdefghijklmnopqrstuvwxyz{|}~
 !"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`ABCDEFGHIJKLMNOPQRSTUVWXYZ{|}~
Can't initialize threads for interpreter
PyThreadState_Clear: warning: thread still has a frame
PyThreadState_Delete: circular list(!) and tstate not found.
PyThreadState_Delete: small circular list(!) and tstate not found.
PyThreadState_Delete: invalid tstate
PyThreadState_Delete: NULL interp
PyThreadState_Delete: NULL tstate
PyThreadState_Delete: tstate is still current
PyThreadState_DeleteCurrent: no current tstate
PyThreadState_Get: no current thread
Couldn't create autoTLSkey mapping
This thread state must be current when releasing
auto-releasing thread-state, but no thread-state for this thread
PyInterpreterState_Delete: remaining threads
PyInterpreterState_Delete: invalid interp
Couldn't create thread-state for new thread
PyOS_ascii_strtod and PyOS_ascii_atof are deprecated.  Use PyOS_string_to_double instead.
value too large to convert to float: %.200s
could not convert string to float: %.200s
e%+.02d
PyOS_ascii_formatd is deprecated, use PyOS_double_to_string instead
..\..\Python\pystrtod.c
_ast.AST
defaults
starargs
comparators
operand
finalbody
handlers
optional_vars
context_expr
targets
decorator_list
col_offset
%.400s constructor takes %s%zd positional argument%s
either 0 or 
_fields
s(O){sOss}
_attributes
AST identifier must be of type str
AST string must be of type str or unicode
invalid integer value: %.400s
invalid boolean value: %.400s
keyword
arguments
ExceptHandler
excepthandler
comprehension
unaryop
FloorDiv
ExtSlice
AugStore
AugLoad
expr_context
Subscript
Attribute
Compare
GeneratorExp
DictComp
SetComp
ListComp
UnaryOp
Continue
ImportFrom
TryFinally
TryExcept
AugAssign
ClassDef
FunctionDef
Expression
Interactive
field body is required for Expression
field args is required for FunctionDef
field name is required for FunctionDef
field name is required for ClassDef
field value is required for Assign
field value is required for AugAssign
field op is required for AugAssign
field target is required for AugAssign
field iter is required for For
field target is required for For
field test is required for While
field test is required for If
field context_expr is required for With
field test is required for Assert
field body is required for Exec
field value is required for Expr
field op is required for BoolOp
field right is required for BinOp
field op is required for BinOp
field left is required for BinOp
field operand is required for UnaryOp
field op is required for UnaryOp
field body is required for Lambda
field args is required for Lambda
field orelse is required for IfExp
field body is required for IfExp
field test is required for IfExp
field elt is required for ListComp
field elt is required for SetComp
field value is required for DictComp
field key is required for DictComp
field elt is required for GeneratorExp
field left is required for Compare
field func is required for Call
field value is required for Repr
field n is required for Num
field s is required for Str
field ctx is required for Attribute
field attr is required for Attribute
field value is required for Attribute
field ctx is required for Subscript
field slice is required for Subscript
field value is required for Subscript
field ctx is required for Name
field id is required for Name
field ctx is required for List
field ctx is required for Tuple
field value is required for Index
field iter is required for comprehension
field target is required for comprehension
field value is required for keyword
field arg is required for keyword
field name is required for alias
unknown expr_context found
unknown boolop found
unknown operator found
unknown unaryop found
unknown cmpop found
expected some sort of expr_context, but got %.400s
expected some sort of slice, but got %.400s
required field "value" missing from Index
required field "dims" missing from ExtSlice
ExtSlice field "dims" must be a list, not a %.200s
expected some sort of boolop, but got %.400s
expected some sort of operator, but got %.400s
expected some sort of unaryop, but got %.400s
expected some sort of cmpop, but got %.400s
required field "target" missing from comprehension
required field "iter" missing from comprehension
required field "ifs" missing from comprehension
comprehension field "ifs" must be a list, not a %.200s
required field "args" missing from arguments
required field "defaults" missing from arguments
arguments field "defaults" must be a list, not a %.200s
arguments field "args" must be a list, not a %.200s
required field "arg" missing from keyword
required field "value" missing from keyword
required field "name" missing from alias
PyCF_ONLY_AST
required field "lineno" missing from expr
required field "col_offset" missing from expr
expected some sort of expr, but got %.400s
required field "elts" missing from Tuple
required field "ctx" missing from Tuple
Tuple field "elts" must be a list, not a %.200s
required field "elts" missing from List
required field "ctx" missing from List
List field "elts" must be a list, not a %.200s
required field "id" missing from Name
required field "ctx" missing from Name
required field "value" missing from Subscript
required field "slice" missing from Subscript
required field "ctx" missing from Subscript
required field "value" missing from Attribute
required field "attr" missing from Attribute
required field "ctx" missing from Attribute
required field "s" missing from Str
required field "n" missing from Num
required field "value" missing from Repr
required field "func" missing from Call
required field "args" missing from Call
required field "keywords" missing from Call
Call field "keywords" must be a list, not a %.200s
Call field "args" must be a list, not a %.200s
required field "left" missing from Compare
required field "ops" missing from Compare
required field "comparators" missing from Compare
Compare field "comparators" must be a list, not a %.200s
Compare field "ops" must be a list, not a %.200s
required field "elt" missing from GeneratorExp
required field "generators" missing from GeneratorExp
GeneratorExp field "generators" must be a list, not a %.200s
required field "key" missing from DictComp
required field "value" missing from DictComp
required field "generators" missing from DictComp
DictComp field "generators" must be a list, not a %.200s
required field "elt" missing from SetComp
required field "generators" missing from SetComp
SetComp field "generators" must be a list, not a %.200s
required field "elt" missing from ListComp
required field "generators" missing from ListComp
ListComp field "generators" must be a list, not a %.200s
required field "elts" missing from Set
Set field "elts" must be a list, not a %.200s
required field "keys" missing from Dict
required field "values" missing from Dict
Dict field "values" must be a list, not a %.200s
Dict field "keys" must be a list, not a %.200s
required field "test" missing from IfExp
required field "body" missing from IfExp
required field "orelse" missing from IfExp
required field "args" missing from Lambda
required field "body" missing from Lambda
required field "op" missing from UnaryOp
required field "operand" missing from UnaryOp
required field "left" missing from BinOp
required field "op" missing from BinOp
required field "right" missing from BinOp
required field "op" missing from BoolOp
required field "values" missing from BoolOp
BoolOp field "values" must be a list, not a %.200s
required field "lineno" missing from excepthandler
required field "col_offset" missing from excepthandler
expected some sort of excepthandler, but got %.400s
required field "body" missing from ExceptHandler
ExceptHandler field "body" must be a list, not a %.200s
required field "lineno" missing from stmt
required field "col_offset" missing from stmt
expected some sort of stmt, but got %.400s
required field "value" missing from Expr
required field "names" missing from Global
Global field "names" must be a list, not a %.200s
required field "body" missing from Exec
required field "names" missing from ImportFrom
ImportFrom field "names" must be a list, not a %.200s
required field "names" missing from Import
Import field "names" must be a list, not a %.200s
required field "test" missing from Assert
required field "body" missing from TryFinally
required field "finalbody" missing from TryFinally
TryFinally field "finalbody" must be a list, not a %.200s
TryFinally field "body" must be a list, not a %.200s
required field "body" missing from TryExcept
required field "handlers" missing from TryExcept
required field "orelse" missing from TryExcept
TryExcept field "orelse" must be a list, not a %.200s
TryExcept field "handlers" must be a list, not a %.200s
TryExcept field "body" must be a list, not a %.200s
required field "context_expr" missing from With
required field "body" missing from With
With field "body" must be a list, not a %.200s
required field "test" missing from If
required field "body" missing from If
required field "orelse" missing from If
If field "orelse" must be a list, not a %.200s
If field "body" must be a list, not a %.200s
required field "test" missing from While
required field "body" missing from While
required field "orelse" missing from While
While field "orelse" must be a list, not a %.200s
While field "body" must be a list, not a %.200s
required field "target" missing from For
required field "iter" missing from For
required field "body" missing from For
required field "orelse" missing from For
For field "orelse" must be a list, not a %.200s
For field "body" must be a list, not a %.200s
required field "values" missing from Print
required field "nl" missing from Print
Print field "values" must be a list, not a %.200s
required field "target" missing from AugAssign
required field "op" missing from AugAssign
required field "value" missing from AugAssign
required field "targets" missing from Assign
required field "value" missing from Assign
Assign field "targets" must be a list, not a %.200s
required field "targets" missing from Delete
Delete field "targets" must be a list, not a %.200s
required field "name" missing from ClassDef
required field "bases" missing from ClassDef
required field "body" missing from ClassDef
required field "decorator_list" missing from ClassDef
ClassDef field "decorator_list" must be a list, not a %.200s
ClassDef field "body" must be a list, not a %.200s
ClassDef field "bases" must be a list, not a %.200s
required field "name" missing from FunctionDef
required field "args" missing from FunctionDef
required field "body" missing from FunctionDef
required field "decorator_list" missing from FunctionDef
FunctionDef field "decorator_list" must be a list, not a %.200s
FunctionDef field "body" must be a list, not a %.200s
expected some sort of mod, but got %.400s
required field "body" missing from Suite
Suite field "body" must be a list, not a %.200s
required field "body" missing from Expression
required field "body" missing from Interactive
Interactive field "body" must be a list, not a %.200s
required field "body" missing from Module
Module field "body" must be a list, not a %.200s
expected %s node, got %.400s
PYTHONHOME
O(ziiz)
", line 
  File "
Bad code object in .pyc file
Bad magic number in .pyc file
unknown parsing error
error=%d
unexpected character after line continuation character
unknown decode error
too many levels of indentation
unindent does not match any outer indentation level
expression too long
inconsistent use of tabs and spaces in indentation
unexpected EOF while parsing
EOL while scanning string literal
EOF while scanning triple-quoted string literal
invalid token
invalid syntax
unexpected unindent
unexpected indent
expected an indented block
Fatal Python error: %s
_shutdown
Error in sys.exitfunc:
Py_EndInterpreter: not the last thread
Py_EndInterpreter: thread still has a frame
Py_EndInterpreter: thread is not current
can't add __builtins__ to __main__
can't create __main__ module
sys.excepthook is missing
Original exception was:
Error in sys.excepthook:
excepthook
python: Can't reopen .pyc file
Cannot set codeset of stderr
Cannot set codeset of stdout
Cannot set codeset of stdin
PYTHONIOENCODING
Py_Initialize: can't initialize sys dict
Py_Initialize: can't initialize sys
Py_Initialize: can't initialize builtins dict
Py_Initialize: can't initialize __builtin__
Py_Initialize: can't make modules_reloading dictionary
Py_Initialize: can't make modules dictionary
Py_Initialize: can't init bytearray
Py_Initialize: can't init longs
Py_Initialize: can't init ints
Py_Initialize: can't init frames
Py_Initialize: can't make first thread
Py_Initialize: can't make first interpreter
PYTHONDONTWRITEBYTECODE
PYTHONOPTIMIZE
PYTHONVERBOSE
PYTHONDEBUG
Py_NewInterpreter: call Py_Initialize first
Failed to initialize Windows random API (CryptoGen)
CryptGenRandom
CryptAcquireContextA
Failed to initialized the randomized hash secret using CryptoGen)
PYTHONHASHSEED must be "random" or an integer in range [0; 4294967295]
bad memberdescr type
restricted attribute
bad memberdescr type for %s
Truncation of value to unsigned int
Writing negative value into unsigned field
Truncation of value to int
Truncation of value to unsigned short
Truncation of value to short
Truncation of value to unsigned char
Truncation of value to char
attribute value type must be bool
can't delete numeric/char attribute
readonly attribute
symtable entry
optimized
children
varnames
symbols
<symtable entry %.100s(%ld), line %d>
unknown symbol table entry
name '%s' is local and global
import * is not allowed in function '%.100s' because it %s
unqualified exec is not allowed in function '%.100s' it %s
function '%.100s' uses import * and bare exec, which are illegal because it %s
contains a nested function with free variables
is a nested function
duplicate argument '%s' in function definition
import * only allowed at module level
genexpr
setcomp
invalid expression in parameter list
'return' with argument inside generator
dictcomp
name '%.400s' is used prior to global declaration
name '%.400s' is assigned to before global declaration
this compiler does not handle Suites
sys.version_info
Serial release number
'alpha', 'beta', 'candidate', or 'release'
releaselevel
Patch release number
Minor release number
Major release number
sys.flags
hash_randomization
bytes_warning
verbose
-t or -tt
tabcheck
ignore_environment
no_site
no_user_site
-O or -OO
optimize
interactive
inspect
division_new
division_warning
py3k_warning
call_tracing
gettrace
settrace
setrecursionlimit
getprofile
setprofile
getcheckinterval
setcheckinterval
setdefaultencoding
getwindowsversion
_getframe
getsizeof
getrecursionlimit
getrefcount
getfilesystemencoding
getdefaultencoding
exc_clear
exc_info
_current_frames
_clear_type_cache
callstats
sys.getwindowsversion
System product type
product_type
Bit mask identifying available product suites
suite_mask
Service Pack minor version number
service_pack_minor
Service Pack major version number
service_pack_major
Latest Service Pack installed on the system
service_pack
Operating system platform
Build number
Minor version number
Major version number
c_return
c_exception
exception
lost __builtin__
sys.exc_clear() not supported in 3.x; use except clauses
s:setdefaultencoding
i:setcheckinterval
recursion limit must be positive
i:setrecursionlimit
Type %.100s doesn't define __sizeof__
O|O:getsizeof
call stack is not deep enough
|i:_getframe
OO!:call_tracing
float_repr_style
version_info
warnoptions
dllhandle
byteorder
builtin_module_names
maxunicode
long_info
py3kwarning
maxsize
exec_prefix
api_version
_mercurial
subversion
CPython
hexversion
__excepthook__
__displayhook__
<stderr>
<stdout>
can't assign sys.path
can't create sys.path
sys.path.insert(0) failed
no mem for sys.path insertion
can't assign sys.argv
no mem for sys.argv
... truncated
traceback
tb_lineno
tb_lasti
tb_frame
tb_next
..\..\Python\traceback.c
          
  File "%.500s", line %d, in %.500s
Traceback (most recent call last):
tracebacklimit
E:\dev\python\2.7\src\cpython_2.7.5\PC\VS8.0\amd64\python27.pdb
QueryPerformanceCounter
QueryPerformanceFrequency
GetLocaleInfoA
GetSystemInfo
CloseHandle
UnmapViewOfFile
GetLastError
GetFileSize
MapViewOfFile
CreateFileMappingA
SetEndOfFile
SetFilePointer
FlushViewOfFile
DuplicateHandle
GetCurrentProcess
SetEnvironmentVariableA
GetCurrentDirectoryA
SetCurrentDirectoryA
SetEnvironmentVariableW
SetLastError
GetCurrentDirectoryW
SetCurrentDirectoryW
FindClose
FindFirstFileA
FindFirstFileW
GetFileAttributesExA
GetFileAttributesExW
GetFileInformationByHandle
GetFileType
GetFileAttributesA
GetFileAttributesW
SetFileAttributesA
SetFileAttributesW
FindNextFileA
FindNextFileW
GetFullPathNameA
GetFullPathNameW
CreateDirectoryA
CreateDirectoryW
MoveFileA
MoveFileW
RemoveDirectoryA
RemoveDirectoryW
DeleteFileA
DeleteFileW
SetFileTime
SystemTimeToFileTime
GetSystemTime
CreateFileA
CreateFileW
GenerateConsoleCtrlEvent
TerminateProcess
OpenProcess
CreateProcessA
GetModuleFileNameA
GetVersion
GetEnvironmentVariableA
GetExitCodeProcess
WaitForSingleObject
GetProcessTimes
CreatePipe
SetEvent
SetConsoleCtrlHandler
CreateEventA
ResetEvent
IsDBCSLeadByte
MultiByteToWideChar
WideCharToMultiByte
GetStdHandle
GetProcAddress
GetModuleHandleA
ExpandEnvironmentStringsW
GetModuleHandleW
OutputDebugStringA
FreeLibrary
FormatMessageA
LoadLibraryExA
SetErrorMode
LocalFree
OutputDebugStringW
GetConsoleOutputCP
GetConsoleCP
GetVersionExA
GetCurrentThreadId
HeapFree
GetProcessHeap
TlsAlloc
TlsFree
TlsSetValue
TlsGetValue
HeapAlloc
KERNEL32.dll
CharPrevA
LoadStringA
USER32.dll
RegCloseKey
RegConnectRegistryA
RegCreateKeyA
RegCreateKeyExA
RegDeleteKeyA
RegDeleteValueA
RegEnumKeyExA
RegEnumValueA
RegQueryInfoKeyA
RegFlushKey
RegLoadKeyA
RegOpenKeyExA
RegQueryValueA
RegQueryValueExA
RegSaveKeyA
RegSetValueA
RegSetValueExA
ADVAPI32.dll
ShellExecuteW
ShellExecuteA
SHELL32.dll
memmove
fprintf
isdigit
_finite
isalpha
islower
isupper
setlocale
localeconv
wcscoll
strcoll
strxfrm
_copysign
_time64
tolower
isalnum
realloc
isspace
clearerr
_gmtime64
_localtime64
sprintf
_fstat64i32
__iob_func
strerror
setvbuf
_setmode
_get_osfhandle
_stat64i32
__pioinfo
_environ
strncmp
wcsncmp
strrchr
_wcsicmp
wcsrchr
_commit
_spawnv
_spawnve
strncpy
strncat
_stricmp
_lseeki64
_open_osfhandle
_tempnam
tmpfile
_fdopen
toupper
_ctime64
_mktime64
_ftime64
strftime
asctime
_vsnprintf
_fileno
_wfopen
fsetpos
fgetpos
isxdigit
_mbstrlen
_heapmin
_locking
_getwch
_getche
_getwche
_putwch
_ungetch
__sys_errlist
__sys_nerr
strpbrk
strtoul
vfprintf
_endthreadex
_beginthreadex
MSVCR100.dll
_malloc_crt
_initterm
_initterm_e
_encoded_null
_amsg_exit
__C_specific_handler
__CppXcptFilter
__clean_type_info_names_internal
_unlock
__dllonexit
_onexit
EncodePointer
DecodePointer
GetTickCount
GetCurrentProcessId
GetSystemTimeAsFileTime
_getcwd
_isatty
_execve
_getpid
_putenv
_tzname
_daylight
_timezone
_strdup
_strnicmp
_unlink
python27.dll
PyAST_Compile
PyAST_FromNode
PyArena_AddPyObject
PyArena_Free
PyArena_Malloc
PyArena_New
PyArg_Parse
PyArg_ParseTuple
PyArg_ParseTupleAndKeywords
PyArg_UnpackTuple
PyArg_VaParse
PyArg_VaParseTupleAndKeywords
PyBaseObject_Type
PyBaseString_Type
PyBool_FromLong
PyBool_Type
PyBuffer_FillContiguousStrides
PyBuffer_FillInfo
PyBuffer_FromContiguous
PyBuffer_FromMemory
PyBuffer_FromObject
PyBuffer_FromReadWriteMemory
PyBuffer_FromReadWriteObject
PyBuffer_GetPointer
PyBuffer_IsContiguous
PyBuffer_New
PyBuffer_Release
PyBuffer_ToContiguous
PyBuffer_Type
PyByteArrayIter_Type
PyByteArray_AsString
PyByteArray_Concat
PyByteArray_Fini
PyByteArray_FromObject
PyByteArray_FromStringAndSize
PyByteArray_Init
PyByteArray_Resize
PyByteArray_Size
PyByteArray_Type
PyCFunction_Call
PyCFunction_ClearFreeList
PyCFunction_Fini
PyCFunction_GetFlags
PyCFunction_GetFunction
PyCFunction_GetSelf
PyCFunction_New
PyCFunction_NewEx
PyCFunction_Type
PyCObject_AsVoidPtr
PyCObject_FromVoidPtr
PyCObject_FromVoidPtrAndDesc
PyCObject_GetDesc
PyCObject_Import
PyCObject_SetVoidPtr
PyCObject_Type
PyCallIter_New
PyCallIter_Type
PyCallable_Check
PyCapsule_GetContext
PyCapsule_GetDestructor
PyCapsule_GetName
PyCapsule_GetPointer
PyCapsule_Import
PyCapsule_IsValid
PyCapsule_New
PyCapsule_SetContext
PyCapsule_SetDestructor
PyCapsule_SetName
PyCapsule_SetPointer
PyCapsule_Type
PyCell_Get
PyCell_New
PyCell_Set
PyCell_Type
PyClassMethod_New
PyClassMethod_Type
PyClass_IsSubclass
PyClass_New
PyClass_Type
PyCode_Addr2Line
PyCode_New
PyCode_NewEmpty
PyCode_Optimize
PyCode_Type
PyCodec_BackslashReplaceErrors
PyCodec_Decode
PyCodec_Decoder
PyCodec_Encode
PyCodec_Encoder
PyCodec_IgnoreErrors
PyCodec_IncrementalDecoder
PyCodec_IncrementalEncoder
PyCodec_LookupError
PyCodec_Register
PyCodec_RegisterError
PyCodec_ReplaceErrors
PyCodec_StreamReader
PyCodec_StreamWriter
PyCodec_StrictErrors
PyCodec_XMLCharRefReplaceErrors
PyComplex_AsCComplex
PyComplex_FromCComplex
PyComplex_FromDoubles
PyComplex_ImagAsDouble
PyComplex_RealAsDouble
PyComplex_Type
PyDescr_NewClassMethod
PyDescr_NewGetSet
PyDescr_NewMember
PyDescr_NewMethod
PyDescr_NewWrapper
PyDictItems_Type
PyDictIterItem_Type
PyDictIterKey_Type
PyDictIterValue_Type
PyDictKeys_Type
PyDictProxy_New
PyDictProxy_Type
PyDictValues_Type
PyDict_Clear
PyDict_Contains
PyDict_Copy
PyDict_DelItem
PyDict_DelItemString
PyDict_Fini
PyDict_GetItem
PyDict_GetItemString
PyDict_Items
PyDict_Keys
PyDict_Merge
PyDict_MergeFromSeq2
PyDict_New
PyDict_Next
PyDict_SetItem
PyDict_SetItemString
PyDict_Size
PyDict_Type
PyDict_Update
PyDict_Values
PyEllipsis_Type
PyEnum_Type
PyErr_BadArgument
PyErr_BadInternalCall
PyErr_CheckSignals
PyErr_Clear
PyErr_Display
PyErr_ExceptionMatches
PyErr_Fetch
PyErr_Format
PyErr_GivenExceptionMatches
PyErr_NewException
PyErr_NewExceptionWithDoc
PyErr_NoMemory
PyErr_NormalizeException
PyErr_Occurred
PyErr_Print
PyErr_PrintEx
PyErr_ProgramText
PyErr_Restore
PyErr_SetExcFromWindowsErr
PyErr_SetExcFromWindowsErrWithFilename
PyErr_SetExcFromWindowsErrWithFilenameObject
PyErr_SetExcFromWindowsErrWithUnicodeFilename
PyErr_SetFromErrno
PyErr_SetFromErrnoWithFilename
PyErr_SetFromErrnoWithFilenameObject
PyErr_SetFromErrnoWithUnicodeFilename
PyErr_SetFromWindowsErr
PyErr_SetFromWindowsErrWithFilename
PyErr_SetFromWindowsErrWithUnicodeFilename
PyErr_SetInterrupt
PyErr_SetNone
PyErr_SetObject
PyErr_SetString
PyErr_SyntaxLocation
PyErr_Warn
PyErr_WarnEx
PyErr_WarnExplicit
PyErr_WriteUnraisable
PyEval_AcquireLock
PyEval_AcquireThread
PyEval_CallFunction
PyEval_CallMethod
PyEval_CallObjectWithKeywords
PyEval_EvalCode
PyEval_EvalCodeEx
PyEval_EvalFrame
PyEval_EvalFrameEx
PyEval_GetBuiltins
PyEval_GetCallStats
PyEval_GetFrame
PyEval_GetFuncDesc
PyEval_GetFuncName
PyEval_GetGlobals
PyEval_GetLocals
PyEval_GetRestricted
PyEval_InitThreads
PyEval_MergeCompilerFlags
PyEval_ReInitThreads
PyEval_ReleaseLock
PyEval_ReleaseThread
PyEval_RestoreThread
PyEval_SaveThread
PyEval_SetProfile
PyEval_SetTrace
PyEval_ThreadsInitialized
PyExc_ArithmeticError
PyExc_AssertionError
PyExc_AttributeError
PyExc_BaseException
PyExc_BufferError
PyExc_BytesWarning
PyExc_DeprecationWarning
PyExc_EOFError
PyExc_EnvironmentError
PyExc_Exception
PyExc_FloatingPointError
PyExc_FutureWarning
PyExc_GeneratorExit
PyExc_IOError
PyExc_ImportError
PyExc_ImportWarning
PyExc_IndentationError
PyExc_IndexError
PyExc_KeyError
PyExc_KeyboardInterrupt
PyExc_LookupError
PyExc_MemoryError
PyExc_MemoryErrorInst
PyExc_NameError
PyExc_NotImplementedError
PyExc_OSError
PyExc_OverflowError
PyExc_PendingDeprecationWarning
PyExc_RecursionErrorInst
PyExc_ReferenceError
PyExc_RuntimeError
PyExc_RuntimeWarning
PyExc_StandardError
PyExc_StopIteration
PyExc_SyntaxError
PyExc_SyntaxWarning
PyExc_SystemError
PyExc_SystemExit
PyExc_TabError
PyExc_TypeError
PyExc_UnboundLocalError
PyExc_UnicodeDecodeError
PyExc_UnicodeEncodeError
PyExc_UnicodeError
PyExc_UnicodeTranslateError
PyExc_UnicodeWarning
PyExc_UserWarning
PyExc_ValueError
PyExc_Warning
PyExc_WindowsError
PyExc_ZeroDivisionError
PyFile_AsFile
PyFile_DecUseCount
PyFile_FromFile
PyFile_FromString
PyFile_GetLine
PyFile_IncUseCount
PyFile_Name
PyFile_SetBufSize
PyFile_SetEncoding
PyFile_SetEncodingAndErrors
PyFile_SoftSpace
PyFile_Type
PyFile_WriteObject
PyFile_WriteString
PyFloat_AsDouble
PyFloat_AsReprString
PyFloat_AsString
PyFloat_ClearFreeList
PyFloat_Fini
PyFloat_FromDouble
PyFloat_FromString
PyFloat_GetInfo
PyFloat_GetMax
PyFloat_GetMin
PyFloat_Type
PyFrame_BlockPop
PyFrame_BlockSetup
PyFrame_ClearFreeList
PyFrame_FastToLocals
PyFrame_Fini
PyFrame_GetLineNumber
PyFrame_LocalsToFast
PyFrame_New
PyFrame_Type
PyFrozenSet_New
PyFrozenSet_Type
PyFunction_GetClosure
PyFunction_GetCode
PyFunction_GetDefaults
PyFunction_GetGlobals
PyFunction_GetModule
PyFunction_New
PyFunction_SetClosure
PyFunction_SetDefaults
PyFunction_Type
PyFuture_FromAST
PyGC_Collect
PyGILState_Ensure
PyGILState_GetThisThreadState
PyGILState_Release
PyGen_NeedsFinalizing
PyGen_New
PyGen_Type
PyGetSetDescr_Type
PyImport_AddModule
PyImport_AppendInittab
PyImport_Cleanup
PyImport_ExecCodeModule
PyImport_ExecCodeModuleEx
PyImport_ExtendInittab
PyImport_FrozenModules
PyImport_GetImporter
PyImport_GetMagicNumber
PyImport_GetModuleDict
PyImport_Import
PyImport_ImportFrozenModule
PyImport_ImportModule
PyImport_ImportModuleLevel
PyImport_ImportModuleNoBlock
PyImport_Inittab
PyImport_ReloadModule
PyInstance_New
PyInstance_NewRaw
PyInstance_Type
PyInt_AsLong
PyInt_AsSsize_t
PyInt_AsUnsignedLongLongMask
PyInt_AsUnsignedLongMask
PyInt_ClearFreeList
PyInt_Fini
PyInt_FromLong
PyInt_FromSize_t
PyInt_FromSsize_t
PyInt_FromString
PyInt_FromUnicode
PyInt_GetMax
PyInt_Type
PyInterpreterState_Clear
PyInterpreterState_Delete
PyInterpreterState_Head
PyInterpreterState_New
PyInterpreterState_Next
PyInterpreterState_ThreadHead
PyIter_Next
PyList_Append
PyList_AsTuple
PyList_Fini
PyList_GetItem
PyList_GetSlice
PyList_Insert
PyList_New
PyList_Reverse
PyList_SetItem
PyList_SetSlice
PyList_Size
PyList_Sort
PyList_Type
PyLong_AsDouble
PyLong_AsLong
PyLong_AsLongAndOverflow
PyLong_AsLongLong
PyLong_AsLongLongAndOverflow
PyLong_AsSsize_t
PyLong_AsUnsignedLong
PyLong_AsUnsignedLongLong
PyLong_AsUnsignedLongLongMask
PyLong_AsUnsignedLongMask
PyLong_AsVoidPtr
PyLong_FromDouble
PyLong_FromLong
PyLong_FromLongLong
PyLong_FromSize_t
PyLong_FromSsize_t
PyLong_FromString
PyLong_FromUnicode
PyLong_FromUnsignedLong
PyLong_FromUnsignedLongLong
PyLong_FromVoidPtr
PyLong_GetInfo
PyLong_Type
PyMapping_Check
PyMapping_GetItemString
PyMapping_HasKey
PyMapping_HasKeyString
PyMapping_Length
PyMapping_SetItemString
PyMapping_Size
PyMarshal_ReadLastObjectFromFile
PyMarshal_ReadLongFromFile
PyMarshal_ReadObjectFromFile
PyMarshal_ReadObjectFromString
PyMarshal_ReadShortFromFile
PyMarshal_WriteLongToFile
PyMarshal_WriteObjectToFile
PyMarshal_WriteObjectToString
PyMem_Free
PyMem_Malloc
PyMem_Realloc
PyMemberDescr_Type
PyMember_Get
PyMember_GetOne
PyMember_Set
PyMember_SetOne
PyMemoryView_FromBuffer
PyMemoryView_FromObject
PyMemoryView_GetContiguous
PyMemoryView_Type
PyMethod_Class
PyMethod_ClearFreeList
PyMethod_Fini
PyMethod_Function
PyMethod_New
PyMethod_Self
PyMethod_Type
PyModule_AddIntConstant
PyModule_AddObject
PyModule_AddStringConstant
PyModule_GetDict
PyModule_GetFilename
PyModule_GetName
PyModule_New
PyModule_Type
PyNode_AddChild
PyNode_Compile
PyNode_Free
PyNode_ListTree
PyNode_New
PyNullImporter_Type
PyNumber_Absolute
PyNumber_Add
PyNumber_And
PyNumber_AsSsize_t
PyNumber_Check
PyNumber_Coerce
PyNumber_CoerceEx
PyNumber_Divide
PyNumber_Divmod
PyNumber_Float
PyNumber_FloorDivide
PyNumber_InPlaceAdd
PyNumber_InPlaceAnd
PyNumber_InPlaceDivide
PyNumber_InPlaceFloorDivide
PyNumber_InPlaceLshift
PyNumber_InPlaceMultiply
PyNumber_InPlaceOr
PyNumber_InPlacePower
PyNumber_InPlaceRemainder
PyNumber_InPlaceRshift
PyNumber_InPlaceSubtract
PyNumber_InPlaceTrueDivide
PyNumber_InPlaceXor
PyNumber_Index
PyNumber_Int
PyNumber_Invert
PyNumber_Long
PyNumber_Lshift
PyNumber_Multiply
PyNumber_Negative
PyNumber_Or
PyNumber_Positive
PyNumber_Power
PyNumber_Remainder
PyNumber_Rshift
PyNumber_Subtract
PyNumber_ToBase
PyNumber_TrueDivide
PyNumber_Xor
PyOS_AfterFork
PyOS_FiniInterrupts
PyOS_InitInterrupts
PyOS_InputHook
PyOS_InterruptOccurred
PyOS_Readline
PyOS_ReadlineFunctionPointer
PyOS_ascii_atof
PyOS_ascii_formatd
PyOS_ascii_strtod
PyOS_double_to_string
PyOS_getsig
PyOS_mystricmp
PyOS_mystrnicmp
PyOS_setsig
PyOS_snprintf
PyOS_string_to_double
PyOS_strtol
PyOS_strtoul
PyOS_vsnprintf
PyObject_AsCharBuffer
PyObject_AsFileDescriptor
PyObject_AsReadBuffer
PyObject_AsWriteBuffer
PyObject_Call
PyObject_CallFunction
PyObject_CallFunctionObjArgs
PyObject_CallMethod
PyObject_CallMethodObjArgs
PyObject_CallObject
PyObject_CheckReadBuffer
PyObject_ClearWeakRefs
PyObject_Cmp
PyObject_Compare
PyObject_CopyData
PyObject_DelItem
PyObject_DelItemString
PyObject_Dir
PyObject_Format
PyObject_Free
PyObject_GC_Del
PyObject_GC_Track
PyObject_GC_UnTrack
PyObject_GenericGetAttr
PyObject_GenericSetAttr
PyObject_GetAttr
PyObject_GetAttrString
PyObject_GetBuffer
PyObject_GetItem
PyObject_GetIter
PyObject_HasAttr
PyObject_HasAttrString
PyObject_Hash
PyObject_HashNotImplemented
PyObject_Init
PyObject_InitVar
PyObject_IsInstance
PyObject_IsSubclass
PyObject_IsTrue
PyObject_Length
PyObject_Malloc
PyObject_Not
PyObject_Print
PyObject_Realloc
PyObject_Repr
PyObject_RichCompare
PyObject_RichCompareBool
PyObject_SelfIter
PyObject_SetAttr
PyObject_SetAttrString
PyObject_SetItem
PyObject_Size
PyObject_Str
PyObject_Type
PyObject_Unicode
PyParser_ASTFromFile
PyParser_ASTFromString
PyParser_ParseFile
PyParser_ParseFileFlags
PyParser_ParseFileFlagsEx
PyParser_ParseString
PyParser_ParseStringFlags
PyParser_ParseStringFlagsFilename
PyParser_ParseStringFlagsFilenameEx
PyParser_SetError
PyParser_SimpleParseFile
PyParser_SimpleParseFileFlags
PyParser_SimpleParseString
PyParser_SimpleParseStringFlags
PyProperty_Type
PyRange_Type
PyReversed_Type
PyRun_AnyFile
PyRun_AnyFileEx
PyRun_AnyFileExFlags
PyRun_AnyFileFlags
PyRun_File
PyRun_FileEx
PyRun_FileExFlags
PyRun_FileFlags
PyRun_InteractiveLoop
PyRun_InteractiveLoopFlags
PyRun_InteractiveOne
PyRun_InteractiveOneFlags
PyRun_SimpleFile
PyRun_SimpleFileEx
PyRun_SimpleFileExFlags
PyRun_SimpleString
PyRun_SimpleStringFlags
PyRun_String
PyRun_StringFlags
PySTEntry_Type
PyST_GetScope
PySeqIter_New
PySeqIter_Type
PySequence_Check
PySequence_Concat
PySequence_Contains
PySequence_Count
PySequence_DelItem
PySequence_DelSlice
PySequence_Fast
PySequence_GetItem
PySequence_GetSlice
PySequence_In
PySequence_InPlaceConcat
PySequence_InPlaceRepeat
PySequence_Index
PySequence_Length
PySequence_List
PySequence_Repeat
PySequence_SetItem
PySequence_SetSlice
PySequence_Size
PySequence_Tuple
PySet_Add
PySet_Clear
PySet_Contains
PySet_Discard
PySet_Fini
PySet_New
PySet_Pop
PySet_Size
PySet_Type
PySlice_GetIndices
PySlice_GetIndicesEx
PySlice_New
PySlice_Type
PyStaticMethod_New
PyStaticMethod_Type
PyString_AsDecodedObject
PyString_AsDecodedString
PyString_AsEncodedObject
PyString_AsEncodedString
PyString_AsString
PyString_AsStringAndSize
PyString_Concat
PyString_ConcatAndDel
PyString_Decode
PyString_DecodeEscape
PyString_Encode
PyString_Fini
PyString_Format
PyString_FromFormat
PyString_FromFormatV
PyString_FromString
PyString_FromStringAndSize
PyString_InternFromString
PyString_InternImmortal
PyString_InternInPlace
PyString_Repr
PyString_Size
PyString_Type
PyStructSequence_InitType
PyStructSequence_New
PySuper_Type
PySymtable_Build
PySymtable_Free
PySymtable_Lookup
PySys_AddWarnOption
PySys_GetFile
PySys_GetObject
PySys_HasWarnOptions
PySys_ResetWarnOptions
PySys_SetArgv
PySys_SetArgvEx
PySys_SetObject
PySys_SetPath
PySys_WriteStderr
PySys_WriteStdout
PyThreadState_Clear
PyThreadState_Delete
PyThreadState_DeleteCurrent
PyThreadState_Get
PyThreadState_GetDict
PyThreadState_New
PyThreadState_Next
PyThreadState_SetAsyncExc
PyThreadState_Swap
PyThread_ReInitTLS
PyThread_acquire_lock
PyThread_allocate_lock
PyThread_create_key
PyThread_delete_key
PyThread_delete_key_value
PyThread_exit_thread
PyThread_free_lock
PyThread_get_key_value
PyThread_get_stacksize
PyThread_get_thread_ident
PyThread_init_thread
PyThread_release_lock
PyThread_set_key_value
PyThread_set_stacksize
PyThread_start_new_thread
PyToken_OneChar
PyToken_ThreeChars
PyToken_TwoChars
PyTraceBack_Here
PyTraceBack_Print
PyTraceBack_Type
PyTuple_ClearFreeList
PyTuple_Fini
PyTuple_GetItem
PyTuple_GetSlice
PyTuple_New
PyTuple_Pack
PyTuple_SetItem
PyTuple_Size
PyTuple_Type
PyType_ClearCache
PyType_GenericAlloc
PyType_GenericNew
PyType_IsSubtype
PyType_Modified
PyType_Ready
PyType_Type
PyUnicodeDecodeError_Create
PyUnicodeDecodeError_GetEncoding
PyUnicodeDecodeError_GetEnd
PyUnicodeDecodeError_GetObject
PyUnicodeDecodeError_GetReason
PyUnicodeDecodeError_GetStart
PyUnicodeDecodeError_SetEnd
PyUnicodeDecodeError_SetReason
PyUnicodeDecodeError_SetStart
PyUnicodeEncodeError_Create
PyUnicodeEncodeError_GetEncoding
PyUnicodeEncodeError_GetEnd
PyUnicodeEncodeError_GetObject
PyUnicodeEncodeError_GetReason
PyUnicodeEncodeError_GetStart
PyUnicodeEncodeError_SetEnd
PyUnicodeEncodeError_SetReason
PyUnicodeEncodeError_SetStart
PyUnicodeTranslateError_Create
PyUnicodeTranslateError_GetEnd
PyUnicodeTranslateError_GetObject
PyUnicodeTranslateError_GetReason
PyUnicodeTranslateError_GetStart
PyUnicodeTranslateError_SetEnd
PyUnicodeTranslateError_SetReason
PyUnicodeTranslateError_SetStart
PyUnicodeUCS2_AsASCIIString
PyUnicodeUCS2_AsCharmapString
PyUnicodeUCS2_AsEncodedObject
PyUnicodeUCS2_AsEncodedString
PyUnicodeUCS2_AsLatin1String
PyUnicodeUCS2_AsRawUnicodeEscapeString
PyUnicodeUCS2_AsUTF16String
PyUnicodeUCS2_AsUTF32String
PyUnicodeUCS2_AsUTF8String
PyUnicodeUCS2_AsUnicode
PyUnicodeUCS2_AsUnicodeEscapeString
PyUnicodeUCS2_AsWideChar
PyUnicodeUCS2_ClearFreelist
PyUnicodeUCS2_Compare
PyUnicodeUCS2_Concat
PyUnicodeUCS2_Contains
PyUnicodeUCS2_Count
PyUnicodeUCS2_Decode
PyUnicodeUCS2_DecodeASCII
PyUnicodeUCS2_DecodeCharmap
PyUnicodeUCS2_DecodeLatin1
PyUnicodeUCS2_DecodeRawUnicodeEscape
PyUnicodeUCS2_DecodeUTF16
PyUnicodeUCS2_DecodeUTF16Stateful
PyUnicodeUCS2_DecodeUTF32
PyUnicodeUCS2_DecodeUTF32Stateful
PyUnicodeUCS2_DecodeUTF8
PyUnicodeUCS2_DecodeUTF8Stateful
PyUnicodeUCS2_DecodeUnicodeEscape
PyUnicodeUCS2_Encode
PyUnicodeUCS2_EncodeASCII
PyUnicodeUCS2_EncodeCharmap
PyUnicodeUCS2_EncodeDecimal
PyUnicodeUCS2_EncodeLatin1
PyUnicodeUCS2_EncodeRawUnicodeEscape
PyUnicodeUCS2_EncodeUTF16
PyUnicodeUCS2_EncodeUTF32
PyUnicodeUCS2_EncodeUTF8
PyUnicodeUCS2_EncodeUnicodeEscape
PyUnicodeUCS2_Find
PyUnicodeUCS2_Format
PyUnicodeUCS2_FromEncodedObject
PyUnicodeUCS2_FromFormat
PyUnicodeUCS2_FromFormatV
PyUnicodeUCS2_FromObject
PyUnicodeUCS2_FromOrdinal
PyUnicodeUCS2_FromString
PyUnicodeUCS2_FromStringAndSize
PyUnicodeUCS2_FromUnicode
PyUnicodeUCS2_FromWideChar
PyUnicodeUCS2_GetDefaultEncoding
PyUnicodeUCS2_GetMax
PyUnicodeUCS2_GetSize
PyUnicodeUCS2_Join
PyUnicodeUCS2_Partition
PyUnicodeUCS2_RPartition
PyUnicodeUCS2_RSplit
PyUnicodeUCS2_Replace
PyUnicodeUCS2_Resize
PyUnicodeUCS2_RichCompare
PyUnicodeUCS2_SetDefaultEncoding
PyUnicodeUCS2_Split
PyUnicodeUCS2_Splitlines
PyUnicodeUCS2_Tailmatch
PyUnicodeUCS2_Translate
PyUnicodeUCS2_TranslateCharmap
PyUnicode_AsMBCSString
PyUnicode_BuildEncodingMap
PyUnicode_DecodeMBCS
PyUnicode_DecodeMBCSStateful
PyUnicode_DecodeUTF7
PyUnicode_DecodeUTF7Stateful
PyUnicode_EncodeMBCS
PyUnicode_EncodeUTF7
PyUnicode_Type
PyWeakref_GetObject
PyWeakref_NewProxy
PyWeakref_NewRef
PyWrapperDescr_Type
PyWrapper_New
Py_AddPendingCall
Py_AtExit
Py_BuildValue
Py_BytesWarningFlag
Py_CompileString
Py_CompileStringFlags
Py_DebugFlag
Py_DecRef
Py_DivisionWarningFlag
Py_DontWriteBytecodeFlag
Py_EndInterpreter
Py_Exit
Py_FatalError
Py_FdIsInteractive
Py_FileSystemDefaultEncoding
Py_Finalize
Py_FindMethod
Py_FindMethodInChain
Py_FlushLine
Py_FrozenFlag
Py_GetBuildInfo
Py_GetCompiler
Py_GetCopyright
Py_GetExecPrefix
Py_GetPath
Py_GetPlatform
Py_GetPrefix
Py_GetProgramFullPath
Py_GetProgramName
Py_GetPythonHome
Py_GetRecursionLimit
Py_GetVersion
Py_HashRandomizationFlag
Py_IgnoreEnvironmentFlag
Py_IncRef
Py_InitModule4_64
Py_Initialize
Py_InitializeEx
Py_InspectFlag
Py_InteractiveFlag
Py_IsInitialized
Py_Main
Py_MakePendingCalls
Py_NewInterpreter
Py_NoSiteFlag
Py_NoUserSiteDirectory
Py_OptimizeFlag
Py_Py3kWarningFlag
Py_ReprEnter
Py_ReprLeave
Py_SetProgramName
Py_SetPythonHome
Py_SetRecursionLimit
Py_SubversionRevision
Py_SubversionShortBranch
Py_SymtableString
Py_TabcheckFlag
Py_UnicodeFlag
Py_UseClassExceptionsFlag
Py_VaBuildValue
Py_VerboseFlag
_PyArg_NoKeywords
_PyArg_ParseTupleAndKeywords_SizeT
_PyArg_ParseTuple_SizeT
_PyArg_Parse_SizeT
_PyArg_VaParseTupleAndKeywords_SizeT
_PyArg_VaParse_SizeT
_PyBuiltin_Init
_PyByteArray_empty_string
_PyBytes_FormatAdvanced
_PyCode_CheckLineNumber
_PyCodec_Lookup
_PyComplex_FormatAdvanced
_PyDict_Contains
_PyDict_MaybeUntrack
_PyDict_NewPresized
_PyDict_Next
_PyErr_BadInternalCall
_PyEval_CallTracing
_PyEval_SliceIndex
_PyExc_Fini
_PyExc_Init
_PyFloat_FormatAdvanced
_PyFloat_Init
_PyFloat_Pack4
_PyFloat_Pack8
_PyFloat_Unpack4
_PyFloat_Unpack8
_PyFrame_Init
_PyImportHooks_Init
_PyImport_AcquireLock
_PyImport_FindExtension
_PyImport_FindModule
_PyImport_Fini
_PyImport_FixupExtension
_PyImport_Init
_PyImport_IsScript
_PyImport_ReInitLock
_PyImport_ReleaseLock
_PyInstance_Lookup
_PyInt_AsInt
_PyInt_Format
_PyInt_FormatAdvanced
_PyInt_Init
_PyList_Extend
_PyLong_AsByteArray
_PyLong_AsInt
_PyLong_Copy
_PyLong_DigitValue
_PyLong_Format
_PyLong_FormatAdvanced
_PyLong_Frexp
_PyLong_FromByteArray
_PyLong_Init
_PyLong_New
_PyLong_NumBits
_PyLong_Sign
_PyModule_Clear
_PyNumber_ConvertIntegralToInt
_PyOS_ReadlineTState
_PyOS_URandom
_PyObject_CallFunction_SizeT
_PyObject_CallMethod_SizeT
_PyObject_Dump
_PyObject_GC_Malloc
_PyObject_GC_New
_PyObject_GC_NewVar
_PyObject_GC_Resize
_PyObject_GenericGetAttrWithDict
_PyObject_GenericSetAttrWithDict
_PyObject_GetDictPtr
_PyObject_LengthHint
_PyObject_LookupSpecial
_PyObject_New
_PyObject_NewVar
_PyObject_NextNotImplemented
_PyObject_RealIsInstance
_PyObject_RealIsSubclass
_PyObject_Str
_PyParser_Grammar
_PyParser_TokenNames
_PyRandom_Init
_PySequence_IterSearch
_PySet_Next
_PySet_NextEntry
_PySet_Update
_PySlice_FromIndices
_PyString_Eq
_PyString_FormatLong
_PyString_InsertThousandsGrouping
_PyString_Join
_PyString_Resize
_PySys_Init
_PyThreadState_Current
_PyThreadState_GetFrame
_PyThreadState_Init
_PyThreadState_Prealloc
_PyThread_CurrentFrames
_PyTime_DoubleToTimet
_PyTime_FloatTime
_PyTrash_delete_later
_PyTrash_delete_nesting
_PyTrash_deposit_object
_PyTrash_destroy_chain
_PyTrash_thread_deposit_object
_PyTrash_thread_destroy_chain
_PyTuple_MaybeUntrack
_PyTuple_Resize
_PyType_Lookup
_PyUnicodeUCS2_AsDefaultEncodedString
_PyUnicodeUCS2_IsAlpha
_PyUnicodeUCS2_IsDecimalDigit
_PyUnicodeUCS2_IsDigit
_PyUnicodeUCS2_IsLinebreak
_PyUnicodeUCS2_IsLowercase
_PyUnicodeUCS2_IsNumeric
_PyUnicodeUCS2_IsTitlecase
_PyUnicodeUCS2_IsUppercase
_PyUnicodeUCS2_IsWhitespace
_PyUnicodeUCS2_ToDecimalDigit
_PyUnicodeUCS2_ToDigit
_PyUnicodeUCS2_ToLowercase
_PyUnicodeUCS2_ToNumeric
_PyUnicodeUCS2_ToTitlecase
_PyUnicodeUCS2_ToUppercase
_PyUnicode_FormatAdvanced
_PyUnicode_XStrip
_PyWarnings_Init
_PyWeakref_CallableProxyType
_PyWeakref_ClearRef
_PyWeakref_GetWeakrefCount
_PyWeakref_ProxyType
_PyWeakref_RefType
_Py_BuildValue_SizeT
_Py_CheckInterval
_Py_CheckRecursionLimit
_Py_CheckRecursiveCall
_Py_DisplaySourceLine
_Py_EllipsisObject
_Py_HashDouble
_Py_HashPointer
_Py_HashSecret
_Py_Mangle
_Py_NoneStruct
_Py_NotImplementedStruct
_Py_PackageContext
_Py_QnewFlag
_Py_ReleaseInternedStrings
_Py_SwappedOp
_Py_Ticker
_Py_TrueStruct
_Py_VaBuildValue_SizeT
_Py_ZeroStruct
_Py_add_one_to_index_C
_Py_add_one_to_index_F
_Py_ascii_whitespace
_Py_c_abs
_Py_c_diff
_Py_c_neg
_Py_c_pow
_Py_c_prod
_Py_c_quot
_Py_c_sum
_Py_ctype_table
_Py_ctype_tolower
_Py_ctype_toupper
_Py_dg_dtoa
_Py_dg_freedtoa
_Py_dg_strtod
_Py_double_round
_Py_hgidentifier
_Py_hgversion
_Py_parse_inf_or_nan
_Py_svnversion
default
16:59:14
Jul  3 2013
%s%s%s, %.20s, %.9s
Unversioned directory
bisect(a, x[, lo[, hi]]) -> index
bisect_right(a, x[, lo[, hi]]) -> index
Return the index where to insert item x in list a, assuming a is sorted.
The return value i is such that all e in a[:i] have e <= x, and all e in
a[i:] have e > x.  So if x already appears in the list, i points just
beyond the rightmost x already there
Optional args lo (default 0) and hi (default len(a)) bound the
slice of a to be searched.
insort(a, x[, lo[, hi]])
insort_right(a, x[, lo[, hi]])
Insert item x in list a, and keep it sorted assuming a is sorted.
If x is already in a, insert it to the right of the rightmost x.
Optional args lo (default 0) and hi (default len(a)) bound the
slice of a to be searched.
bisect_left(a, x[, lo[, hi]]) -> index
Return the index where to insert item x in list a, assuming a is sorted.
The return value i is such that all e in a[:i] have e < x, and all e in
a[i:] have e >= x.  So if x already appears in the list, i points just
before the leftmost x already there.
Optional args lo (default 0) and hi (default len(a)) bound the
slice of a to be searched.
insort_left(a, x[, lo[, hi]])
Insert item x in list a, and keep it sorted assuming a is sorted.
If x is already in a, insert it to the left of the leftmost x.
Optional args lo (default 0) and hi (default len(a)) bound the
slice of a to be searched.
Bisection algorithms.
This module provides support for maintaining a list in sorted order without
having to sort the list after each insertion. For long lists of items with
expensive comparison operations, this can be an improvement over the more
common approach.
register(search_function)
Register a codec search function. Search functions are expected to take
one argument, the encoding name in all lower case letters, and return
a tuple of functions (encoder, decoder, stream_reader, stream_writer)
(or a CodecInfo object).
lookup(encoding) -> CodecInfo
Looks up a codec tuple in the Python codec registry and returns
a CodecInfo object.
encode(obj, [encoding[,errors]]) -> object
Encodes obj using the codec registered for encoding. encoding defaults
to the default encoding. errors may be given to set a different error
handling scheme. Default is 'strict' meaning that encoding errors raise
a ValueError. Other possible values are 'ignore', 'replace' and
'xmlcharrefreplace' as well as any other name registered with
codecs.register_error that can handle ValueErrors.
decode(obj, [encoding[,errors]]) -> object
Decodes obj using the codec registered for encoding. encoding defaults
to the default encoding. errors may be given to set a different error
handling scheme. Default is 'strict' meaning that encoding errors raise
a ValueError. Other possible values are 'ignore' and 'replace'
as well as any other name registered with codecs.register_error that is
able to handle ValueErrors.
register_error(errors, handler)
Register the specified error handler under the name
errors. handler must be a callable object, that
will be called with an exception instance containing
information about the location of the encoding/decoding
error and must return a (replacement, new position) tuple.
lookup_error(errors) -> handler
Return the error handler for the specified error handling name
or raise a LookupError, if no handler exists under this name.
Remove and return the rightmost element.
Remove and return the leftmost element.
Add an element to the right side of the deque.
Add an element to the left side of the deque.
Extend the right side of the deque with elements from the iterable
Extend the left side of the deque with elements from the iterable
Rotate the deque n steps to the right (default n=1).  If n is negative, rotates left.
D.reverse() -- reverse *IN PLACE*
D.count(value) -> integer -- return number of occurrences of value
D.remove(value) -- remove first occurrence of value.
Remove all elements from the deque.
Return a shallow copy of a deque.
Return state information for pickling.
D.__sizeof__() -- size of D in memory, in bytes
D.__reversed__() -- return a reverse iterator over the deque
deque([iterable[, maxlen]]) --> deque object
Build an ordered collection with optimized access from its endpoints.
Private method returning an estimate of len(list(it)).
__missing__(key) # Called by __getitem__ for missing key; pseudo-code:
  if self.default_factory is None: raise KeyError((key,))
  self[key] = value = self.default_factory()
  return value
D.copy() -> a shallow copy of D.
defaultdict(default_factory) --> dict with default factory
The default factory is called without arguments to produce
a new value when a key is not present, in __getitem__ only.
A defaultdict compares equal to a dict with the same items.
High performance data structures.
- deque:        ordered collection accessible from endpoints only
- defaultdict:  dict subclass with a default value factory
CSV dialect
The Dialect type records CSV parsing and generation options.
CSV reader
Reader objects are responsible for reading and parsing tabular data
in CSV format.
writerow(sequence)
Construct and write a CSV record from a sequence of fields.  Non-string
elements will be converted to string.
writerows(sequence of sequences)
Construct and write a series of sequences to a csv file.  Non-string
elements will be converted to string.
CSV writer
Writer objects are responsible for generating tabular data
in CSV format from sequence input.
CSV parsing and writing.
This module provides classes that assist in the reading and writing
of Comma Separated Value (CSV) files, and implements the interface
described by PEP 305.  Although many CSV files are simple to parse,
the format is not formally defined by a stable specification and
is subtle enough that parsing lines of a CSV file with something
like line.split(",") is bound to fail.  The module supports three
basic APIs: reading, writing, and registration of dialects.
DIALECT REGISTRATION:
Readers and writers support a dialect argument, which is a convenient
handle on a group of settings.  When the dialect argument is a string,
it identifies one of the dialects previously registered with the module.
If it is a class or instance, the attributes of the argument are used as
the settings for the reader or writer:
    class excel:
        delimiter = ','
        quotechar = '"'
        escapechar = None
        doublequote = True
        skipinitialspace = False
        lineterminator = '\r\n'
        quoting = QUOTE_MINIMAL
SETTINGS:
    * quotechar - specifies a one-character string to use as the 
        quoting character.  It defaults to '"'.
    * delimiter - specifies a one-character string to use as the 
        field separator.  It defaults to ','.
    * skipinitialspace - specifies how to interpret whitespace which
        immediately follows a delimiter.  It defaults to False, which
        means that whitespace immediately following a delimiter is part
        of the following field.
    * lineterminator -  specifies the character sequence which should 
        terminate rows.
    * quoting - controls when quotes should be generated by the writer.
        It can take on any of the following module constants:
        csv.QUOTE_MINIMAL means only when required, for example, when a
            field contains either the quotechar or the delimiter
        csv.QUOTE_ALL means that quotes are always placed around fields.
        csv.QUOTE_NONNUMERIC means that quotes are always placed around
            fields which do not parse as integers or floating point
            numbers.
        csv.QUOTE_NONE means that quotes are never placed around fields.
    * escapechar - specifies a one-character string used to escape 
        the delimiter when quoting is set to QUOTE_NONE.
    * doublequote - controls the handling of quotes inside fields.  When
        True, two consecutive quotes are interpreted as one during read,
        and when writing, each quote character embedded in the data is
        written as two quotes
    csv_reader = reader(iterable [, dialect='excel']
                        [optional keyword args])
    for row in csv_reader:
        process(row)
The "iterable" argument can be any object that returns a line
of input for each iteration, such as a file object or a list.  The
optional "dialect" parameter is discussed below.  The function
also accepts optional keyword arguments which override settings
provided by the dialect.
The returned object is an iterator.  Each iteration returns a row
of the CSV file (which can span multiple input lines):
    csv_writer = csv.writer(fileobj [, dialect='excel']
                            [optional keyword args])
    for row in sequence:
        csv_writer.writerow(row)
    [or]
    csv_writer = csv.writer(fileobj [, dialect='excel']
                            [optional keyword args])
    csv_writer.writerows(rows)
The "fileobj" argument can be any object that supports the file API.
Return a list of all know dialect names.
    names = csv.list_dialects()
Return the dialect instance associated with name.
    dialect = csv.get_dialect(name)
Create a mapping from a string name to a dialect class.
    dialect = csv.register_dialect(name, dialect)
Delete the name/dialect mapping associated with a string name.
    csv.unregister_dialect(name)
Sets an upper limit on parsed fields.
    csv.field_size_limit([limit])
Returns old limit. If limit is not given, no new limit is set and
the old limit is returned
reduce(function, sequence[, initial]) -> value
Apply a function of two arguments cumulatively to the items of a sequence,
from left to right, so as to reduce the sequence to a single value.
For example, reduce(lambda x, y: x+y, [1, 2, 3, 4, 5]) calculates
((((1+2)+3)+4)+5).  If initial is present, it is placed before the items
of the sequence in the calculation, and serves as a default when the
sequence is empty.
partial(func, *args, **keywords) - new function with partial application
    of the given arguments and keywords.
Tools that operate on functions.
heappush(heap, item) -> None. Push item onto heap, maintaining the heap invariant.
Pop the smallest item off the heap, maintaining the heap invariant.
heapreplace(heap, item) -> value. Pop and return the current smallest value, and add the new item.
This is more efficient than heappop() followed by heappush(), and can be
more appropriate when using a fixed-size heap.  Note that the value
returned may be larger than item!  That constrains reasonable uses of
this routine unless written as part of a conditional replacement:
    if item > heap[0]:
        item = heapreplace(heap, item)
heappushpop(heap, item) -> value. Push item on the heap, then pop and return the smallest item
from the heap. The combined action runs more efficiently than
heappush() followed by a separate call to heappop().
Transform list into a heap, in-place, in O(len(heap)) time.
Find the n largest elements in a dataset.
Equivalent to:  sorted(iterable, reverse=True)[:n]
Find the n smallest elements in a dataset.
Equivalent to:  sorted(iterable)[:n]
Heap queue algorithm (a.k.a. priority queue).
Heaps are arrays for which a[k] <= a[2*k+1] and a[k] <= a[2*k+2] for
all k, counting elements from 0.  For the sake of comparison,
non-existing elements are considered to be infinite.  The interesting
property of a heap is that a[0] is always its smallest element.
heap = []            # creates an empty heap
heappush(heap, item) # pushes a new item on the heap
item = heappop(heap) # pops the smallest item from the heap
item = heap[0]       # smallest item on the heap without popping it
heapify(x)           # transforms list into a heap, in-place, in linear time
item = heapreplace(heap, item) # pops and returns smallest item, and adds
                               # new item; the heap size is unchanged
Our API differs from textbook heap algorithms as follows:
- We use 0-based indexing.  This makes the relationship between the
  index for a node and the indexes for its children slightly less
  obvious, but is more suitable since Python uses 0-based indexing.
- Our heappop() method returns the smallest item, not the largest.
These two make it possible to view the heap as a regular Python list
without surprises: heap[0] is the smallest item, and heap.sort()
maintains the heap invariant!
Heap queues
[explanation by Fran
ois Pinard]
Heaps are arrays for which a[k] <= a[2*k+1] and a[k] <= a[2*k+2] for
all k, counting elements from 0.  For the sake of comparison,
non-existing elements are considered to be infinite.  The interesting
property of a heap is that a[0] is always its smallest element.
The strange invariant above is meant to be an efficient memory
representation for a tournament.  The numbers below are `k', not a[k]:
                                   0
                  1                                 2
          3               4                5               6
      7       8       9       10      11      12      13      14
    15 16   17 18   19 20   21 22   23 24   25 26   27 28   29 30
In the tree above, each cell `k' is topping `2*k+1' and `2*k+2'.  In
an usual binary tournament we see in sports, each cell is the winner
over the two cells it tops, and we can trace the winner down the tree
to see all opponents s/he had.  However, in many computer applications
of such tournaments, we do not need to trace the history of a winner.
To be more memory efficient, when a winner is promoted, we try to
replace it by something else at a lower level, and the rule becomes
that a cell and the two cells it tops contain three different items,
but the top cell "wins" over the two topped cells.
If this heap invariant is protected at all time, index 0 is clearly
the overall winner.  The simplest algorithmic way to remove it and
find the "next" winner is to move some loser (let's say cell 30 in the
diagram above) into the 0 position, and then percolate this new 0 down
the tree, exchanging values, until the invariant is re-established.
This is clearly logarithmic on the total number of items in the tree.
By iterating over all items, you get an O(n ln n) sort.
A nice feature of this sort is that you can efficiently insert new
items while the sort is going on, provided that the inserted items are
not "better" than the last 0'th element you extracted.  This is
especially useful in simulation contexts, where the tree holds all
incoming events, and the "win" condition means the smallest scheduled
time.  When an event schedule other events for execution, they are
scheduled into the future, so they can easily go into the heap.  So, a
heap is a good structure for implementing schedulers (this is what I
used for my MIDI sequencer :-).
Various structures for implementing schedulers have been extensively
studied, and heaps are good for this, as they are reasonably speedy,
the speed is almost constant, and the worst case is not much different
than the average case.  However, there are other representations which
are more efficient overall, yet the worst cases might be terrible.
Heaps are also very useful in big disk sorts.  You most probably all
know that a big sort implies producing "runs" (which are pre-sorted
sequences, which size is usually related to the amount of CPU memory),
followed by a merging passes for these runs, which merging is often
very cleverly organised[1].  It is very important that the initial
sort produces the longest runs possible.  Tournaments are a good way
to that.  If, using all the memory available to hold a tournament, you
replace and percolate items that happen to fit the current run, you'll
produce runs which are twice the size of the memory for random input,
and much better for input fuzzily ordered.
Moreover, if you output the 0'th item on disk and get an input which
may not fit in the current tournament (because the value "wins" over
the last output value), it cannot fit in the heap, so the size of the
heap decreases.  The freed memory could be cleverly reused immediately
for progressively building a second heap, which grows at exactly the
same rate the first heap is melting.  When the first heap completely
vanishes, you switch heaps and start a new run.  Clever and quite
effective!
In a word, heaps are useful memory structures to know.  I use them in
a few applications, and I think it is good to keep a `heap' module
around. :-)
--------------------
[1] The disk balancing algorithms which are current, nowadays, are
more annoying than clever, and this is a consequence of the seeking
capabilities of the disks.  On devices which cannot seek, like big
tape drives, the story was quite different, and one had to be very
clever to ensure (far in advance) that each tape movement will be the
most effective possible (that is, will best participate at
"progressing" the merge).  Some tapes were even able to read
backwards, and this was also used to avoid the rewinding time.
Believe me, real good tape sorts were quite spectacular to watch!
From all times, sorting has always been a Great Art! :-)
close()
Close the log file, preventing additional records from being read.
fileno() -> file descriptor
Returns the file descriptor for the log file, if open.
Raises ValueError if the log file is closed.
addinfo(key, value)
Insert an ADD_INFO record into the log.
close()
Shut down this profiler and close the log files, even if its active.
runcall(callable[, args[, kw]]) -> callable()
Profile a specific function call, returning the result of that call.
start()
Install this profiler for the current thread.
runcode(code, globals[, locals])
Execute a code object while collecting profile data.  If locals is
omitted, globals is used for the locals as well.
Remove this profiler from the current thread.
High-performance profiler object.
Methods:
close():      Stop the profiler and close the log files.
fileno():     Returns the file descriptor of the log file.
runcall():    Run a single function call with profiling enabled.
runcode():    Execute a code object with profiling enabled.
start():      Install the profiler and return.
stop():       Remove the profiler.
Attributes (read-only):
closed:       True if the profiler has already been closed.
frametimings: True if ENTER/EXIT events collect timing information.
lineevents:   True if line events are reported to the profiler.
linetimings:  True if line events collect timing information.
logreader(filename) --> log-iterator
Create a log-reader for the timing information file.
profiler(logfilename[, lineevents[, linetimes]]) -> profiler
Create a new profiler object.
coverage(logfilename) -> profiler
Returns a profiler that doesn't collect any timing information, which is
useful in building a coverage analysis tool.
resolution() -> (performance-counter-ticks, update-frequency)
Return the resolution of the timer provided by the QueryPerformanceCounter()
function.  The first value is the smallest observed change, and the second
is the result of QueryPerformanceFrequency().
scanstring(basestring, end, encoding, strict=True) -> (str, end)
Scan the string s for a JSON string. End is the index of the
character in s after the quote that started the JSON string.
Unescapes all valid JSON string escape sequences and raises ValueError
on attempt to decode an invalid string. If strict is False then literal
control characters are allowed in the string.
Returns a tuple of the decoded string and the index of the character in s
after the end quote.
encode_basestring_ascii(basestring) -> str
Return an ASCII-only JSON representation of a Python string
JSON scanner object
_iterencode(obj, _current_indent_level) -> iterable
json speedups
Support for POSIX locales.
(integer,string=None) -> string. Activates/queries locale processing.
() -> dict. Returns numeric and monetary locale-specific parameters.
string,string -> int. Compares two strings according to the locale.
string -> string. Returns a string that behaves for cmp locale-aware.
getstats() -> list of profiler_entry objects
Return all information collected by the profiler.
Each profiler_entry is a tuple-like object with the
following attributes:
    code          code object
    callcount     how many times this was called
    reccallcount  how many times called recursively
    totaltime     total time in this entry
    inlinetime    inline time in this entry (not in subcalls)
    calls         details of the calls
The calls attribute is either None or a list of
profiler_subentry objects:
    code          called code object
    callcount     how many times this is called
    reccallcount  how many times this is called recursively
    totaltime     total time spent in this call
    inlinetime    inline time (not in further subcalls)
enable(subcalls=True, builtins=True)
Start collecting profiling information.
If 'subcalls' is True, also records for each function
statistics separated according to its current caller.
If 'builtins' is True, records the time spent in
built-in functions separately from their caller.
disable()
Stop collecting profiling information.
clear()
Clear all profiling information collected so far.
Profiler(custom_timer=None, time_unit=None, subcalls=True, builtins=True)
    Builds a profiler object using the specified timer function.
    The default timer is a fast built-in one based on real time.
    For custom timer functions returning integers, time_unit can
    be a float specifying a scale (i.e. how long each integer unit
    is, in seconds).
Random() -> create a random number generator with its own internal state.
Module implements the Mersenne Twister random number generator.
 SRE 2.2.2 Copyright (c) 1997-2002 by Secret Labs AB 
 !"#$%&'()*+,-./0123456789:;<=>?@abcdefghijklmnopqrstuvwxyz[\]^_`abcdefghijklmnopqrstuvwxyz{|}~
match(string[, pos[, endpos]]) --> match object or None.
    Matches zero or more characters at the beginning of the string
search(string[, pos[, endpos]]) --> match object or None.
    Scan through string looking for a match, and return a corresponding
    match object instance. Return None if no position in the string matches.
split(string[, maxsplit = 0])  --> list.
    Split string by the occurrences of pattern.
findall(string[, pos[, endpos]]) --> list.
   Return a list of all non-overlapping matches of pattern in string.
finditer(string[, pos[, endpos]]) --> iterator.
    Return an iterator over all non-overlapping matches for the 
    RE pattern in string. For each match, the iterator returns a
    match object.
sub(repl, string[, count = 0]) --> newstring
    Return the string obtained by replacing the leftmost non-overlapping
    occurrences of pattern in string by the replacement repl.
subn(repl, string[, count = 0]) --> (newstring, number of subs)
    Return the tuple (new_string, number_of_subs_made) found by replacing
    the leftmost non-overlapping occurrences of pattern with the
    replacement repl.
Compiled regular expression objects
The result of re.match() and re.search().
Match objects always have a boolean value of True.
group([group1, ...]) -> str or tuple.
    Return subgroup(s) of the match by indices or names.
    For 0 returns the entire match.
start([group=0]) -> int.
    Return index of the start of the substring matched by group.
end([group=0]) -> int.
    Return index of the end of the substring matched by group.
span([group]) -> tuple.
    For MatchObject m, return the 2-tuple (m.start(group), m.end(group)).
groups([default=None]) -> tuple.
    Return a tuple containing all the subgroups of the match, from 1.
    The default argument is used for groups
    that did not participate in the match
groupdict([default=None]) -> dict.
    Return a dictionary containing all the named subgroups of the match,
    keyed by the subgroup name. The default argument is used for groups
    that did not participate in the match
expand(template) -> str.
    Return the string obtained by doing backslash substitution
    on the string template, as done by the sub() method.
S.unpack(str) -> (v1, v2, ...)
Return tuple containing values unpacked according to this Struct's format.
Requires len(str) == self.size. See struct.__doc__ for more on format
strings.
S.unpack_from(buffer[, offset]) -> (v1, v2, ...)
Return tuple containing values unpacked according to this Struct's format.
Unlike unpack, unpack_from can unpack values from any object supporting
the buffer API, not just str. Requires len(buffer[offset:]) >= self.size.
See struct.__doc__ for more on format strings.
S.pack(v1, v2, ...) -> string
Return a string containing values v1, v2, ... packed according to this
Struct's format. See struct.__doc__ for more on format strings.
S.pack_into(buffer, offset, v1, v2, ...)
Pack the values v1, v2, ... according to this Struct's format, write 
the packed bytes into the writable buffer buf starting at offset.  Note
that the offset is not an optional argument.  See struct.__doc__ for 
more on format strings.
S.__sizeof__() -> size of S in memory, in bytes
Compiled struct object
Clear the internal cache.
Return size of C struct described by format string fmt.
Return string containing values v1, v2, ... packed according to fmt.
Pack the values v1, v2, ... according to fmt.
Write the packed bytes into the writable buffer buf starting at offset.
Unpack the string containing packed C structure data, according to fmt.
Requires len(string) == calcsize(fmt).
Unpack the buffer, containing packed C structure data, according to
fmt, starting at offset. Requires len(buffer[offset:]) >= calcsize(fmt).
Functions to convert between Python values and C structs represented
as Python strings. It uses format strings (explained below) as compact
descriptions of the lay-out of the C structs and the intended conversion
to/from Python values.
The optional first format char indicates byte order, size and alignment:
  @: native order, size & alignment (default)
  =: native order, std. size & alignment
  <: little-endian, std. size & alignment
  >: big-endian, std. size & alignment
  !: same as >
The remaining chars indicate types of args and must match exactly;
these can be preceded by a decimal repeat count:
  x: pad byte (no data); c:char; b:signed byte; B:unsigned byte;
  ?: _Bool (requires C99; if not available, char is used instead)
  h:short; H:unsigned short; i:int; I:unsigned int;
  l:long; L:unsigned long; f:float; d:double.
Special cases (preceding decimal count indicates length):
  s:string (array of char); p: pascal string (with count byte).
Special case (only available in native format):
  P:an integer type that is wide enough to hold a pointer.
Special case (not in native mode unless 'long long' in platform C):
  q:long long; Q:unsigned long long
Whitespace between formats is ignored.
The variable struct.error is an exception raised on errors.
getweakrefcount(object) -- return the number of weak references
to 'object'.
getweakrefs(object) -- return a list of all weak reference objects
that point to 'object'.
proxy(object[, callback]) -- create a proxy object that weakly
references 'object'.  'callback', if given, is called with a
reference to the proxy when 'object' is about to be finalized.
copy(array)
 Return a copy of the array.
count(x)
Return number of occurrences of x in the array.
index(x)
Return index of first occurrence of x in the array.
remove(x)
Remove the first occurrence of x in the array.
append(x)
Append new value x to the end of the array.
pop([i])
Return the i-th element and delete it from the array. i defaults to -1.
reverse()
Reverse the order of the items in the array.
extend(array or iterable)
 Append items to the end of the array.
fromlist(list)
Append items to array from list.
insert(i,x)
Insert a new item x into the array before position i.
Return state information for pickling.
buffer_info() -> (address, length)
Return a tuple (address, length) giving the current memory address and
the length in items of the buffer used to hold array's contents
The length should be multiplied by the itemsize attribute to calculate
the buffer length in bytes.
byteswap()
Byteswap all items of the array.  If the items in the array are not 1, 2,
4, or 8 bytes in size, RuntimeError is raised.
fromfile(f, n)
Read n objects from the file object f and append them to the end of the
array.  Also called as read.
tofile(f)
Write all items (as machine values) to the file object f.  Also called as
tolist() -> list
Convert array to an ordinary list with the same items.
fromstring(string)
Appends items from the string, interpreting it as an array of machine
values,as if it had been read from a file using the fromfile() method).
__sizeof__() -> int
Size of the array in memory, in bytes.
tostring() -> string
Convert the array to an array of machine values and return the string
representation.
fromunicode(ustr)
Extends this array with data from the unicode string ustr.
The array must be a type 'u' array; otherwise a ValueError
is raised.  Use array.fromstring(ustr.decode(...)) to
append Unicode data to an array of some other type.
tounicode() -> unicode
Convert the array to a unicode string.  The array must be
a type 'u' array; otherwise a ValueError is raised.  Use
array.tostring().decode() to obtain a unicode string from
an array of some other type.
This module defines an object type which can efficiently represent
an array of basic values: characters, integers, floating point
numbers.  Arrays are sequence types and behave very much like lists,
except that the type of objects stored in them is constrained.  The
type is specified at object creation time by using a type code, which
is a single character.  The following type codes are defined:
    Type code   C Type             Minimum size in bytes 
    'c'         character          1 
    'b'         signed integer     1 
    'B'         unsigned integer   1 
    'u'         Unicode character  2 
    'h'         signed integer     2 
    'H'         unsigned integer   2 
    'i'         signed integer     2 
    'I'         unsigned integer   2 
    'l'         signed integer     4 
    'L'         unsigned integer   4 
    'f'         floating point     4 
    'd'         floating point     8 
The constructor is:
array(typecode [, initializer]) -- create a new array
array(typecode [, initializer]) -> array
Return a new array whose items are restricted by typecode, and
initialized from the optional initializer value, which must be a list,
string or iterable over elements of the appropriate type.
Arrays represent basic values and behave very much like lists, except
the type of objects stored in them is constrained.
Methods:
append() -- append a new item to the end of the array
buffer_info() -- return information giving the current memory info
byteswap() -- byteswap all the items of the array
count() -- return number of occurrences of an object
extend() -- extend array by appending multiple elements from an iterable
fromfile() -- read items from a file object
fromlist() -- append items from the list
fromstring() -- append items from the string
index() -- return index of first occurrence of an object
insert() -- insert a new item into the array at a provided position
pop() -- remove and return item (default last)
read() -- DEPRECATED, use fromfile()
remove() -- remove first occurrence of an object
reverse() -- reverse the order of the items in the array
tofile() -- write all items to a file object
tolist() -- return the array converted to an ordinary list
tostring() -- return the array converted to a string
write() -- DEPRECATED, use tofile()
Attributes:
typecode -- the typecode character used to create the array
itemsize -- the length in bytes of one array item
|}|y|u|q|m|i|e|a|]|Y|U|Q|M|I|E|A|>|<|:|8|6|4|2|0|.|,|*|(|&|$|"| 
}}}}}}}}}}~}}~}}}}}}}}}}}}}}}}}}}
 !"#$}%&'()*+},-./}}}}0123456}789:;<}}=>?}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}!"#$%&'()*+,-012345689@ABCDEFGHIJKLMNPQRSTUVXYZ[`abcdefhijklmpqr
?456789:;<=
 !"#$%&'()*+,-./0123
ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/
P%@Fpg`
n6~UNt^
(ascii) -> bin. Decode a line of uuencoded data
(bin) -> ascii. Uuencode line of data
(ascii) -> bin. Decode a line of base64 data
(bin) -> ascii. Base64-code line of data
ascii -> bin, done. Decode .hqx coding
Binhex RLE-code binary data
Encode .hqx data
Decode hexbin RLE-coded string
(data, oldcrc) -> newcrc. Compute hqx CRC incrementally
(data, oldcrc = 0) -> newcrc. Compute CRC-32 incrementally
-b2a_hex(data) -> s; Hexadecimal representation of binary data.
This function is also available as "hexlify()".
a2b_hex(hexstr) -> s; Binary data of hexadecimal representation.
hexstr must contain an even number of hex digits (upper or lower case).
This function is also available as "unhexlify()"
Decode a string of qp-encoded data
b2a_qp(data, quotetabs=0, istext=1, header=0) -> s; 
 Encode a string using quoted-printable encoding. 
On encoding, when istext is set, newlines are not encoded, and white 
space at end of lines is.  When istext is not set, \r and \n (CR/LF) are 
both encoded.  When quotetabs is set, space and tabs are encoded.
Conversion between binary data and ASCII
acos(x)
Return the arc cosine of x.
acosh(x)
Return the hyperbolic arccosine of x.
asin(x)
Return the arc sine of x.
asinh(x)
Return the hyperbolic arc sine of x.
atan(x)
Return the arc tangent of x.
atanh(x)
Return the hyperbolic arc tangent of x.
Return the cosine of x.
cosh(x)
Return the hyperbolic cosine of x.
Return the exponential value e**x.
log10(x)
Return the base-10 logarithm of x.
Return the sine of x.
sinh(x)
Return the hyperbolic sine of x.
sqrt(x)
Return the square root of x.
Return the tangent of x.
tanh(x)
Return the hyperbolic tangent of x.
log(x[, base]) -> the logarithm of x to the given base.
If the base not specified, returns the natural logarithm (base e) of x.
phase(z) -> float
Return argument, also known as the phase angle, of a complex.
polar(z) -> r: float, phi: float
Convert a complex from rectangular coordinates to polar coordinates. r is
the distance from 0 and phi the phase angle.
rect(r, phi) -> z: complex
Convert from polar coordinates to rectangular coordinates.
isnan(z) -> bool
Checks if the real or imaginary part of z not a number (NaN)
isinf(z) -> bool
Checks if the real or imaginary part of z is infinite.
This module is always available. It provides access to mathematical
functions for complex numbers.
C implementation and optimization of the Python pickle module.
usuiobcPQRb
Objects that know how to pickle objects
Objects that know how to unpickle
A simple fast partial StringIO replacement.
This module provides a simple useful replacement for
the StringIO module that is written in C.  It does not provide the
full generality of StringIO, but it provides enough for most
applications and is especially useful in conjunction with the
pickle module.
  from cStringIO import StringIO
  an_output_stream=StringIO()
  an_output_stream.write(some_stuff)
  value=an_output_stream.getvalue()
  an_input_stream=StringIO(a_string)
  spam=an_input_stream.readline()
  spam=an_input_stream.read(5)
  an_input_stream.seek(0)           # OK, start over
  spam=an_input_stream.read()       # and read it all
If someone else wants to provide a more complete implementation,
go for it. :-)  
cStringIO.c,v 1.29 1999/06/15 14:10:27 jim Exp
flush(): does nothing.
getvalue([use_pos]) -- Get the string value.
If use_pos is specified and is a true value, then the string returned
will include only the text up to the current file position.
isatty(): always returns 0
read([s]) -- Read s characters, or the rest of the string
readline() -- Read one line
readlines() -- Read all lines
reset() -- Reset the file position to the beginning
tell() -- get the current position.
truncate(): truncate the file at the current position.
seek(position)       -- set the current position
seek(position, mode) -- mode 0: absolute; 1: relative; 2: relative to EOF
write(s) -- Write a string to the file
Note (hack:) writing None resets the buffer
close(): explicitly release resources held.
writelines(sequence_of_strings) -> None.  Write the strings to the file.
Note that newlines are not added.  The sequence can be any iterable object
producing strings. This is equivalent to calling write() for each string.
Simple type for output to strings.
Simple type for treating strings as input file streams
StringIO([s]) -- Return a StringIO-like stream for reading or writing
Difference between two datetime values.
date(year, month, day) --> date object
Abstract base class for time zone info objects.
time([hour[, minute[, second[, microsecond[, tzinfo]]]]]) --> a time object
All arguments are optional. tzinfo may be None, or an instance of
a tzinfo subclass. The remaining arguments may be ints or longs.
datetime(year, month, day[, hour[, minute[, second[, microsecond[,tzinfo]]]]])
The year, month and day arguments are required. tzinfo may be None, or an
instance of a tzinfo subclass. The remaining arguments may be ints or longs.
This module makes available standard errno system symbols.
The value of each symbol is the corresponding integer value,
e.g., on most systems, errno.ENOENT equals the integer 2.
The dictionary errno.errorcode maps numeric codes to symbol names,
e.g., errno.errorcode[2] could be the string 'ENOENT'.
Symbols that are not relevant to the underlying system are not defined.
To map error codes to error messages, use the function os.strerror(),
e.g. os.strerror(2) could return 'No such file or directory'.
This module provides functions that will be builtins in Python 3.0,
but that conflict with builtins that already exist in Python 2.x.
Functions:
ascii(arg) -- Returns the canonical string representation of an object.
filter(pred, iterable) -- Returns an iterator yielding those items of 
       iterable for which pred(item) is true.
hex(arg) -- Returns the hexadecimal representation of an integer.
map(func, *iterables) -- Returns an iterator that computes the function 
    using arguments from each of the iterables.
oct(arg) -- Returns the octal representation of an integer.
zip(iter1 [,iter2 [...]]) -- Returns a zip object whose .next() method 
    returns a tuple where the i-th element comes from the i-th iterable 
    argument.
The typical usage of this module is to replace existing builtins in a
module's namespace:
from future_builtins import ascii, filter, map, hex, oct, zip
hex(number) -> string
Return the hexadecimal representation of an integer or long integer.
oct(number) -> string
Return the octal representation of an integer or long integer.
ascii(object) -> string
Return the same as repr().  In Python 3.x, the repr() result will
contain printable characters unescaped, while the ascii() result
will have such characters backslash-escaped.
enable() -> None
Enable automatic garbage collection.
disable() -> None
Disable automatic garbage collection.
isenabled() -> status
Returns true if automatic garbage collection is enabled.
collect([generation]) -> n
With no arguments, run a full collection.  The optional argument
may be an integer specifying which generation to collect.  A ValueError
is raised if the generation number is invalid.
The number of unreachable objects is returned.
set_debug(flags) -> None
Set the garbage collection debugging flags. Debugging information is
written to sys.stderr.
flags is an integer and can have the following bits turned on:
  DEBUG_STATS - Print statistics during collection.
  DEBUG_COLLECTABLE - Print collectable objects found.
  DEBUG_UNCOLLECTABLE - Print unreachable but uncollectable objects found.
  DEBUG_INSTANCES - Print instance objects.
  DEBUG_OBJECTS - Print objects other than instances.
  DEBUG_SAVEALL - Save objects to gc.garbage rather than freeing them.
  DEBUG_LEAK - Debug leaking programs (everything but STATS).
get_debug() -> flags
Get the garbage collection debugging flags.
set_threshold(threshold0, [threshold1, threshold2]) -> None
Sets the collection thresholds.  Setting threshold0 to zero disables
collection.
get_threshold() -> (threshold0, threshold1, threshold2)
Return the current collection thresholds
get_count() -> (count0, count1, count2)
Return the current collection counts
get_referrers(*objs) -> list
Return the list of objects that directly refer to any of objs.
get_referents(*objs) -> list
Return the list of objects that are directly referred to by objs.
get_objects() -> [...]
Return a list of objects tracked by the collector (excluding the list
returned).
is_tracked(obj) -> bool
Returns true if the object is tracked by the garbage collector.
Simple atomic objects will return false.
This module provides access to the garbage collector for reference cycles.
enable() -- Enable automatic garbage collection.
disable() -- Disable automatic garbage collection.
isenabled() -- Returns true if automatic collection is enabled.
collect() -- Do a full collection right now.
get_count() -- Return the current collection counts.
set_debug() -- Set debugging flags.
get_debug() -- Get debugging flags.
set_threshold() -- Set the collection thresholds.
get_threshold() -- Return the current the collection thresholds.
get_objects() -- Return a list of all objects tracked by the collector.
is_tracked() -- Returns true if a given object is tracked.
get_referrers() -- Return the list of objects that refer to an object.
get_referents() -- Return the list of objects that an object refers to.
Returns an independent iterator.
groupby(iterable[, keyfunc]) -> create an iterator which returns
(key, sub-iterator) grouped by each value of key(value).
Data container common to multiple tee objects.
Iterator wrapped to make it copyable
tee(iterable, n=2) --> tuple of n independent iterators.
cycle(iterable) --> cycle object
Return elements from the iterable until it is exhausted.
Then repeat the sequence indefinitely.
dropwhile(predicate, iterable) --> dropwhile object
Drop items from the iterable while predicate(item) is true.
Afterwards, return every element until the iterable is exhausted.
takewhile(predicate, iterable) --> takewhile object
Return successive entries from an iterable as long as the 
predicate evaluates to true for each entry.
islice(iterable, [start,] stop [, step]) --> islice object
Return an iterator whose next() method returns selected values from an
iterable.  If start is specified, will skip all preceding elements;
otherwise, start defaults to zero.  Step defaults to one.  If
specified as another value, step determines how many values are 
skipped between successive calls.  Works like a slice() on a list
but returns an iterator.
starmap(function, sequence) --> starmap object
Return an iterator whose values are returned from the function evaluated
with a argument tuple taken from the given sequence.
imap(func, *iterables) --> imap object
Make an iterator that computes the function using arguments from
each of the iterables.  Like map() except that it returns
an iterator instead of a list and that it stops when the shortest
iterable is exhausted instead of filling in None for shorter
iterables.
chain(*iterables) --> chain object
Return a chain object whose .next() method returns elements from the
first iterable until it is exhausted, then elements from the next
iterable, until all of the iterables are exhausted.
chain.from_iterable(iterable) --> chain object
Alternate chain() contructor taking a single iterable argument
that evaluates lazily.
product(*iterables) --> product object
Cartesian product of input iterables.  Equivalent to nested for-loops.
For example, product(A, B) returns the same as:  ((x,y) for x in A for y in B).
The leftmost iterators are in the outermost for-loop, so the output tuples
cycle in a manner similar to an odometer (with the rightmost element changing
on every iteration).
To compute the product of an iterable with itself, specify the number
of repetitions with the optional repeat keyword argument. For example,
product(A, repeat=4) means the same as product(A, A, A, A).
product('ab', range(3)) --> ('a',0) ('a',1) ('a',2) ('b',0) ('b',1) ('b',2)
product((0,1), (0,1), (0,1)) --> (0,0,0) (0,0,1) (0,1,0) (0,1,1) (1,0,0) ...
combinations(iterable, r) --> combinations object
Return successive r-length combinations of elements in the iterable.
combinations(range(4), 3) --> (0,1,2), (0,1,3), (0,2,3), (1,2,3)
combinations_with_replacement(iterable, r) --> combinations_with_replacement object
Return successive r-length combinations of elements in the iterable
allowing individual elements to have successive repeats.
combinations_with_replacement('ABC', 2) --> AA AB AC BB BC CC
permutations(iterable[, r]) --> permutations object
Return successive r-length permutations of elements in the iterable.
permutations(range(3), 2) --> (0,1), (0,2), (1,0), (1,2), (2,0), (2,1)
compress(data, selectors) --> iterator over selected data
Return data elements corresponding to true selector elements.
Forms a shorter iterator from selected data elements using the
selectors to choose the data elements.
ifilter(function or None, sequence) --> ifilter object
Return those items of sequence for which function(item) is true.
If function is None, return the items that are true.
ifilterfalse(function or None, sequence) --> ifilterfalse object
Return those items of sequence for which function(item) is false.
If function is None, return the items that are false.
Return state information for pickling.
count(start=0, step=1) --> count object
Return a count object whose .next() method returns consecutive values.
Equivalent to:
    def count(firstval=0, step=1):
    x = firstval
    while 1:
        yield x
        x += step
izip(iter1 [,iter2 [...]]) --> izip object
Return a izip object whose .next() method returns a tuple where
the i-th element comes from the i-th iterable argument.  The .next()
method continues until the shortest iterable in the argument sequence
is exhausted and then it raises StopIteration.  Works like the zip()
function but consumes less memory by returning an iterator instead of
a list.
Private method returning an estimate of len(list(it)).
repeat(object [,times]) -> create an iterator which returns the object
for the specified number of times.  If not specified, returns the object
endlessly.
izip_longest(iter1 [,iter2 [...]], [fillvalue=None]) --> izip_longest object
Return an izip_longest object whose .next() method returns a tuple where
the i-th element comes from the i-th iterable argument.  The .next()
method continues until the longest iterable in the argument sequence
is exhausted and then it raises StopIteration.  When the shorter iterables
are exhausted, the fillvalue is substituted in their place.  The fillvalue
defaults to None or can be specified by a keyword argument.
Functional tools for creating and using iterators.
Infinite iterators:
count([n]) --> n, n+1, n+2, ...
cycle(p) --> p0, p1, ... plast, p0, p1, ...
repeat(elem [,n]) --> elem, elem, elem, ... endlessly or up to n times
Iterators terminating on the shortest input sequence:
chain(p, q, ...) --> p0, p1, ... plast, q0, q1, ... 
compress(data, selectors) --> (d[0] if s[0]), (d[1] if s[1]), ...
dropwhile(pred, seq) --> seq[n], seq[n+1], starting when pred fails
groupby(iterable[, keyfunc]) --> sub-iterators grouped by value of keyfunc(v)
ifilter(pred, seq) --> elements of seq where pred(elem) is True
ifilterfalse(pred, seq) --> elements of seq where pred(elem) is False
islice(seq, [start,] stop [, step]) --> elements from
       seq[start:stop:step]
imap(fun, p, q, ...) --> fun(p0, q0), fun(p1, q1), ...
starmap(fun, seq) --> fun(*seq[0]), fun(*seq[1]), ...
tee(it, n=2) --> (it1, it2 , ... itn) splits one iterator into n
takewhile(pred, seq) --> seq[0], seq[1], until pred fails
izip(p, q, ...) --> (p[0], q[0]), (p[1], q[1]), ... 
izip_longest(p, q, ...) --> (p[0], q[0]), (p[1], q[1]), ... 
Combinatoric generators:
product(p, q, ... [repeat=1]) --> cartesian product
permutations(p[, r])
combinations(p, r)
combinations_with_replacement(p, r)
acos(x)
Return the arc cosine (measured in radians) of x.
acosh(x)
Return the hyperbolic arc cosine (measured in radians) of x.
asin(x)
Return the arc sine (measured in radians) of x.
asinh(x)
Return the hyperbolic arc sine (measured in radians) of x.
atan(x)
Return the arc tangent (measured in radians) of x.
atan2(y, x)
Return the arc tangent (measured in radians) of y/x.
Unlike atan(y/x), the signs of both x and y are considered.
atanh(x)
Return the hyperbolic arc tangent (measured in radians) of x.
ceil(x)
Return the ceiling of x as a float.
This is the smallest integral value >= x.
copysign(x, y)
Return x with the sign of y.
Return the cosine of x (measured in radians).
cosh(x)
Return the hyperbolic cosine of x.
Error function at x.
erfc(x)
Complementary error function at x.
Return e raised to the power of x.
expm1(x)
Return exp(x)-1.
This function avoids the loss of precision involved in the direct evaluation of exp(x)-1 for small x.
fabs(x)
Return the absolute value of the float x.
floor(x)
Return the floor of x as a float.
This is the largest integral value <= x.
gamma(x)
Gamma function at x.
lgamma(x)
Natural logarithm of absolute value of Gamma function at x.
log1p(x)
Return the natural logarithm of 1+x (base e).
The result is computed in a way which is accurate for x near zero.
Return the sine of x (measured in radians).
sinh(x)
Return the hyperbolic sine of x.
sqrt(x)
Return the square root of x.
Return the tangent of x (measured in radians).
tanh(x)
Return the hyperbolic tangent of x.
fsum(iterable)
Return an accurate floating point sum of values in the iterable.
Assumes IEEE-754 floating point arithmetic.
factorial(x) -> Integral
Find x!. Raise a ValueError if x is negative or non-integral.
trunc(x:Real) -> Integral
Truncates x to the nearest Integral toward 0. Uses the __trunc__ magic method.
frexp(x)
Return the mantissa and exponent of x, as pair (m, e).
m is a float and e is an int, such that x = m * 2.**e.
If x is 0, m and e are both 0.  Else 0.5 <= abs(m) < 1.0.
ldexp(x, i)
Return x * (2**i).
modf(x)
Return the fractional and integer parts of x.  Both results carry the sign
of x and are floats.
log(x[, base])
Return the logarithm of x to the given base.
If the base not specified, returns the natural logarithm (base e) of x.
log10(x)
Return the base 10 logarithm of x.
fmod(x, y)
Return fmod(x, y), according to platform C.  x % y may differ.
hypot(x, y)
Return the Euclidean distance, sqrt(x*x + y*y).
pow(x, y)
Return x**y (x to the power of y).
degrees(x)
Convert angle x from radians to degrees.
radians(x)
Convert angle x from degrees to radians.
isnan(x) -> bool
Check if float x is not a number (NaN).
isinf(x) -> bool
Check if float x is infinite (positive or negative).
This module is always available.  It provides access to the
mathematical functions defined by the C standard.
update (arg)
Update the md5 object with the string arg. Repeated calls are
equivalent to a single call with the concatenation of all the
arguments.
digest() -> string
Return the digest of the strings passed to the update() method so
far. This is a 16-byte string which may contain non-ASCII characters,
including null bytes.
hexdigest() -> string
Like digest(), but returns the digest as a string of hexadecimal digits.
copy() -> md5 object
Return a copy (``clone'') of the md5 object.
This module implements the interface to RSA's MD5 message digest
algorithm (see also Internet RFC 1321). Its use is quite
straightforward: use the new() to create an md5 object. You can now
feed this object with arbitrary strings using the update() method, and
at any point you can ask it for the digest (a strong kind of 128-bit
checksum, a.k.a. ``fingerprint'') of the concatenation of the strings
fed to it so far using the digest() method.
Functions:
new([arg]) -- return a new md5 object, initialized with arg if provided
md5([arg]) -- DEPRECATED, same as new, but for compatibility
Special Objects:
MD5Type -- type object for md5 objects
An md5 represents the object used to calculate the MD5 checksum of a
string of information.
Methods:
update() -- updates the current digest with an additional string
digest() -- return the current digest value
hexdigest() -- return the current digest as a string of hexadecimal digits
copy() -- return a copy of the current md5 object
new([arg]) -> md5 object
Return a new md5 object. If arg is present, the method call update(arg)
is made.
Windows: mmap(fileno, length[, tagname[, access[, offset]]])
Maps length bytes from the file specified by the file handle fileno,
and returns a mmap object.  If length is larger than the current size
of the file, the file is extended to contain length bytes.  If length
is 0, the maximum length of the map is the current size of the file,
except that if the file is empty Windows raises an exception (you cannot
create an empty mapping on Windows).
Unix: mmap(fileno, length[, flags[, prot[, access[, offset]]]])
Maps length bytes from the file specified by the file descriptor fileno,
and returns a mmap object.  If length is 0, the maximum length of the map
will be the current size of the file when mmap is called.
flags specifies the nature of the mapping. MAP_PRIVATE creates a
private copy-on-write mapping, so changes to the contents of the mmap
object will be private to this process, and MAP_SHARED creates a mapping
that's shared with all other processes mapping the same areas of the file.
The default value is MAP_SHARED.
To map anonymous memory, pass -1 as the fileno (both versions).
Operator interface.
This module exports a set of functions implemented in C corresponding
to the intrinsic operators of Python.  For example, operator.add(x, y)
is equivalent to the expression x+y.  The function names are those
used for special methods; variants without leading and trailing
'__' are also provided for convenience.
itemgetter(item, ...) --> itemgetter object
Return a callable object that fetches the given item(s) from its operand.
After f = itemgetter(2), the call f(r) returns r[2].
After g = itemgetter(2, 5, 3), the call g(r) returns (r[2], r[5], r[3])
attrgetter(attr, ...) --> attrgetter object
Return a callable object that fetches the given attribute(s) from its operand.
After f = attrgetter('name'), the call f(r) returns r.name.
After g = attrgetter('name', 'date'), the call g(r) returns (r.name, r.date).
After h = attrgetter('name.first', 'name.last'), the call h(r) returns
(r.name.first, r.name.last).
methodcaller(name, ...) --> methodcaller object
Return a callable object that calls the given method on its operand.
After f = methodcaller('name'), the call f(r) returns r.name().
After g = methodcaller('name', 'date', foo=1), the call g(r) returns
r.name('date', foo=1).
Copyright 1995-1996 by Virginia Polytechnic Institute & State
University, Blacksburg, Virginia, USA, and Fred L. Drake, Jr., Reston,
Virginia, USA.  Portions copyright 1991-1995 by Stichting Mathematisch
Centrum, Amsterdam, The Netherlands.
This is an interface to Python's internal parser.
This module provides access to operating system functionality that is
standardized by the C Standard and the POSIX standard (a thinly
disguised Unix interface).  Refer to the library manual and
corresponding Unix manual entries for more information on calls.
stat_result: Result from stat or lstat.
This object may be accessed either as a tuple of
  (mode, ino, dev, nlink, uid, gid, size, atime, mtime, ctime)
or via the attributes st_mode, st_ino, st_dev, st_nlink, st_uid, and so on.
Posix/windows: If your platform supports st_blksize, st_blocks, st_rdev,
or st_flags, they are available as attributes only.
See os.stat for more information.
statvfs_result: Result from statvfs or fstatvfs.
This object may be accessed either as a tuple of
  (bsize, frsize, blocks, bfree, bavail, files, ffree, favail, flag, namemax),
or via the attributes f_bsize, f_frsize, f_blocks, f_bfree, and so on.
See os.statvfs for more information.
stat_float_times([newval]) -> oldval
Determine whether os.[lf]stat represents time stamps as float objects.
If newval is True, future calls to stat() return floats, if it is False,
future calls return ints. 
If newval is omitted, return the current setting.
access(path, mode) -> True if granted, False otherwise
Use the real uid/gid to test for access to a path.  Note that most
operations will use the effective uid/gid, therefore this routine can
be used in a suid/sgid environment to test if the invoking user has the
specified access to the path.  The mode argument can be F_OK to test
existence, or the inclusive-OR of R_OK, W_OK, and X_OK.
chdir(path)
Change the current working directory to the specified path.
chmod(path, mode)
Change the access permissions of a file.
fsync(fildes)
force write of file with filedescriptor to disk.
getcwd() -> path
Return a string representing the current working directory.
getcwdu() -> path
Return a unicode string representing the current working directory.
listdir(path) -> list_of_strings
Return a list containing the names of the entries in the directory.
    path: path of directory to list
The list is in arbitrary order.  It does not include the special
entries '.' and '..' even if they are present in the directory.
mkdir(path [, mode=0777])
Create a directory.
rename(old, new)
Rename a file or directory.
rmdir(path)
Remove a directory.
stat(path) -> stat result
Perform a stat system call on the given path.
system(command) -> exit_status
Execute the command (a string) in a subshell.
umask(new_mask) -> old_mask
Set the current numeric umask and return the previous umask.
unlink(path)
Remove a file (same as remove(path)).
remove(path)
Remove a file (same as unlink(path)).
utime(path, (atime, mtime))
utime(path, None)
Set the access and modified time of the file to the given values.  If the
second form is used, set the access and modified times to the current time.
_exit(status)
Exit to the system with specified status, without normal exit processing.
execv(path, args)
Execute an executable path with arguments, replacing current process.
    path: path of executable file
    args: tuple or list of strings
execve(path, args, env)
Execute a path with arguments and environment, replacing current process.
    path: path of executable file
    args: tuple or list of arguments
    env: dictionary of strings mapping to strings
spawnv(mode, path, args)
Execute the program 'path' in a new process.
    mode: mode of process creation
    path: path of executable file
    args: tuple or list of strings
spawnve(mode, path, args, env)
Execute the program 'path' in a new process.
    mode: mode of process creation
    path: path of executable file
    args: tuple or list of arguments
    env: dictionary of strings mapping to strings
getpid() -> pid
Return the current process id
kill(pid, sig)
Kill a process with a signal.
Return true if the pathname refers to an existing directory.
popen(command [, mode='r' [, bufsize]]) -> pipe
Open a pipe to/from a command returning a file object.
waitpid(pid, options) -> (pid, status << 8)
Wait for completion of a given process.  options is ignored on Windows.
lstat(path) -> stat result
Like stat(path), but do not follow symbolic links.
times() -> (utime, stime, cutime, cstime, elapsed_time)
Return a tuple of floating point numbers indicating process times.
open(filename, flag [, mode=0777]) -> fd
Open a file (for low level IO).
close(fd)
Close a file descriptor (for low level IO).
closerange(fd_low, fd_high)
Closes all file descriptors in [fd_low, fd_high), ignoring errors.
dup(fd) -> fd2
Return a duplicate of a file descriptor.
dup2(old_fd, new_fd)
Duplicate file descriptor.
lseek(fd, pos, how) -> newpos
Set the current position of a file descriptor.
read(fd, buffersize) -> string
Read a file descriptor.
write(fd, string) -> byteswritten
Write a string to a file descriptor.
fstat(fd) -> stat result
Like stat(), but for an open file descriptor.
fdopen(fd [, mode='r' [, bufsize]]) -> file_object
Return an open file object connected to a file descriptor.
isatty(fd) -> bool
Return True if the file descriptor 'fd' is an open file descriptor
connected to the slave end of a terminal.
pipe() -> (read_end, write_end)
Create a pipe.
putenv(key, value)
Change or add an environment variable.
strerror(code) -> string
Translate an error code to a message string.
tempnam([dir[, prefix]]) -> string
Return a unique name for a temporary file.
The directory and a prefix may be specified as strings; they may be omitted
or None if not needed.
tmpfile() -> file object
Create a temporary file with no directory entries.
tmpnam() -> string
Return a unique name for a temporary file.
abort() -> does not return!
Abort the interpreter immediately.  This 'dumps core' or otherwise fails
in the hardest way possible on the hosting operating system.
startfile(filepath [, operation]) - Start a file with its associated
application.
When "operation" is not specified or "open", this acts like
double-clicking the file in Explorer, or giving the file name as an
argument to the DOS "start" command: the file is opened with whatever
application (if any) its extension is associated.
When another "operation" is given, it specifies what should be done with
the file.  A typical operation is "print".
startfile returns as soon as the associated application is launched.
There is no option to wait for the application to close, and no way
to retrieve the application's exit status.
The filepath is relative to the current directory.  If you want to use
an absolute path, make sure the first character is not a slash ("/");
the underlying Win32 ShellExecute function doesn't work if it is.
urandom(n) -> str
Return n random bytes suitable for cryptographic use.
Return a copy of the hash object.
Return the digest value as a string of binary data.
Return the digest value as a string of hexadecimal digits.
Update this hash object's state with the provided string.
Return a new SHA-256 hash object; optionally initialized with a string.
Return a new SHA-224 hash object; optionally initialized with a string.
Return a copy of the hash object.
Return the digest value as a string of binary data.
Return the digest value as a string of hexadecimal digits.
Update this hash object's state with the provided string.
Return a new SHA-512 hash object; optionally initialized with a string.
Return a new SHA-384 hash object; optionally initialized with a string.
Return a copy of the hashing object.
Return the digest value as a string of binary data.
Return the digest value as a string of hexadecimal digits.
Update this hashing object's state with the provided string.
Return a new SHA hashing object.  An optional string argument
may be provided; if present, this string will be automatically
hashed.
default_int_handler(...)
The default handler for SIGINT installed by Python.
It raises KeyboardInterrupt.
signal(sig, action) -> action
Set the action for the given signal.  The action can be SIG_DFL,
SIG_IGN, or a callable Python object.  The previous action is
returned.  See getsignal() for possible return values.
*** IMPORTANT NOTICE ***
A signal handler function is called with two arguments:
the first is the signal number, the second is the interrupted stack frame.
getsignal(sig) -> action
Return the current action for the given signal.  The return value can be:
SIG_IGN -- if the signal is being ignored
SIG_DFL -- if the default action for the signal is in effect
None -- if an unknown handler is in effect
anything else -- the callable Python object used as a handler
set_wakeup_fd(fd) -> fd
Sets the fd to be written to (with '\0') when a signal
comes in.  A library can use this to wakeup select or poll.
The previous fd is returned.
The fd must be non-blocking.
This module provides mechanisms to use signal handlers in Python.
Functions:
alarm() -- cause SIGALRM after a specified time [Unix only]
setitimer() -- cause a signal (described below) after a specified
               float time and the timer may restart then [Unix only]
getitimer() -- get current value of timer [Unix only]
signal() -- set the action for a given signal
getsignal() -- get the signal action for a given signal
pause() -- wait until a signal arrives [Unix only]
default_int_handler() -- default SIGINT handler
signal constants:
SIG_DFL -- used to refer to the system default handler
SIG_IGN -- used to ignore the signal
NSIG -- number of defined signals
SIGINT, SIGTERM, etc. -- signal numbers
itimer constants:
ITIMER_REAL -- decrements in real time, and delivers SIGALRM upon
               expiration
ITIMER_VIRTUAL -- decrements only when the process is executing,
               and delivers SIGVTALRM upon expiration
ITIMER_PROF -- decrements both when the process is executing and
               when the system is executing on behalf of the process.
               Coupled with ITIMER_VIRTUAL, this timer is usually
               used to profile the time spent by the application
               in user and kernel space. SIGPROF is delivered upon
               expiration.
*** IMPORTANT NOTICE ***
A signal handler function is called with two arguments:
the first is the signal number, the second is the interrupted stack frame.
Common string manipulations, optimized for speed.
Always use "import string" rather than referencing
this module directly.
split(s [,sep [,maxsplit]]) -> list of strings
splitfields(s [,sep [,maxsplit]]) -> list of strings
Return a list of the words in the string s, using sep as the
delimiter string.  If maxsplit is nonzero, splits into at most
maxsplit words.  If sep is not specified, any whitespace string
is a separator.  Maxsplit defaults to 0.
(split and splitfields are synonymous)
join(list [,sep]) -> string
joinfields(list [,sep]) -> string
Return a string composed of the words in list, with
intervening occurrences of sep.  Sep defaults to a single
(join and joinfields are synonymous)
find(s, sub [,start [,end]]) -> in
Return the lowest index in s where substring sub is found,
such that sub is contained within s[start,end].  Optional
arguments start and end are interpreted as in slice notation.
Return -1 on failure.
rfind(s, sub [,start [,end]]) -> int
Return the highest index in s where substring sub is found,
such that sub is contained within s[start,end].  Optional
arguments start and end are interpreted as in slice notation.
Return -1 on failure.
strip(s) -> string
Return a copy of the string s with leading and trailing
whitespace removed.
lstrip(s) -> string
Return a copy of the string s with leading whitespace removed.
rstrip(s) -> string
Return a copy of the string s with trailing whitespace removed.
lower(s) -> string
Return a copy of the string s converted to lowercase.
upper(s) -> string
Return a copy of the string s converted to uppercase.
capitalize(s) -> string
Return a copy of the string s with only its first character
capitalized.
expandtabs(string, [tabsize]) -> string
Expand tabs in a string, i.e. replace them by one or more spaces,
depending on the current column and the given tab size (default 8).
The column number is reset to zero after each newline occurring in the
string.  This doesn't understand other non-printing characters.
count(s, sub[, start[, end]]) -> int
Return the number of occurrences of substring sub in string
s[start:end].  Optional arguments start and end are
interpreted as in slice notation.
swapcase(s) -> string
Return a copy of the string s with upper case characters
converted to lowercase and vice versa.
atoi(s [,base]) -> int
Return the integer represented by the string s in the given
base, which defaults to 10.  The string s must consist of one
or more digits, possibly preceded by a sign.  If base is 0, it
is chosen from the leading characters of s, 0 for octal, 0x or
0X for hexadecimal.  If base is 16, a preceding 0x or 0X is
accepted.
atol(s [,base]) -> long
Return the long integer represented by the string s in the
given base, which defaults to 10.  The string s must consist
of one or more digits, possibly preceded by a sign.  If base
is 0, it is chosen from the leading characters of s, 0 for
octal, 0x or 0X for hexadecimal.  If base is 16, a preceding
0x or 0X is accepted.  A trailing L or l is not accepted,
unless base is 0.
atof(s) -> float
Return the floating point number represented by the string s.
maketrans(frm, to) -> string
Return a translation table (a string of 256 bytes long)
suitable for use in string.translate.  The strings frm and to
must be of the same length.
translate(s,table [,deletechars]) -> string
Return a copy of the string s, where all characters occurring
in the optional argument deletechars are removed, and the
remaining characters have been mapped through the given
translation table, which must be a string of length 256.
replace (str, old, new[, maxsplit]) -> string
Return a copy of string str with all occurrences of substring
old replaced by new. If the optional argument maxsplit is
given, only the first maxsplit occurrences are replaced.
acquire([wait]) -> bool
(acquire_lock() is an obsolete synonym)
Lock the lock.  Without argument, this blocks if the lock is already
locked (even by the same thread), waiting for another thread to release
the lock, and return True once the lock is acquired.
With an argument, this will only block if the argument is true,
and the return value reflects whether the lock is acquired.
The blocking operation is not interruptible.
release()
(release_lock() is an obsolete synonym)
Release the lock, allowing another thread that is blocked waiting for
the lock to acquire the lock.  The lock must be in the locked state,
but it needn't be locked by the same thread that unlocks it.
locked() -> bool
(locked_lock() is an obsolete synonym)
Return whether the lock is in the locked state.
start_new_thread(function, args[, kwargs])
(start_new() is an obsolete synonym)
Start a new thread and return its identifier.  The thread will call the
function with positional arguments from the tuple args and keyword arguments
taken from the optional dictionary kwargs.  The thread exits when the
function returns; the return value is ignored.  The thread will also exit
when the function raises an unhandled exception; a stack trace will be
printed unless the exception is SystemExit.
(exit_thread() is an obsolete synonym)
This is synonymous to ``raise SystemExit''.  It will cause the current
thread to exit silently unless the exception is caught.
interrupt_main()
Raise a KeyboardInterrupt in the main thread.
A subthread can use this function to interrupt the main thread.
allocate_lock() -> lock object
(allocate() is an obsolete synonym)
Create a new lock object.  See help(LockType) for information about locks.
get_ident() -> integer
Return a non-zero integer that uniquely identifies the current thread
amongst other threads that exist simultaneously.
This may be used to identify per-thread resources.
Even though on some platforms threads identities may appear to be
allocated consecutive numbers starting at 1, this behavior should not
be relied upon, and the number should be seen purely as a magic cookie.
A thread's identity may be reused for another thread after it exits.
_count() -> integer
Return the number of currently running Python threads, excluding 
the main thread. The returned number comprises all threads created
through `start_new_thread()` as well as `threading.Thread`, and not
yet finished.
This function is meant for internal and specialized purposes only.
In most applications `threading.enumerate()` should be used instead.
stack_size([size]) -> size
Return the thread stack size used when creating new threads.  The
optional size argument specifies the stack size (in bytes) to be used
for subsequently created threads, and must be 0 (use platform or
configured default) or a positive integer value of at least 32,768 (32k).
If changing the thread stack size is unsupported, a ThreadError
exception is raised.  If the specified size is invalid, a ValueError
exception is raised, and the stack size is unmodified.  32k bytes
 currently the minimum supported stack size value to guarantee
sufficient stack space for the interpreter itself.
Note that some platforms may have particular restrictions on values for
the stack size, such as requiring a minimum stack size larger than 32kB or
requiring allocation in multiples of the system memory page size
- platform documentation should be referred to for more information
(4kB pages are common; using multiples of 4096 for the stack size is
the suggested approach in the absence of more specific information).
This module provides primitive operations to write multi-threaded programs.
The 'threading' module provides a more convenient interface.
A lock object is a synchronization primitive.  To create a lock,
call the PyThread_allocate_lock() function.  Methods are:
acquire() -- lock the lock, possibly blocking until it can be obtained
release() -- unlock of the lock
locked() -- test whether the lock is currently locked
A lock is not owned by the thread that locked it; another thread may
unlock it.  A thread attempting to lock a lock that it has already locked
will block until another thread unlocks it.  Deadlocks may ensue.
time() -> floating point number
Return the current time in seconds since the Epoch.
Fractions of a second may be present if the system clock provides them.
clock() -> floating point number
Return the CPU time or real time since the start of the process or since
the first call to clock().  This has as much precision as the system
records.
sleep(seconds)
Delay execution for a given number of seconds.  The argument may be
a floating point number for subsecond precision.
gmtime([seconds]) -> (tm_year, tm_mon, tm_mday, tm_hour, tm_min,
                       tm_sec, tm_wday, tm_yday, tm_isdst)
Convert seconds since the Epoch to a time tuple expressing UTC (a.k.a.
GMT).  When 'seconds' is not passed in, convert the current time instead.
localtime([seconds]) -> (tm_year,tm_mon,tm_mday,tm_hour,tm_min,
                          tm_sec,tm_wday,tm_yday,tm_isdst)
Convert seconds since the Epoch to a time tuple expressing local time.
When 'seconds' is not passed in, convert the current time instead.
strftime(format[, tuple]) -> string
Convert a time tuple to a string according to a format specification.
See the library reference manual for formatting codes. When the time tuple
is not present, current time as returned by localtime() is used.
strptime(string, format) -> struct_time
Parse a string to a time tuple according to a format specification.
See the library reference manual for formatting codes (same as strftime()).
asctime([tuple]) -> string
Convert a time tuple to a string, e.g. 'Sat Jun 06 16:26:11 1998'.
When the time tuple is not present, current time as returned by localtime()
is used.
ctime(seconds) -> string
Convert a time in seconds since the Epoch to a string in local time.
This is equivalent to asctime(localtime(seconds)). When the time tuple is
not present, current time as returned by localtime() is used.
mktime(tuple) -> floating point number
Convert a time tuple in local time to seconds since the Epoch.
This module provides various functions to manipulate time values.
There are two standard representations of time.  One is the number
of seconds since the Epoch, in UTC (a.k.a. GMT).  It may be an integer
or a floating point number (to represent fractions of seconds).
The Epoch is system-defined; on Unix, it is generally January 1st, 1970.
The actual value can be retrieved by calling gmtime(0).
The other representation is a tuple of 9 integers giving local time.
The tuple items are:
  year (four digits, e.g. 1998)
  month (1-12)
  day (1-31)
  hours (0-23)
  minutes (0-59)
  seconds (0-59)
  weekday (0-6, Monday is 0)
  Julian day (day in the year, 1-366)
  DST (Daylight Savings Time) flag (-1, 0 or 1)
If the DST flag is 0, the time is given in the regular time zone;
if it is 1, the time is given in the DST time zone;
if it is -1, mktime() should guess based on the date and time.
Variables:
timezone -- difference in seconds between UTC and local standard time
altzone -- difference in  seconds between UTC and local DST time
daylight -- whether local time should reflect DST
tzname -- tuple of (standard time zone name, DST time zone name)
Functions:
time() -- return current time in seconds since the Epoch as a float
clock() -- return CPU time since process start as a float
sleep() -- delay for a number of seconds given as a float
gmtime() -- convert seconds since Epoch to UTC tuple
localtime() -- convert seconds since Epoch to local time tuple
asctime() -- convert time tuple to string
ctime() -- convert time in seconds to string
mktime() -- convert local time tuple to seconds since Epoch
strftime() -- convert time tuple to string according to format specification
strptime() -- parse string to time tuple according to format specification
tzset() -- change the local timezone
xxsubtype is an example module showing how to subtype builtin types from C.
test_descr.py in the standard test suite requires it in order to complete.
If you don't care about the examples, and don't intend to run the Python
test suite, you can recompile Python without Modules/xxsubtype.c.
/__init__.pyc
/__init__.pyo
/__init__.py
find_module(fullname, path=None) -> self or None.
Search for a module specified by 'fullname'. 'fullname' must be the
fully qualified (dotted) module name. It returns the zipimporter
instance itself if the module was found, or None if it wasn't.
The optional 'path' argument is ignored -- it's there for compatibility
with the importer protocol.
load_module(fullname) -> module.
Load the module specified by 'fullname'. 'fullname' must be the
fully qualified (dotted) module name. It returns the imported
module, or raises ZipImportError if it wasn't found.
get_data(pathname) -> string with file data.
Return the data associated with 'pathname'. Raise IOError if
the file wasn't found.
is_package(fullname) -> bool.
Return True if the module specified by fullname is a package.
Raise ZipImportError if the module couldn't be found.
get_code(fullname) -> code object.
Return the code object for the specified module. Raise ZipImportError
if the module couldn't be found.
get_source(fullname) -> source string.
Return the source code for the specified module. Raise ZipImportError
if the module couldn't be found, return None if the archive does
contain the module, but has no source for it.
get_filename(fullname) -> filename string.
Return the filename for the specified module.
zipimporter(archivepath) -> zipimporter object
Create a new zipimporter instance. 'archivepath' must be a path to
a zipfile, or to a specific path inside a zipfile. For example, it can be
'/tmp/myimport.zip', or '/tmp/myimport.zip/mydirectory', if mydirectory is a
valid directory inside the archive.
'ZipImportError is raised if 'archivepath' doesn't point to a valid Zip
archive.
The 'archive' attribute of zipimporter objects contains the name of the
zipfile targeted.
zipimport provides support for importing Python modules from Zip archives.
This module exports three objects:
- zipimporter: a class; its constructor takes a path to a Zip archive.
- ZipImportError: exception raised by zipimporter objects. It's a
  subclass of ImportError, so it can be caught as ImportError, too.
- _zip_directory_cache: a dict, mapping archive paths to zip directory
  info dicts, as used in zipimporter._files.
It is usually not needed to use the zipimport module explicitly; it is
used by the builtin import mechanism for sys.path items that are paths
to Zip archives.
compressobj([level]) -- Return a compressor object.
Optional arg level is the compression level, in 0-9.
decompressobj([wbits]) -- Return a decompressor object.
Optional arg wbits is the window buffer size.
compress(string[, level]) -- Returned compressed string.
Optional arg level is the compression level, in 0-9.
decompress(string[, wbits[, bufsize]]) -- Return decompressed string.
Optional arg wbits is the window buffer size.  Optional arg bufsize is
the initial output buffer size.
compress(data) -- Return a string containing data compressed.
After calling this function, some of the input data may still
be stored in internal buffers for later processing.
Call the flush() method to clear these buffers.
decompress(data, max_length) -- Return a string containing the decompressed
version of the data.
After calling this function, some of the input data may still be stored in
internal buffers for later processing.
Call the flush() method to clear these buffers.
If the max_length parameter is specified then the return value will be
no longer than max_length.  Unconsumed input data will be stored in
the unconsumed_tail attribute.
flush( [mode] ) -- Return a string containing any remaining compressed data.
mode can be one of the constants Z_SYNC_FLUSH, Z_FULL_FLUSH, Z_FINISH; the
default value used when mode is not specified is Z_FINISH.
If mode == Z_FINISH, the compressor object can no longer be used after
calling the flush() method.  Otherwise, more data can still be compressed.
copy() -- Return a copy of the compression object.
copy() -- Return a copy of the decompression object.
flush( [length] ) -- Return a string containing any remaining
decompressed data. length, if given, is the initial size of the
output buffer.
The decompressor object can no longer be used after this call.
adler32(string[, start]) -- Compute an Adler-32 checksum of string.
An optional starting value can be specified.  The returned checksum is
a signed integer.
crc32(string[, start]) -- Compute a CRC-32 checksum of string.
An optional starting value can be specified.  The returned checksum is
a signed integer.
The functions in this module allow compression and decompression using the
zlib library, which is based on GNU zip.
adler32(string[, start]) -- Compute an Adler-32 checksum.
compress(string[, level]) -- Compress string, with compression level in 0-9.
compressobj([level]) -- Return a compressor object.
crc32(string[, start]) -- Compute a CRC-32 checksum.
decompress(string,[wbits],[bufsize]) -- Decompresses a compressed string.
decompressobj([wbits]) -- Return a decompressor object.
'wbits' is window buffer size.
Compressor objects support compress() and flush() methods; decompressor
objects support decompress() and flush().
I.encode(unicode[, errors]) -> (string, length consumed)
Return an encoded string version of `unicode'. errors may be given to
set a different error handling scheme. Default is 'strict' meaning that
encoding errors raise a UnicodeEncodeError. Other possible values are
'ignore', 'replace' and 'xmlcharrefreplace' as well as any other name
registered with codecs.register_error that can handle UnicodeEncodeErrors.
I.decode(string[, errors]) -> (unicodeobject, length consumed)
Decodes `string' using I, an MultibyteCodec instance. errors may be given
to set a different error handling scheme. Default is 'strict' meaning
that encoding errors raise a UnicodeDecodeError. Other possible values
are 'ignore' and 'replace' as well as any other name registered with
codecs.register_error that is able to handle UnicodeDecodeErrors.
The io module provides the Python interfaces to stream handling. The
builtin open function is defined in this module.
At the top of the I/O hierarchy is the abstract base class IOBase. It
defines the basic interface to a stream. Note, however, that there is no
separation between reading and writing to streams; implementations are
allowed to raise an IOError if they do not support a given operation.
Extending IOBase is RawIOBase which deals simply with the reading and
writing of raw bytes to a stream. FileIO subclasses RawIOBase to provide
an interface to OS files.
BufferedIOBase deals with buffering on a raw byte stream (RawIOBase). Its
subclasses, BufferedWriter, BufferedReader, and BufferedRWPair buffer
streams that are readable, writable, and both respectively.
BufferedRandom provides a buffered interface to random access
streams. BytesIO is a simple stream of in-memory bytes.
Another IOBase subclass, TextIOBase, deals with the encoding and decoding
of streams into text. TextIOWrapper, which extends it, is a buffered text
interface to a buffered raw stream (`BufferedIOBase`). Finally, StringIO
is a in-memory stream for text.
Argument names are not part of the specification, and only the arguments
of open() are intended to be used as keyword arguments.
DEFAULT_BUFFER_SIZE
   An int containing the default buffer size used by the module's buffered
   I/O classes. open() uses the file's blksize (as obtained by os.stat) if
   possible.
Open file and return a stream.  Raise IOError upon failure.
file is either a text or byte string giving the name (and the path
if the file isn't in the current working directory) of the file to
be opened or an integer file descriptor of the file to be
wrapped. (If a file descriptor is given, it is closed when the
returned I/O object is closed, unless closefd is set to False.)
mode is an optional string that specifies the mode in which the file
is opened. It defaults to 'r' which means open for reading in text
mode.  Other common values are 'w' for writing (truncating the file if
it already exists), and 'a' for appending (which on some Unix systems,
means that all writes append to the end of the file regardless of the
current seek position). In text mode, if encoding is not specified the
encoding used is platform dependent. (For reading and writing raw
bytes use binary mode and leave encoding unspecified.) The available
modes are:
========= ===============================================================
Character Meaning
--------- ---------------------------------------------------------------
'r'       open for reading (default)
'w'       open for writing, truncating the file first
'a'       open for writing, appending to the end of the file if it exists
'b'       binary mode
't'       text mode (default)
'+'       open a disk file for updating (reading and writing)
'U'       universal newline mode (for backwards compatibility; unneeded
          for new code)
========= ===============================================================
The default mode is 'rt' (open for reading text). For binary random
access, the mode 'w+b' opens and truncates the file to 0 bytes, while
'r+b' opens the file without truncation.
Python distinguishes between files opened in binary and text modes,
even when the underlying operating system doesn't. Files opened in
binary mode (appending 'b' to the mode argument) return contents as
bytes objects without any decoding. In text mode (the default, or when
't' is appended to the mode argument), the contents of the file are
returned as strings, the bytes having been first decoded using a
platform-dependent encoding or using the specified encoding if given.
buffering is an optional integer used to set the buffering policy.
Pass 0 to switch buffering off (only allowed in binary mode), 1 to select
line buffering (only usable in text mode), and an integer > 1 to indicate
the size of a fixed-size chunk buffer.  When no buffering argument is
given, the default buffering policy works as follows:
* Binary files are buffered in fixed-size chunks; the size of the buffer
  is chosen using a heuristic trying to determine the underlying device's
  "block size" and falling back on `io.DEFAULT_BUFFER_SIZE`.
  On many systems, the buffer will typically be 4096 or 8192 bytes long.
* "Interactive" text files (files for which isatty() returns True)
  use line buffering.  Other text files use the policy described above
  for binary files.
encoding is the name of the encoding used to decode or encode the
file. This should only be used in text mode. The default encoding is
platform dependent, but any encoding supported by Python can be
passed.  See the codecs module for the list of supported encodings.
errors is an optional string that specifies how encoding errors are to
be handled---this argument should not be used in binary mode. Pass
'strict' to raise a ValueError exception if there is an encoding error
(the default of None has the same effect), or pass 'ignore' to ignore
errors. (Note that ignoring encoding errors can lead to data loss.)
See the documentation for codecs.register for a list of the permitted
encoding error strings.
newline controls how universal newlines works (it only applies to text
mode). It can be None, '', '\n', '\r', and '\r\n'.  It works as
follows:
* On input, if newline is None, universal newlines mode is
  enabled. Lines in the input can end in '\n', '\r', or '\r\n', and
  these are translated into '\n' before being returned to the
  caller. If it is '', universal newline mode is enabled, but line
  endings are returned to the caller untranslated. If it has any of
  the other legal values, input lines are only terminated by the given
  string, and the line ending is returned to the caller untranslated.
* On output, if newline is None, any '\n' characters written are
  translated to the system default line separator, os.linesep. If
  newline is '', no translation takes place. If newline is any of the
  other legal values, any '\n' characters written are translated to
  the given string.
If closefd is False, the underlying file descriptor will be kept open
when the file is closed. This does not work when a file name is given
and must be True in that case.
open() returns a file object whose type depends on the mode, and
through which the standard file operations such as reading and writing
are performed. When open() is used to open a file in a text mode ('w',
'r', 'wt', 'rt', etc.), it returns a TextIOWrapper. When used to open
a file in a binary mode, the returned class varies: in read binary
mode, it returns a BufferedReader; in write binary and append binary
modes, it returns a BufferedWriter, and in read/write mode, it returns
a BufferedRandom.
It is also possible to use a string or bytearray as a file for both
reading and writing. For strings StringIO can be used like a file
opened in a text mode, and for bytes a BytesIO can be used like a file
opened in a binary mode.
Base class for buffered IO objects.
The main difference with RawIOBase is that the read() method
supports omitting the size argument, and does not have a default
implementation that defers to readinto().
In addition, read(), readinto() and write() may raise
BlockingIOError if the underlying raw stream is in non-blocking
mode and not ready; unlike their raw counterparts, they will never
return None.
A typical implementation should not inherit from a RawIOBase
implementation, but wrap one.
Disconnect this buffer from its underlying raw stream and return it.
After the raw stream has been detached, the buffer is in an unusable
Read and return up to n bytes.
If the argument is omitted, None, or negative, reads and
returns all data until EOF.
If the argument is positive, and the underlying raw stream is
not 'interactive', multiple raw reads may be issued to satisfy
the byte count (unless EOF is reached first).  But for
interactive raw streams (as well as sockets and pipes), at most
one raw read will be issued, and a short result does not imply
that EOF is imminent.
Returns an empty bytes object on EOF.
Returns None if the underlying raw stream was open in non-blocking
mode and no data is available at the moment.
Read and return up to n bytes, with at most one read() call
to the underlying raw stream. A short result does not imply
that EOF is imminent.
Returns an empty bytes object on EOF.
Write the given buffer to the IO stream.
Returns the number of bytes written, which is never less than
len(b).
Raises BlockingIOError if the buffer is full and the
underlying raw stream cannot accept more data at the moment.
Create a new buffered reader using the given readable raw IO object.
A buffer for a writeable sequential RawIO object.
The constructor creates a BufferedWriter for the given writeable raw
stream. If the buffer_size is not given, it defaults to
DEFAULT_BUFFER_SIZE. max_buffer_size isn't used anymore.
A buffered reader and writer object together.
A buffered reader object and buffered writer object put together to
form a sequential IO object that can read and write. This is typically
used with a socket or two-way pipe.
reader and writer are RawIOBase objects that are readable and
writeable respectively. If the buffer_size is omitted it defaults to
DEFAULT_BUFFER_SIZE.
A buffered interface to random access streams.
The constructor creates a reader and writer for a seekable stream,
raw, given in the first argument. If the buffer_size is omitted it
defaults to DEFAULT_BUFFER_SIZE. max_buffer_size isn't used anymore.
readable() -> bool. Returns True if the IO object can be read.
writable() -> bool. Returns True if the IO object can be written.
seekable() -> bool. Returns True if the IO object can be seeked.
flush() -> None.  Does nothing.
getvalue() -> bytes.
Retrieve the entire contents of the BytesIO object.
isatty() -> False.
Always returns False since BytesIO objects are not connected
to a tty-like device.
tell() -> current file position, an integer
read([size]) -> read at most size bytes, returned as a string.
If the size argument is negative, read until EOF is reached.
Return an empty string at EOF.
read1(size) -> read at most size bytes, returned as a string.
If the size argument is negative or omitted, read until EOF is reached.
Return an empty string at EOF.
readline([size]) -> next line from the file, as a string.
Retain newline.  A non-negative size argument limits the maximum
number of bytes to return (an incomplete line may be returned then).
Return an empty string at EOF.
readlines([size]) -> list of strings, each a line from the file.
Call readline() repeatedly and return a list of the lines so read.
The optional size argument, if given, is an approximate bound on the
total number of bytes in the lines returned.
readinto(bytearray) -> int.  Read up to len(b) bytes into b.
Returns number of bytes read (0 for EOF), or None if the object
is set not to block as has no data to read.
truncate([size]) -> int.  Truncate the file to at most size bytes.
Size defaults to the current file position, as returned by tell().
The current file position is unchanged.  Returns the new size.
seek(pos, whence=0) -> int.  Change stream position.
Seek to byte offset pos relative to position indicated by whence:
     0  Start of stream (the default).  pos should be >= 0;
     1  Current position - pos may be negative;
     2  End of stream - pos usually negative.
Returns the new absolute position.
write(bytes) -> int.  Write bytes to file.
Return the number of bytes written.
writelines(sequence_of_strings) -> None.  Write strings to the file.
Note that newlines are not added.  The sequence can be any iterable
object producing strings. This is equivalent to calling write() for
each string.
close() -> None.  Disable all I/O operations.
BytesIO([buffer]) -> object
Create a buffered I/O implementation using an in-memory bytes
buffer, ready for reading and writing.
file(name: str[, mode: str]) -> file IO object
Open a file.  The mode can be 'r', 'w' or 'a' for reading (default),
writing or appending.  The file will be created if it doesn't exist
when opened for writing or appending; it will be truncated when
opened for writing.  Add a '+' to the mode to allow simultaneous
reading and writing.
read(size: int) -> bytes.  read at most size bytes, returned as bytes.
Only makes one system call, so less data may be returned than requested
In non-blocking mode, returns None if no data is available.
On end-of-file, returns ''.
readall() -> bytes.  read all data from the file, returned as bytes.
In non-blocking mode, returns as much as is immediately available,
or None if no data is available.  On end-of-file, returns ''.
write(b: bytes) -> int.  Write bytes b to file, return number written.
Only makes one system call, so not all of the data may be written.
The number of bytes actually written is returned.
fileno() -> int. "file descriptor".
This is needed for lower-level file interfaces, such the fcntl module.
seek(offset: int[, whence: int]) -> None.  Move to new file position.
Argument offset is a byte count.  Optional argument whence defaults to
0 (offset from start of file, offset should be >= 0); other values are 1
(move relative to current position, positive or negative), and 2 (move
relative to end of file, usually negative, although many platforms allow
seeking beyond the end of a file).
Note that not all file objects are seekable.
truncate([size: int]) -> None.  Truncate the file to at most size bytes.
Size defaults to the current file position, as returned by tell().The current file position is changed to the value of size.
tell() -> int.  Current file position
readinto() -> Same as RawIOBase.readinto().
close() -> None.  Close the file.
A closed file cannot be used for further I/O operations.  close() may be
called more than once without error.  Changes the fileno to -1.
isatty() -> bool.  True if the file is connected to a tty device.
seekable() -> bool.  True if file supports random-access.
readable() -> bool.  True if file was opened in a read mode.
writable() -> bool.  True if file was opened in a write mode.
The abstract base class for all I/O classes, acting on streams of
bytes. There is no public constructor.
This class provides dummy implementations for many methods that
derived classes can override selectively; the default implementations
represent a file that cannot be read, written or seeked.
Even though IOBase does not declare read, readinto, or write because
their signatures will vary, implementations and clients should
consider those methods part of the interface. Also, implementations
may raise a IOError when operations they do not support are called.
The basic type used for binary data read from or written to a file is
bytes. bytearrays are accepted too, and in some cases (such as
readinto) needed. Text I/O classes work with str data.
Note that calling any method (even inquiries) on a closed stream is
undefined. Implementations may raise IOError in this case.
IOBase (and its subclasses) support the iterator protocol, meaning
that an IOBase object can be iterated over yielding the lines in a
stream.
IOBase also supports the :keyword:`with` statement. In this example,
fp is closed after the suite of the with statement is complete:
with open('spam.txt', 'r') as fp:
    fp.write('Spam and eggs!')
Change stream position.
Change the stream position to the given byte offset. The offset is
interpreted relative to the position indicated by whence.  Values
for whence are:
* 0 -- start of stream (the default); offset should be zero or positive
* 1 -- current stream position; offset may be negative
* 2 -- end of stream; offset is usually negative
Return the new absolute position.
Return current stream position.
Truncate file to size bytes.
File pointer is left unchanged.  Size defaults to the current IO
position as reported by tell().  Returns the new size.
Flush write buffers, if applicable.
This is not implemented for read-only and non-blocking streams.
Flush and close the IO object.
This method has no effect if the file is already closed.
Return whether object supports random access.
If False, seek(), tell() and truncate() will raise IOError.
This method may need to do a test seek().
Return whether object was opened for reading.
If False, read() will raise IOError.
Return whether object was opened for writing.
If False, read() will raise IOError.
Returns underlying file descriptor if one exists.
An IOError is raised if the IO object does not use a file descriptor.
Return whether this is an 'interactive' stream.
Return False if it can't be determined.
Read and return a line from the stream.
If limit is specified, at most limit bytes will be read.
The line terminator is always b'\n' for binary files; for text
files, the newlines argument to open can be used to select the line
terminator(s) recognized.
Return a list of lines from the stream.
hint can be specified to control the number of lines read: no more
lines will be read if the total size (in bytes/characters) of all
lines so far exceeds hint.
Base class for raw binary I/O.
Read until EOF, using multiple read() call.
Text I/O implementation using an in-memory buffer.
The initial_value argument sets the value of object.  The newline
argument is like the one of TextIOWrapper's constructor.
Retrieve the entire contents of the object.
Tell the current file position.
Read at most n characters, returned as a string.
If the argument is negative or omitted, read until EOF
is reached. Return an empty string at EOF.
Read until newline or EOF.
Returns an empty string if EOF is hit immediately.
Truncate size to pos.
The pos argument defaults to the current file position, as
returned by tell().  The current file position is unchanged.
Returns the new absolute position.
Change stream position.
Seek to character offset pos relative to position indicated by whence:
    0  Start of stream (the default).  pos should be >= 0;
    1  Current position - pos must be 0;
    2  End of stream - pos must be 0.
Returns the new absolute position.
Write string to file.
Returns the number of characters written, which is always equal to
the length of the string.
Close the IO object. Attempting any further operation after the
object is closed will raise a ValueError.
This method has no effect if the file is already closed.
readable() -> bool. Returns True if the IO object can be read.
writable() -> bool. Returns True if the IO object can be written.
seekable() -> bool. Returns True if the IO object can be seeked.
Base class for text I/O.
This class provides a character and line based interface to stream
I/O. There is no readinto method because Python's character strings
are immutable. There is no public constructor.
Separate the underlying buffer from the TextIOBase and return it.
After the underlying buffer has been detached, the TextIO is in an
unusable state.
Read at most n characters from stream.
Read from underlying buffer until we have n characters or we hit EOF.
If n is negative or omitted, read until EOF.
Read until newline or EOF.
Returns an empty string if EOF is hit immediately.
Write string to stream.
Returns the number of characters written (which is always equal to
the length of the string).
Encoding of the text stream.
Subclasses should override.
Line endings translated so far.
Only line endings translated during reading are considered.
Subclasses should override.
The error setting of the decoder or encoder.
Subclasses should override.
Codec used when reading a file in universal newlines mode.  It wraps
another incremental decoder, translating \r\n and \r into \n.  It also
records the types of newlines encountered.  When used with
translate=False, it ensures that the newline sequence is returned in
one piece. When used with decoder=None, it expects unicode strings as
decode input and translates newlines without first invoking an external
decoder.
Character and line based layer over a BufferedIOBase object, buffer.
encoding gives the name of the encoding that the stream will be
decoded or encoded with. It defaults to locale.getpreferredencoding.
errors determines the strictness of encoding and decoding (see the
codecs.register) and defaults to "strict".
newline controls how line endings are handled. It can be None, '',
'\n', '\r', and '\r\n'.  It works as follows:
* On input, if newline is None, universal newlines mode is
  enabled. Lines in the input can end in '\n', '\r', or '\r\n', and
  these are translated into '\n' before being returned to the
  caller. If it is '', universal newline mode is enabled, but line
  endings are returned to the caller untranslated. If it has any of
  the other legal values, input lines are only terminated by the given
  string, and the line ending is returned to the caller untranslated.
* On output, if newline is None, any '\n' characters written are
  translated to the system default line separator, os.linesep. If
  newline is '', no translation takes place. If newline is any of the
  other legal values, any '\n' characters written are translated to
  the given string.
If line_buffering is True, a call to flush is implied when a call to
write contains a newline character.
bool(x) -> bool
Returns True when the argument x is true, False otherwise.
The builtins True and False are the only two instances of the class bool.
The class bool is a subclass of the class int, and cannot be subclassed.
buffer(object [, offset[, size]])
Create a new buffer object which references the given object.
The buffer will reference a slice of the target object from the
start of the object (or at the specified offset). The slice will
extend to the end of the target object (or with the specified size).
B.expandtabs([tabsize]) -> copy of B
Return a copy of B where all tab characters are expanded using spaces.
If tabsize is not given, a tab size of 8 characters is assumed.
B.ljust(width[, fillchar]) -> copy of B
Return B left justified in a string of length width. Padding is
done using the specified fill character (default is a space).
B.rjust(width[, fillchar]) -> copy of B
Return B right justified in a string of length width. Padding is
done using the specified fill character (default is a space)
B.center(width[, fillchar]) -> copy of B
Return B centered in a string of length width.  Padding is
done using the specified fill character (default is a space).
B.zfill(width) -> copy of B
Pad a numeric string B with zeros on the left, to fill a field
of the specified width.  B is never truncated.
B.find(sub [,start [,end]]) -> int
Return the lowest index in B where subsection sub is found,
such that sub is contained within B[start,end].  Optional
arguments start and end are interpreted as in slice notation.
Return -1 on failure.
B.count(sub [,start [,end]]) -> int
Return the number of non-overlapping occurrences of subsection sub in
bytes B[start:end].  Optional arguments start and end are interpreted
as in slice notation.
B.index(sub [,start [,end]]) -> int
Like B.find() but raise ValueError when the subsection is not found.
B.rfind(sub [,start [,end]]) -> int
Return the highest index in B where subsection sub is found,
such that sub is contained within B[start,end].  Optional
arguments start and end are interpreted as in slice notation.
Return -1 on failure.
B.rindex(sub [,start [,end]]) -> int
Like B.rfind() but raise ValueError when the subsection is not found.
B.startswith(prefix [,start [,end]]) -> bool
Return True if B starts with the specified prefix, False otherwise.
With optional start, test B beginning at that position.
With optional end, stop comparing B at that position.
prefix can also be a tuple of strings to try.
B.endswith(suffix [,start [,end]]) -> bool
Return True if B ends with the specified suffix, False otherwise.
With optional start, test B beginning at that position.
With optional end, stop comparing B at that position.
suffix can also be a tuple of strings to try.
B.translate(table[, deletechars]) -> bytearray
Return a copy of B, where all characters occurring in the
optional argument deletechars are removed, and the remaining
characters have been mapped through the given translation
table, which must be a bytes object of length 256.
B.replace(old, new[, count]) -> bytes
Return a copy of B with all occurrences of subsection
old replaced by new.  If the optional argument count is
given, only the first count occurrences are replaced.
B.split([sep[, maxsplit]]) -> list of bytearray
Return a list of the sections in B, using sep as the delimiter.
If sep is not given, B is split on ASCII whitespace characters
(space, tab, return, newline, formfeed, vertical tab).
If maxsplit is given, at most maxsplit splits are done.
B.partition(sep) -> (head, sep, tail)
Searches for the separator sep in B, and returns the part before it,
the separator itself, and the part after it.  If the separator is not
found, returns B and two empty bytearray objects.
B.rpartition(sep) -> (head, sep, tail)
Searches for the separator sep in B, starting at the end of B,
and returns the part before it, the separator itself, and the
part after it.  If the separator is not found, returns two empty
bytearray objects and B.
B.rsplit(sep[, maxsplit]) -> list of bytearray
Return a list of the sections in B, using sep as the delimiter,
starting at the end of B and working to the front.
If sep is not given, B is split on ASCII whitespace characters
(space, tab, return, newline, formfeed, vertical tab).
If maxsplit is given, at most maxsplit splits are done.
B.reverse() -> None
Reverse the order of the values in B in place.
B.insert(index, int) -> None
Insert a single item into the bytearray before the given index.
B.append(int) -> None
Append a single item to the end of B.
B.extend(iterable int) -> None
Append all the elements from the iterator or sequence to the
end of B.
B.pop([index]) -> int
Remove and return a single item from B. If no index
argument is given, will pop the last value.
B.remove(int) -> None
Remove the first occurance of a value in B.
B.strip([bytes]) -> bytearray
Strip leading and trailing bytes contained in the argument.
If the argument is omitted, strip ASCII whitespace.
B.lstrip([bytes]) -> bytearray
Strip leading bytes contained in the argument.
If the argument is omitted, strip leading ASCII whitespace.
B.rstrip([bytes]) -> bytearray
Strip trailing bytes contained in the argument.
If the argument is omitted, strip trailing ASCII whitespace.
B.decode([encoding[, errors]]) -> unicode object.
Decodes B using the codec registered for encoding. encoding defaults
to the default encoding. errors may be given to set a different error
handling scheme.  Default is 'strict' meaning that encoding errors raise
a UnicodeDecodeError.  Other possible values are 'ignore' and 'replace'
as well as any other name registered with codecs.register_error that is
able to handle UnicodeDecodeErrors.
B.__alloc__() -> int
Returns the number of bytes actually allocated.
B.join(iterable_of_bytes) -> bytes
Concatenates any number of bytearray objects, with B in between each pair.
B.splitlines(keepends=False) -> list of lines
Return a list of the lines in B, breaking at line boundaries.
Line breaks are not included in the resulting list unless keepends
is given and true.
bytearray.fromhex(string) -> bytearray
Create a bytearray object from a string of hexadecimal numbers.
Spaces between two numbers are accepted.
Example: bytearray.fromhex('B9 01EF') -> bytearray(b'\xb9\x01\xef').
Return state information for pickling.
B.__sizeof__() -> int
Returns the size of B in memory, in bytes
bytearray(iterable_of_ints) -> bytearray.
bytearray(string, encoding[, errors]) -> bytearray.
bytearray(bytes_or_bytearray) -> mutable copy of bytes_or_bytearray.
bytearray(memory_view) -> bytearray.
Construct an mutable bytearray object from:
  - an iterable yielding integers in range(256)
  - a text string encoded using the specified encoding
  - a bytes or a bytearray object
  - any object implementing the buffer API.
bytearray(int) -> bytearray.
Construct a zero-initialized bytearray of the given length.
Private method returning an estimate of len(list(it)).
Capsule objects let you wrap a C "void *" pointer in a Python
object.  They're a way of passing data through the Python interpreter
without creating your own custom type.
Capsules are used for communication between extension modules.
They provide a way for an extension module to export a C interface
to other extension modules, so that extension modules can use the
Python import mechanism to link to one another.
classobj(name, bases, dict)
Create a class object.  The name must be a string; the second argument
a tuple of classes, and the third a dictionary.
instance(class[, dict])
Create an instance without calling its __init__() method.
The class must be a classic class.
If present, dict must be a dictionary or None.
instancemethod(function, instance, class)
Create an instance method object.
C objects to be exported from one extension module to another
C objects are used for communication between extension modules.  They
provide a way for an extension module to export a C interface to other
extension modules, so that extension modules can use the Python import
mechanism to link to one another.
code(argcount, nlocals, stacksize, flags, codestring, constants, names,
      varnames, filename, name, firstlineno, lnotab[, freevars[, cellvars]])
Create a code object.  Not for the faint of heart.
complex.conjugate() -> complex
Returns the complex conjugate of its argument. (3-4j).conjugate() == 3+4j.
complex.__format__() -> str
Converts to a string according to format_spec.
complex(real[, imag]) -> complex number
Create a complex number from a real part and an optional imaginary part.
This is equivalent to (real + imag*1j) where imag defaults to 0.
Descriptor to change the getter on a property.
Descriptor to change the setter on a property.
Descriptor to change the deleter on a property.
property(fget=None, fset=None, fdel=None, doc=None) -> property attribute
fget is a function to be used for getting an attribute value, and likewise
fset is a function for setting, and fdel a function for del'ing, an
attribute.  Typical use is to define a managed attribute x:
class C(object):
    def getx(self): return self._x
    def setx(self, value): self._x = value
    def delx(self): del self._x
    x = property(getx, setx, delx, "I'm the 'x' property.")
Decorators make defining new properties or modifying existing ones easy:
class C(object):
    @property
    def x(self): return self._x
    @x.setter
    def x(self, value): self._x = value
    @x.deleter
    def x(self): del self._x
D.has_key(k) -> True if D has a key k, else False
D.__contains__(k) -> True if D has a key k, else False
x.__getitem__(y) <==> x[y]
D.__sizeof__() -> size of D in memory, in bytes
D.get(k[,d]) -> D[k] if k in D, else d.  d defaults to None.
D.setdefault(k[,d]) -> D.get(k,d), also set D[k]=d if k not in D
D.pop(k[,d]) -> v, remove specified key and return the corresponding value.
If key is not found, d is returned if given, otherwise KeyError is raised
D.popitem() -> (k, v), remove and return some (key, value) pair as a
2-tuple; but raise KeyError if D is empty.
D.keys() -> list of D's keys
D.items() -> list of D's (key, value) pairs, as 2-tuples
D.values() -> list of D's values
D.update([E, ]**F) -> None.  Update D from dict/iterable E and F.
If E present and has a .keys() method, does:     for k in E: D[k] = E[k]
If E present and lacks .keys() method, does:     for (k, v) in E: D[k] = v
In either case, this is followed by: for k in F: D[k] = F[k]
dict.fromkeys(S[,v]) -> New dict with keys from S and values equal to v.
v defaults to None.
D.clear() -> None.  Remove all items from D.
D.copy() -> a shallow copy of D
D.iterkeys() -> an iterator over the keys of D
D.itervalues() -> an iterator over the values of D
D.iteritems() -> an iterator over the (key, value) items of D
D.viewkeys() -> a set-like object providing a view on D's keys
D.viewitems() -> a set-like object providing a view on D's items
D.viewvalues() -> an object providing a view on D's values
dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)
Private method returning an estimate of len(list(it)).
enumerate(iterable[, start]) -> iterator for index, value of iterable
Return an enumerate object.  iterable must be another object that supports
iteration.  The enumerate object yields pairs containing a count (from
start, which defaults to zero) and a value yielded by the iterable argument.
enumerate is useful for obtaining an indexed list:
    (0, seq[0]), (1, seq[1]), (2, seq[2]), ...
reversed(sequence) -> reverse iterator over values of the sequence
Return a reverse iterator
Python's standard exception class hierarchy.
Exceptions found here are defined both in the exceptions module and the
built-in namespace.  It is recommended that user-defined exceptions
inherit from Exception.  See the documentation for the exception
inheritance hierarchy.
readline([size]) -> next line from the file, as a string.
Retain newline.  A non-negative size argument limits the maximum
number of bytes to return (an incomplete line may be returned then).
Return an empty string at EOF.
read([size]) -> read at most size bytes, returned as a string.
If the size argument is negative or omitted, read until EOF is reached.
Notice that when in non-blocking mode, less data than what was requested
may be returned, even if no size parameter was given.
write(str) -> None.  Write string str to file.
Note that due to buffering, flush() or close() may be needed before
the file on disk reflects the data written.
fileno() -> integer "file descriptor".
This is needed for lower-level file interfaces, such os.read().
seek(offset[, whence]) -> None.  Move to new file position.
Argument offset is a byte count.  Optional argument whence defaults to
0 (offset from start of file, offset should be >= 0); other values are 1
(move relative to current position, positive or negative), and 2 (move
relative to end of file, usually negative, although many platforms allow
seeking beyond the end of a file).  If the file is opened in text mode,
only offsets returned by tell() are legal.  Use of other offsets causes
undefined behavior.
Note that not all file objects are seekable.
truncate([size]) -> None.  Truncate the file to at most size bytes.
Size defaults to the current file position, as returned by tell().
tell() -> current file position, an integer (may be a long integer).
readinto() -> Undocumented.  Don't use this; it may go away.
readlines([size]) -> list of strings, each a line from the file.
Call readline() repeatedly and return a list of the lines so read.
The optional size argument, if given, is an approximate bound on the
total number of bytes in the lines returned.
xreadlines() -> returns self.
For backward compatibility. File objects now include the performance
optimizations previously implemented in the xreadlines module.
writelines(sequence_of_strings) -> None.  Write the strings to the file.
Note that newlines are not added.  The sequence can be any iterable object
producing strings. This is equivalent to calling write() for each string.
flush() -> None.  Flush the internal I/O buffer.
close() -> None or (perhaps) an integer.  Close the file.
Sets data attribute .closed to True.  A closed file cannot be used for
further I/O operations.  close() may be called more than once without
error.  Some kinds of file objects (for example, opened by popen())
may return an exit status upon closing.
isatty() -> true or false.  True if the file is connected to a tty device.
__enter__() -> self.
__exit__(*excinfo) -> None.  Closes the file.
file(name[, mode[, buffering]]) -> file object
Open a file.  The mode can be 'r', 'w' or 'a' for reading (default),
writing or appending.  The file will be created if it doesn't exist
when opened for writing or appending; it will be truncated when
opened for writing.  Add a 'b' to the mode for binary files.
Add a '+' to the mode to allow simultaneous reading and writing.
If the buffering argument is given, 0 means unbuffered, 1 means line
buffered, and larger numbers specify the buffer size.  The preferred way
to open a file is with the builtin open() function.
Add a 'U' to mode to open the file for input with universal newline
support.  Any line ending in the input file will be seen as a '\n'
in Python.  Also, a file so opened gains the attribute 'newlines';
the value for this attribute is one of None (no newline read yet),
'\r', '\n', '\r\n' or a tuple containing all the newline types seen.
'U' cannot be combined with 'w' or '+' mode.
sys.float_info
A structseq holding information about the float type. It contains low level
information about the precision and internal representation. Please study
your system's :file:`float.h` for more information.
float.hex() -> string
Return a hexadecimal representation of a floating-point number.
>>> (-0.1).hex()
'-0x1.999999999999ap-4'
>>> 3.14159.hex()
'0x1.921f9f01b866ep+1'
float.fromhex(string) -> float
Create a floating-point number from a hexadecimal string.
>>> float.fromhex('0x1.ffffp10')
2047.984375
>>> float.fromhex('-0x1p-1074')
-4.9406564584124654e-324
float.as_integer_ratio() -> (int, int)
Returns a pair of integers, whose ratio is exactly equal to the original
float and with a positive denominator.
Raises OverflowError on infinities and a ValueError on NaNs.
>>> (10.0).as_integer_ratio()
(10, 1)
>>> (0.0).as_integer_ratio()
>>> (-.25).as_integer_ratio()
(-1, 4)
float.__getformat__(typestr) -> string
You probably don't want to use this function.  It exists mainly to be
used in Python's test suite.
typestr must be 'double' or 'float'.  This function returns whichever of
'unknown', 'IEEE, big-endian' or 'IEEE, little-endian' best describes the
format of floating point numbers used by the C type named by typestr.
float.__setformat__(typestr, fmt) -> None
You probably don't want to use this function.  It exists mainly to be
used in Python's test suite.
typestr must be 'double' or 'float'.  fmt must be one of 'unknown',
'IEEE, big-endian' or 'IEEE, little-endian', and in addition can only be
one of the latter two if it appears to match the underlying C reality.
Overrides the automatic determination of C-level floating point type.
This affects how floats are converted to and from binary strings.
float.__format__(format_spec) -> string
Formats the float according to format_spec.
float(x) -> floating point number
Convert a string or number to a floating point number, if possible.
F.__sizeof__() -> size of F in memory, in bytes
function(code, globals[, name[, argdefs[, closure]]])
Create a function object from a code object and a dictionary.
The optional name string overrides the name from the code object.
The optional argdefs tuple specifies the default argument values.
The optional closure tuple supplies the bindings for free variables.
classmethod(function) -> method
Convert a function to be a class method.
A class method receives the class as implicit first argument,
just like an instance method receives the instance.
To declare a class method, use this idiom:
  class C:
      def f(cls, arg1, arg2, ...): ...
      f = classmethod(f)
It can be called either on the class (e.g. C.f()) or on an instance
(e.g. C().f()).  The instance is ignored except for its class.
If a class method is called for a derived class, the derived class
object is passed as the implied first argument.
Class methods are different than C++ or Java static methods.
If you want those, see the staticmethod builtin.
staticmethod(function) -> method
Convert a function to be a static method.
A static method does not receive an implicit first argument.
To declare a static method, use this idiom:
     class C:
     def f(arg1, arg2, ...): ...
     f = staticmethod(f)
It can be called either on the class (e.g. C.f()) or on an instance
(e.g. C().f()).  The instance is ignored except for its class.
Static methods in Python are similar to those found in Java or C++.
For a more advanced concept, see the classmethod builtin.
send(arg) -> send 'arg' into generator,
return next yielded value or raise StopIteration.
close() -> raise GeneratorExit inside generator.
throw(typ[,val[,tb]]) -> raise exception in generator,
return next yielded value or raise StopIteration.
Return the name of the generator's associated code object.
int.bit_length() -> int
Number of bits necessary to represent self in binary.
>>> bin(37)
'0b100101'
>>> (37).bit_length()
int(x=0) -> int or long
int(x, base=10) -> int or long
Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is floating point, the conversion truncates towards zero.
If x is outside the integer range, the function returns a long instead.
If x is not a number or if base is given, then x must be a string or
Unicode object representing an integer literal in the given base.  The
literal can be preceded by '+' or '-' and be surrounded by whitespace.
The base defaults to 10.  Valid bases are 0 and 2-36.  Base 0 means to
interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
Private method returning an estimate of len(list(it)).
Object wrapper with a custom sort key.
cmp() wrapper for sort with custom keys.
x.__getitem__(y) <==> x[y]
L.__reversed__() -- return a reverse iterator over the list
L.__sizeof__() -- size of L in memory, in bytes
L.append(object) -- append object to end
L.extend(iterable) -- extend list by appending elements from the iterable
L.insert(index, object) -- insert object before index
L.pop([index]) -> item -- remove and return item at index (default last).
Raises IndexError if list is empty or index is out of range.
L.remove(value) -- remove first occurrence of value.
Raises ValueError if the value is not present.
L.index(value, [start, [stop]]) -> integer -- return first index of value.
Raises ValueError if the value is not present.
L.count(value) -> integer -- return number of occurrences of value
L.reverse() -- reverse *IN PLACE*
L.sort(cmp=None, key=None, reverse=False) -- stable sort *IN PLACE*;
cmp(x, y) -> -1, 0, 1
list() -> new empty list
list(iterable) -> new list initialized from iterable's items
Private method returning an estimate of len(list(it)).
long.bit_length() -> int or long
Number of bits necessary to represent self in binary.
>>> bin(37L)
'0b100101'
>>> (37L).bit_length()
long(x=0) -> long
long(x, base=10) -> long
Convert a number or string to a long integer, or return 0L if no arguments
are given.  If x is floating point, the conversion truncates towards zero.
If x is not a number or if base is given, then x must be a string or
Unicode object representing an integer literal in the given base.  The
literal can be preceded by '+' or '-' and be surrounded by whitespace.
The base defaults to 10.  Valid bases are 0 and 2-36.  Base 0 means to
interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
sys.long_info
A struct sequence that holds information about Python's
internal representation of integers.  The attributes are read only.
memoryview(object)
Create a new memoryview object which references the given object.
module(name[, doc])
Create a module object.
The name must be a string; the optional doc argument can have any type.
xrange(stop) -> xrange object
xrange(start, stop[, step]) -> xrange object
Like range(), but instead of returning a list, returns an object that
generates the numbers in the range on demand.  For looping, this is 
slightly faster than range() and more memory efficient.
Returns a reverse iterator.
Private method returning an estimate of len(list(it)).
Remove and return an arbitrary set element.
Raises KeyError if the set is empty.
Private method returning an estimate of len(list(it)).
Update a set with the union of itself and others.
Return a shallow copy of a set.
Remove all elements from this set.
Return the union of sets as a new set.
(i.e. all elements that are in either set.)
Return the intersection of two or more sets as a new set.
(i.e. elements that are common to all of the sets.)
Update a set with the intersection of itself and another.
Return True if two sets have a null intersection.
Remove all elements of another set from this set.
Return the difference of two or more sets as a new set.
(i.e. all elements that are in this set but not the others.)
Update a set with the symmetric difference of itself and another.
Return the symmetric difference of two sets as a new set.
(i.e. all elements that are in exactly one of the sets.)
Report whether another set contains this set.
Report whether this set contains another set.
Add an element to a set.
This has no effect if the element is already present.
x.__contains__(y) <==> y in x.
Remove an element from a set; it must be a member.
If the element is not a member, raise a KeyError.
Remove an element from a set if it is a member.
If the element is not a member, do nothing.
Return state information for pickling.
S.__sizeof__() -> size of S in memory, in bytes
set() -> new empty set object
set(iterable) -> new set object
Build an unordered collection of unique elements.
frozenset() -> empty frozenset object
frozenset(iterable) -> frozenset object
Build an immutable unordered collection of unique elements.
Return state information for pickling.
slice(stop)
slice(start, stop[, step])
Create a slice object.  This is used for extended slicing (e.g. a[0:10:2]).
S.indices(len) -> (start, stop, stride)
Assuming a sequence of length len, calculate the start and stop
indices, and the stride length of the extended slice described by
S. Out of bounds indices are clipped in a manner consistent with the
handling of normal slices.
S.split([sep [,maxsplit]]) -> list of strings
Return a list of the words in the string S, using sep as the
delimiter string.  If maxsplit is given, at most maxsplit
splits are done. If sep is not specified or is None, any
whitespace string is a separator and empty strings are removed
from the result.
S.partition(sep) -> (head, sep, tail)
Search for the separator sep in S, and return the part before it,
the separator itself, and the part after it.  If the separator is not
found, return S and two empty strings.
S.rpartition(sep) -> (head, sep, tail)
Search for the separator sep in S, starting at the end of S, and return
the part before it, the separator itself, and the part after it.  If the
separator is not found, return two empty strings and S.
S.rsplit([sep [,maxsplit]]) -> list of strings
Return a list of the words in the string S, using sep as the
delimiter string, starting at the end of the string and working
to the front.  If maxsplit is given, at most maxsplit splits are
done. If sep is not specified or is None, any whitespace string
is a separator.
S.join(iterable) -> string
Return a string which is the concatenation of the strings in the
iterable.  The separator between elements is S.
S.find(sub [,start [,end]]) -> int
Return the lowest index in S where substring sub is found,
such that sub is contained within S[start:end].  Optional
arguments start and end are interpreted as in slice notation.
Return -1 on failure.
S.index(sub [,start [,end]]) -> int
Like S.find() but raise ValueError when the substring is not found.
S.rfind(sub [,start [,end]]) -> int
Return the highest index in S where substring sub is found,
such that sub is contained within S[start:end].  Optional
arguments start and end are interpreted as in slice notation.
Return -1 on failure.
S.rindex(sub [,start [,end]]) -> int
Like S.rfind() but raise ValueError when the substring is not found.
S.strip([chars]) -> string or unicode
Return a copy of the string S with leading and trailing
whitespace removed.
If chars is given and not None, remove characters in chars instead.
If chars is unicode, S will be converted to unicode before stripping
S.lstrip([chars]) -> string or unicode
Return a copy of the string S with leading whitespace removed.
If chars is given and not None, remove characters in chars instead.
If chars is unicode, S will be converted to unicode before stripping
S.rstrip([chars]) -> string or unicode
Return a copy of the string S with trailing whitespace removed.
If chars is given and not None, remove characters in chars instead.
If chars is unicode, S will be converted to unicode before stripping
S.lower() -> string
Return a copy of the string S converted to lowercase.
S.upper() -> string
Return a copy of the string S converted to uppercase.
S.title() -> string
Return a titlecased version of S, i.e. words start with uppercase
characters, all remaining cased characters have lowercase.
S.capitalize() -> string
Return a copy of the string S with only its first character
capitalized.
S.count(sub[, start[, end]]) -> int
Return the number of non-overlapping occurrences of substring sub in
string S[start:end].  Optional arguments start and end are interpreted
as in slice notation.
S.swapcase() -> string
Return a copy of the string S with uppercase characters
converted to lowercase and vice versa.
S.translate(table [,deletechars]) -> string
Return a copy of the string S, where all characters occurring
in the optional argument deletechars are removed, and the
remaining characters have been mapped through the given
translation table, which must be a string of length 256 or None.
If the table argument is None, no translation is applied and
the operation simply removes the characters in deletechars.
S.replace(old, new[, count]) -> string
Return a copy of string S with all occurrences of substring
old replaced by new.  If the optional argument count is
given, only the first count occurrences are replaced.
S.startswith(prefix[, start[, end]]) -> bool
Return True if S starts with the specified prefix, False otherwise.
With optional start, test S beginning at that position.
With optional end, stop comparing S at that position.
prefix can also be a tuple of strings to try.
S.endswith(suffix[, start[, end]]) -> bool
Return True if S ends with the specified suffix, False otherwise.
With optional start, test S beginning at that position.
With optional end, stop comparing S at that position.
suffix can also be a tuple of strings to try.
S.encode([encoding[,errors]]) -> object
Encodes S using the codec registered for encoding. encoding defaults
to the default encoding. errors may be given to set a different error
handling scheme. Default is 'strict' meaning that encoding errors raise
a UnicodeEncodeError. Other possible values are 'ignore', 'replace' and
'xmlcharrefreplace' as well as any other name registered with
codecs.register_error that is able to handle UnicodeEncodeErrors.
S.decode([encoding[,errors]]) -> object
Decodes S using the codec registered for encoding. encoding defaults
to the default encoding. errors may be given to set a different error
handling scheme. Default is 'strict' meaning that encoding errors raise
a UnicodeDecodeError. Other possible values are 'ignore' and 'replace'
as well as any other name registered with codecs.register_error that is
able to handle UnicodeDecodeErrors.
S.expandtabs([tabsize]) -> string
Return a copy of S where all tab characters are expanded using spaces.
If tabsize is not given, a tab size of 8 characters is assumed.
S.ljust(width[, fillchar]) -> string
Return S left-justified in a string of length width. Padding is
done using the specified fill character (default is a space).
S.rjust(width[, fillchar]) -> string
Return S right-justified in a string of length width. Padding is
done using the specified fill character (default is a space)
S.center(width[, fillchar]) -> string
Return S centered in a string of length width. Padding is
done using the specified fill character (default is a space)
S.zfill(width) -> string
Pad a numeric string S with zeros on the left, to fill a field
of the specified width.  The string S is never truncated.
S.isspace() -> bool
Return True if all characters in S are whitespace
and there is at least one character in S, False otherwise.
S.isalpha() -> bool
Return True if all characters in S are alphabetic
and there is at least one character in S, False otherwise.
S.isalnum() -> bool
Return True if all characters in S are alphanumeric
and there is at least one character in S, False otherwise.
S.isdigit() -> bool
Return True if all characters in S are digits
and there is at least one character in S, False otherwise.
S.islower() -> bool
Return True if all cased characters in S are lowercase and there is
at least one cased character in S, False otherwise.
S.isupper() -> bool
Return True if all cased characters in S are uppercase and there is
at least one cased character in S, False otherwise.
S.istitle() -> bool
Return True if S is a titlecased string and there is at least one
character in S, i.e. uppercase characters may only follow uncased
characters and lowercase characters only cased ones. Return False
otherwise.
S.splitlines(keepends=False) -> list of strings
Return a list of the lines in S, breaking at line boundaries.
Line breaks are not included in the resulting list unless keepends
is given and true.
S.__sizeof__() -> size of S in memory, in bytes
S.format(*args, **kwargs) -> string
Return a formatted version of S, using substitutions from args and kwargs.
The substitutions are identified by braces ('{' and '}').
S.__format__(format_spec) -> string
Return a formatted version of S as described by format_spec.
Type basestring cannot be instantiated; it is the base for str and unicode.
str(object='') -> string
Return a nice string representation of the object.
If the argument is a string, the return value is the same object.
n_sequence_fields
n_fields
n_unnamed_fields
tuple() -> empty tuple
tuple(iterable) -> tuple initialized from iterable's items
If the argument is a tuple, the return value is the same object.
T.index(value, [start, [stop]]) -> integer -- return first index of value.
Raises ValueError if the value is not present.
T.count(value) -> integer -- return number of occurrences of value
T.__sizeof__() -- size of T in memory, in bytes
Private method returning an estimate of len(list(it)).
type(object) -> the object's type
type(name, bases, dict) -> a new type
Abstract classes can override this to customize issubclass().
This is invoked early on by abc.ABCMeta.__subclasscheck__().
It should return True, False or NotImplemented.  If it returns
NotImplemented, the normal algorithm is used.  Otherwise, it
overrides the normal algorithm (and the outcome is cached).
super(type, obj) -> bound super object; requires isinstance(obj, type)
super(type) -> unbound super object
super(type, type2) -> bound super object; requires issubclass(type2, type)
Typical use to call a cooperative superclass method:
class C(B):
    def meth(self, arg):
        super(C, self).meth(arg)
 !""#$%&'"""()*+,-./0123456789:;<=>?@@@ABC@@@DEF@@@@@@G
HIJKLM@NOPQRST@@UV""""""W"""""X""""""""""""""""""""""""""""""""""""YZ[\"""]"""^_"""""`"""a""""""""""bcd""""""ef""""""""g""""""""""""""h""""""""i""""e""""""""""""""""""""h""""""j""""""""""""""""kl"""""""""""""""""mn"""""""""""""""""o"""""""""p""qrstuvwxyz
{"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""|@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@}~
""""""""
"""""""""""""""W
""""""""""""""""""""""""""""""""""""""""""""""""
"""""""""""
""""""""""""""""""""""""""""""""""
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
""""""""""""""""""""""""""""""""

0////123123123
//////////////////
////////////
\]]^_`aaabcd
777kkkkkkkkkkkkkkkk
ffffffffffffffff
nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn
oooooooooooooooooooooooooooooooooooooo
///////////////////////////
//////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////
//////////////////////
//////////////////////////////////////////////////////
//////////
///////
////////
//////////////////////
///////
//////////////////////
///////
/////////
//////////////////////
///////
////////
//////////////////////
///////
////////////
////////
///////////////////////
//////////
////////
///////////////////////
//////////
////////
///////////////////////
////////////////
//////////////////
////////////////////////
/////////
///////
////////////////////////////////////////////////
///////
////////
////////////////////////////////////
///////////////////////////////////////////
/////////////
pppppppppppppppppppppppppppppppppppppp
///////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////
/////////////////////////////////////////
/////////////////////////////////
///////
///////////////
/////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////
////////////////
/////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////
//////////////////////////
///////////////////////////////////////////////////////////////////////////
/////////////
//////////////////
/////////////
////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////
//////////////////////////////////////////////////////////////////////
/////////////////////////////
//////////////////////////////
////////////////////////////////////////////
///////
///////////////////////
/////////////////////////////////////////////////////
///////////////////////////////////////////////
///////
//////////////////////////////
////////////////////////////////////
//////////////////////////////////////////////////////
/////////////////////////////////////
{{{{{{{{||||||||{{{{{{
{{{{{{{{||||||||{{{{{{{{||||||||{{{{{{
|{{{{{{{{||||||||}}~~~~
{{{{{{{{
nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn
ooooooooooooooooooooooooooooooooooooooooooooooo
//////////////////////////////////////////////////////
///////////////////////
///////
//////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////
////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////
///////
////////////////////////////////////////
//////////////////////////////
////////
////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////
/////////////////////////////////////////////////////////////////
//////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////
///////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////
/////////////
//////////////////////////////////////////////
/////////////
////////////////
//////////////////////////////////////////////////////////////////////
/////////
///////
///////////////////////
////////////////////////////////////////////////////
//////////////////////////////////////////////////
////////////////////////////
///////////////////////
/////////////////////////////
///////////////////////////////////////////////
/////////////////////////////////////////
////////
///////////////////////
////////////////////////////////////////////////
///////////////////////////////////
////////////////////////////////////
///////////////////////
/////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////
///////
/////////////////////////////////////////////////////////
//////////////////////////////
/////////////////////////////////////////
////////////////////////////////////////////////
//////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////
/////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////
////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////
////////////
//////////////////////////
///////////////////
///////////////
//////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////
/////////////////////////////////////////////////
///////////////////////////////
/////////////////
////////
//////////////////////////////
////////////////////////////////////
////////
//////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////
///////////////////////
//////////////////////
//////////////////////////
///////////////////////////
/////////////////////////////
//////////////////////////////////////////////////////
//////////////////////
///////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////
aaaaaaaaaaaaaaaaaaaaaaaaaa
aaaaaaaa
aaaaaaaaaaaaaaaaaaaaaaaaaa
aaaaaaaa
aaaaaaa
aaaaaaaaaaaaaaaaaaaaaaaaaa
aaaaaaaaaaaaaaaaaaaaaaaaa
//////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////
////////
///////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////
///////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////
//////////////////////////////
S.title() -> unicode
Return a titlecased version of S, i.e. words start with title case
characters, all remaining cased characters have lower case.
S.capitalize() -> unicode
Return a capitalized version of S, i.e. make the first character
have upper case and the rest lower case.
S.center(width[, fillchar]) -> unicode
Return S centered in a Unicode string of length width. Padding is
done using the specified fill character (default is a space)
S.__sizeof__() -> size of S in memory, in bytes
S.count(sub[, start[, end]]) -> int
Return the number of non-overlapping occurrences of substring sub in
Unicode string S[start:end].  Optional arguments start and end are
interpreted as in slice notation.
S.encode([encoding[,errors]]) -> string or unicode
Encodes S using the codec registered for encoding. encoding defaults
to the default encoding. errors may be given to set a different error
handling scheme. Default is 'strict' meaning that encoding errors raise
a UnicodeEncodeError. Other possible values are 'ignore', 'replace' and
'xmlcharrefreplace' as well as any other name registered with
codecs.register_error that can handle UnicodeEncodeErrors.
S.decode([encoding[,errors]]) -> string or unicode
Decodes S using the codec registered for encoding. encoding defaults
to the default encoding. errors may be given to set a different error
handling scheme. Default is 'strict' meaning that encoding errors raise
a UnicodeDecodeError. Other possible values are 'ignore' and 'replace'
as well as any other name registered with codecs.register_error that is
able to handle UnicodeDecodeErrors.
S.expandtabs([tabsize]) -> unicode
Return a copy of S where all tab characters are expanded using spaces.
If tabsize is not given, a tab size of 8 characters is assumed.
S.find(sub [,start [,end]]) -> int
Return the lowest index in S where substring sub is found,
such that sub is contained within S[start:end].  Optional
arguments start and end are interpreted as in slice notation.
Return -1 on failure.
S.index(sub [,start [,end]]) -> int
Like S.find() but raise ValueError when the substring is not found.
S.islower() -> bool
Return True if all cased characters in S are lowercase and there is
at least one cased character in S, False otherwise.
S.isupper() -> bool
Return True if all cased characters in S are uppercase and there is
at least one cased character in S, False otherwise.
S.istitle() -> bool
Return True if S is a titlecased string and there is at least one
character in S, i.e. upper- and titlecase characters may only
follow uncased characters and lowercase characters only cased ones.
Return False otherwise.
S.isspace() -> bool
Return True if all characters in S are whitespace
and there is at least one character in S, False otherwise.
S.isalpha() -> bool
Return True if all characters in S are alphabetic
and there is at least one character in S, False otherwise.
S.isalnum() -> bool
Return True if all characters in S are alphanumeric
and there is at least one character in S, False otherwise.
S.isdecimal() -> bool
Return True if there are only decimal characters in S,
False otherwise.
S.isdigit() -> bool
Return True if all characters in S are digits
and there is at least one character in S, False otherwise.
S.isnumeric() -> bool
Return True if there are only numeric characters in S,
False otherwise.
S.join(iterable) -> unicode
Return a string which is the concatenation of the strings in the
iterable.  The separator between elements is S.
S.ljust(width[, fillchar]) -> int
Return S left-justified in a Unicode string of length width. Padding is
done using the specified fill character (default is a space).
S.lower() -> unicode
Return a copy of the string S converted to lowercase.
S.strip([chars]) -> unicode
Return a copy of the string S with leading and trailing
whitespace removed.
If chars is given and not None, remove characters in chars instead.
If chars is a str, it will be converted to unicode before stripping
S.lstrip([chars]) -> unicode
Return a copy of the string S with leading whitespace removed.
If chars is given and not None, remove characters in chars instead.
If chars is a str, it will be converted to unicode before stripping
S.rstrip([chars]) -> unicode
Return a copy of the string S with trailing whitespace removed.
If chars is given and not None, remove characters in chars instead.
If chars is a str, it will be converted to unicode before stripping
S.replace(old, new[, count]) -> unicode
Return a copy of S with all occurrences of substring
old replaced by new.  If the optional argument count is
given, only the first count occurrences are replaced.
S.rfind(sub [,start [,end]]) -> int
Return the highest index in S where substring sub is found,
such that sub is contained within S[start:end].  Optional
arguments start and end are interpreted as in slice notation.
Return -1 on failure.
S.rindex(sub [,start [,end]]) -> int
Like S.rfind() but raise ValueError when the substring is not found.
S.rjust(width[, fillchar]) -> unicode
Return S right-justified in a Unicode string of length width. Padding is
done using the specified fill character (default is a space).
S.split([sep [,maxsplit]]) -> list of strings
Return a list of the words in S, using sep as the
delimiter string.  If maxsplit is given, at most maxsplit
splits are done. If sep is not specified or is None, any
whitespace string is a separator and empty strings are
removed from the result.
S.partition(sep) -> (head, sep, tail)
Search for the separator sep in S, and return the part before it,
the separator itself, and the part after it.  If the separator is not
found, return S and two empty strings.
S.rpartition(sep) -> (head, sep, tail)
Search for the separator sep in S, starting at the end of S, and return
the part before it, the separator itself, and the part after it.  If the
separator is not found, return two empty strings and S.
S.rsplit([sep [,maxsplit]]) -> list of strings
Return a list of the words in S, using sep as the
delimiter string, starting at the end of the string and
working to the front.  If maxsplit is given, at most maxsplit
splits are done. If sep is not specified, any whitespace string
is a separator.
S.splitlines(keepends=False) -> list of strings
Return a list of the lines in S, breaking at line boundaries.
Line breaks are not included in the resulting list unless keepends
is given and true.
S.swapcase() -> unicode
Return a copy of S with uppercase characters converted to lowercase
and vice versa.
S.translate(table) -> unicode
Return a copy of the string S, where all characters have been mapped
through the given translation table, which must be a mapping of
Unicode ordinals to Unicode ordinals, Unicode strings or None.
Unmapped characters are left untouched. Characters mapped to None
are deleted.
S.upper() -> unicode
Return a copy of S converted to uppercase.
S.zfill(width) -> unicode
Pad a numeric string S with zeros on the left, to fill a field
of the specified width. The string S is never truncated.
S.startswith(prefix[, start[, end]]) -> bool
Return True if S starts with the specified prefix, False otherwise.
With optional start, test S beginning at that position.
With optional end, stop comparing S at that position.
prefix can also be a tuple of strings to try.
S.endswith(suffix[, start[, end]]) -> bool
Return True if S ends with the specified suffix, False otherwise.
With optional start, test S beginning at that position.
With optional end, stop comparing S at that position.
suffix can also be a tuple of strings to try.
S.format(*args, **kwargs) -> unicode
Return a formatted version of S, using substitutions from args and kwargs.
The substitutions are identified by braces ('{' and '}').
S.__format__(format_spec) -> unicode
Return a formatted version of S as described by format_spec.
unicode(object='') -> unicode object
unicode(string[, encoding[, errors]]) -> unicode object
Create a new Unicode object from the given encoded string.
encoding defaults to the current default string encoding.
errors can be 'strict', 'replace' or 'ignore' and defaults to 'strict'.
GetStdHandle(handle) -> integer
Return a handle to the specified standard device
(STD_INPUT_HANDLE, STD_OUTPUT_HANDLE, STD_ERROR_HANDLE).
The integer associated with the handle object is returned.
GetCurrentProcess() -> handle
Return a handle object for the current process.
DuplicateHandle(source_proc_handle, source_handle,
                 target_proc_handle, target_handle, access,
                 inherit[, options]) -> handle
Return a duplicate handle object.
The duplicate handle refers to the same object as the original
handle. Therefore, any changes to the object are reflected
through both handles.
CreatePipe(pipe_attrs, size) -> (read_handle, write_handle)
Create an anonymous pipe, and return handles to the read and
write ends of the pipe.
pipe_attrs is ignored internally and can be None.
CreateProcess(app_name, cmd_line, proc_attrs, thread_attrs,
               inherit, flags, env_mapping, curdir,
               startup_info) -> (proc_handle, thread_handle,
                                 pid, tid)
Create a new process and its primary thread. The return
value is a tuple of the process handle, thread handle,
process ID, and thread ID.
proc_attrs and thread_attrs are ignored internally and can be None.
TerminateProcess(handle, exit_code) -> None
Terminate the specified process and all of its threads.
GetExitCodeProcess(handle) -> Exit code
Return the termination status of the specified process.
WaitForSingleObject(handle, timeout) -> result
Wait until the specified object is in the signaled state or
the time-out interval elapses. The timeout value is specified
in milliseconds.
GetVersion() -> version
Return the version number of the current operating system.
GetModuleFileName(module) -> path
Return the fully-qualified path for the file that contains
the specified module. The module must have been loaded by the
current process.
The module parameter should be a handle to the loaded module
whose path is being requested. If this parameter is 0, 
GetModuleFileName retrieves the path of the executable file
of the current process.
Object is not a handle
This module provides access to the Windows registry API.
Functions:
CloseKey() - Closes a registry key.
ConnectRegistry() - Establishes a connection to a predefined registry handle
                    on another computer.
CreateKey() - Creates the specified key, or opens it if it already exists.
DeleteKey() - Deletes the specified key.
DeleteValue() - Removes a named value from the specified registry key.
EnumKey() - Enumerates subkeys of the specified open registry key.
EnumValue() - Enumerates values of the specified open registry key.
ExpandEnvironmentStrings() - Expand the env strings in a REG_EXPAND_SZ string.
FlushKey() - Writes all the attributes of the specified key to the registry.
LoadKey() - Creates a subkey under HKEY_USER or HKEY_LOCAL_MACHINE and stores
            registration information from a specified file into that subkey.
OpenKey() - Alias for <om win32api.RegOpenKeyEx>
OpenKeyEx() - Opens the specified key.
QueryValue() - Retrieves the value associated with the unnamed value for a
               specified key in the registry.
QueryValueEx() - Retrieves the type and data for a specified value name
                 associated with an open registry key.
QueryInfoKey() - Returns information about the specified key.
SaveKey() - Saves the specified key, and all its subkeys a file.
SetValue() - Associates a value with a specified key.
SetValueEx() - Stores data in the value field of an open registry key.
Special objects:
HKEYType -- type object for HKEY objects
error -- exception raised for Win32 errors
Integer constants:
Many constants are defined - see the documentation for each function
to see what constants are used, and where.
CloseKey(hkey) - Closes a previously opened registry key.
The hkey argument specifies a previously opened key.
Note that if the key is not closed using this method, it will be
closed when the hkey object is destroyed by Python.
key = ConnectRegistry(computer_name, key) - Establishes a connection to a predefined registry handle on another computer.
computer_name is the name of the remote computer, of the form \\computername.
 If None, the local computer is used.
key is the predefined handle to connect to.
The return value is the handle of the opened key.
If the function fails, a WindowsError exception is raised.
key = CreateKey(key, sub_key) - Creates or opens the specified key.
key is an already open key, or one of the predefined HKEY_* constants
sub_key is a string that names the key this method opens or creates.
 If key is one of the predefined keys, sub_key may be None. In that case,
 the handle returned is the same key handle passed in to the function.
If the key already exists, this function opens the existing key
The return value is the handle of the opened key.
If the function fails, an exception is raised.
See OpenKey()
key = CreateKeyEx(key, sub_key, res, sam) - Creates or opens the specified key.
key is an already open key, or one of the predefined HKEY_* constants
sub_key is a string that names the key this method opens or creates.
res is a reserved integer, and must be zero.  Default is zero.
sam is an integer that specifies an access mask that describes the desired
 If key is one of the predefined keys, sub_key may be None. In that case,
 the handle returned is the same key handle passed in to the function.
If the key already exists, this function opens the existing key
The return value is the handle of the opened key.
If the function fails, an exception is raised.
DeleteKey(key, sub_key) - Deletes the specified key.
key is an already open key, or any one of the predefined HKEY_* constants.
sub_key is a string that must be a subkey of the key identified by the key parameter.
 This value must not be None, and the key may not have subkeys.
This method can not delete keys with subkeys.
If the method succeeds, the entire key, including all of its values,
is removed.  If the method fails, a WindowsError exception is raised.
DeleteKeyEx(key, sub_key, sam, res) - Deletes the specified key.
key is an already open key, or any one of the predefined HKEY_* constants.
sub_key is a string that must be a subkey of the key identified by the key parameter.
res is a reserved integer, and must be zero.  Default is zero.
sam is an integer that specifies an access mask that describes the desired
 This value must not be None, and the key may not have subkeys.
This method can not delete keys with subkeys.
If the method succeeds, the entire key, including all of its values,
is removed.  If the method fails, a WindowsError exception is raised.
On unsupported Windows versions, NotImplementedError is raised.
DeleteValue(key, value) - Removes a named value from a registry key.
key is an already open key, or any one of the predefined HKEY_* constants.
value is a string that identifies the value to remove.
string = EnumKey(key, index) - Enumerates subkeys of an open registry key.
key is an already open key, or any one of the predefined HKEY_* constants.
index is an integer that identifies the index of the key to retrieve.
The function retrieves the name of one subkey each time it is called.
It is typically called repeatedly until a WindowsError exception is
raised, indicating no more values are available.
tuple = EnumValue(key, index) - Enumerates values of an open registry key.
key is an already open key, or any one of the predefined HKEY_* constants.
index is an integer that identifies the index of the value to retrieve.
The function retrieves the name of one subkey each time it is called.
It is typically called repeatedly, until a WindowsError exception
is raised, indicating no more values.
The result is a tuple of 3 items:
value_name is a string that identifies the value.
value_data is an object that holds the value data, and whose type depends
 on the underlying registry type.
data_type is an integer that identifies the type of the value data.
string = ExpandEnvironmentStrings(string) - Expand environment vars.
FlushKey(key) - Writes all the attributes of a key to the registry.
key is an already open key, or any one of the predefined HKEY_* constants.
It is not necessary to call RegFlushKey to change a key.
Registry changes are flushed to disk by the registry using its lazy flusher.
Registry changes are also flushed to disk at system shutdown.
Unlike CloseKey(), the FlushKey() method returns only when all the data has
been written to the registry.
An application should only call FlushKey() if it requires absolute certainty that registry changes are on disk.
If you don't know whether a FlushKey() call is required, it probably isn't.
LoadKey(key, sub_key, file_name) - Creates a subkey under the specified key
and stores registration information from a specified file into that subkey.
key is an already open key, or any one of the predefined HKEY_* constants.
sub_key is a string that identifies the sub_key to load
file_name is the name of the file to load registry data from.
 This file must have been created with the SaveKey() function.
 Under the file allocation table (FAT) file system, the filename may not
have an extension.
A call to LoadKey() fails if the calling process does not have the
SE_RESTORE_PRIVILEGE privilege.
If key is a handle returned by ConnectRegistry(), then the path specified
in fileName is relative to the remote computer.
The docs imply key must be in the HKEY_USER or HKEY_LOCAL_MACHINE tree
key = OpenKey(key, sub_key, res = 0, sam = KEY_READ) - Opens the specified key.
key is an already open key, or any one of the predefined HKEY_* constants.
sub_key is a string that identifies the sub_key to open
res is a reserved integer, and must be zero.  Default is zero.
sam is an integer that specifies an access mask that describes the desired
 security access for the key.  Default is KEY_READ
The result is a new handle to the specified key
If the function fails, a WindowsError exception is raised.
tuple = QueryInfoKey(key) - Returns information about a key.
key is an already open key, or any one of the predefined HKEY_* constants.
The result is a tuple of 3 items:An integer that identifies the number of sub keys this key has.
An integer that identifies the number of values this key has.
A long integer that identifies when the key was last modified (if available)
 as 100's of nanoseconds since Jan 1, 1600.
string = QueryValue(key, sub_key) - retrieves the unnamed value for a key.
key is an already open key, or any one of the predefined HKEY_* constants.
sub_key is a string that holds the name of the subkey with which the value
 is associated.  If this parameter is None or empty, the function retrieves
 the value set by the SetValue() method for the key identified by key.
Values in the registry have name, type, and data components. This method
retrieves the data for a key's first value that has a NULL name.
But the underlying API call doesn't return the type, Lame Lame Lame, DONT USE THIS!!!
value,type_id = QueryValueEx(key, value_name) - Retrieves the type and data for a specified value name associated with an open registry key.
key is an already open key, or any one of the predefined HKEY_* constants.
value_name is a string indicating the value to query
SaveKey(key, file_name) - Saves the specified key, and all its subkeys to the specified file.
key is an already open key, or any one of the predefined HKEY_* constants.
file_name is the name of the file to save registry data to.
 This file cannot already exist. If this filename includes an extension,
 it cannot be used on file allocation table (FAT) file systems by the
 LoadKey(), ReplaceKey() or RestoreKey() methods.
If key represents a key on a remote computer, the path described by
file_name is relative to the remote computer.
The caller of this method must possess the SeBackupPrivilege security privilege.
This function passes NULL for security_attributes to the API.
SetValue(key, sub_key, type, value) - Associates a value with a specified key.
key is an already open key, or any one of the predefined HKEY_* constants.
sub_key is a string that names the subkey with which the value is associated.
type is an integer that specifies the type of the data.  Currently this
 must be REG_SZ, meaning only strings are supported.
value is a string that specifies the new value.
If the key specified by the sub_key parameter does not exist, the SetValue
function creates it.
Value lengths are limited by available memory. Long values (more than
2048 bytes) should be stored as files with the filenames stored in 
the configuration registry.  This helps the registry perform efficiently.
The key identified by the key parameter must have been opened with
KEY_SET_VALUE access.
SetValueEx(key, value_name, reserved, type, value) - Stores data in the value field of an open registry key.
key is an already open key, or any one of the predefined HKEY_* constants.
value_name is a string containing the name of the value to set, or None
type is an integer that specifies the type of the data.  This should be one of:
  REG_BINARY -- Binary data in any form.
  REG_DWORD -- A 32-bit number.
  REG_DWORD_LITTLE_ENDIAN -- A 32-bit number in little-endian format.
  REG_DWORD_BIG_ENDIAN -- A 32-bit number in big-endian format.
  REG_EXPAND_SZ -- A null-terminated string that contains unexpanded references
                   to environment variables (for example, %PATH%).
  REG_LINK -- A Unicode symbolic link.
  REG_MULTI_SZ -- An sequence of null-terminated strings, terminated by
                  two null characters.  Note that Python handles this
                  termination automatically.
  REG_NONE -- No defined value type.
  REG_RESOURCE_LIST -- A device-driver resource list.
  REG_SZ -- A null-terminated string.
reserved can be anything - zero is always passed to the API.
value is a string that specifies the new value.
This method can also set additional value and type information for the
specified key.  The key identified by the key parameter must have been
opened with KEY_SET_VALUE access.
To open the key, use the CreateKeyEx() or OpenKeyEx() methods.
Value lengths are limited by available memory. Long values (more than
2048 bytes) should be stored as files with the filenames stored in 
the configuration registry.  This helps the registry perform efficiently.
Disables registry reflection for 32-bit processes running on a 64-bit
Operating System.  Will generally raise NotImplemented if executed on
a 32-bit Operating System.
If the key is not on the reflection list, the function succeeds but has no effect.
Disabling reflection for a key does not affect reflection of any subkeys.
Restores registry reflection for the specified disabled key.
Will generally raise NotImplemented if executed on a 32-bit Operating System.
Restoring reflection for a key does not affect reflection of any subkeys.
bool = QueryReflectionKey(hkey) - Determines the reflection state for the specified key.
Will generally raise NotImplemented if executed on a 32-bit Operating System.
PyHKEY Object - A Python object, representing a win32 registry key.
This object wraps a Windows HKEY object, automatically closing it when
the object is destroyed.  To guarantee cleanup, you can call either
the Close() method on the PyHKEY, or the CloseKey() method.
All functions which accept a handle object also accept an integer - 
however, use of the handle object is encouraged.
Functions:
Close() - Closes the underlying handle.
Detach() - Returns the integer Win32 handle, detaching it from the object
Properties:
handle - The integer Win32 handle.
Operations:
__nonzero__ - Handles with an open object return true, otherwise false.
__int__ - Converting a handle to an integer returns the Win32 handle.
__cmp__ - Handle objects are compared using the handle value.
key.Close() - Closes the underlying Windows handle.
If the handle is already closed, no error is raised.
int = key.Detach() - Detaches the Windows handle from the handle object.
The result is the value of the handle before it is detached.  If the
handle is already detached, this will return zero.
After calling this function, the handle is effectively invalidated,
but the handle is not closed.  You would call this function when you
need the underlying win32 handle to exist beyond the lifetime of the
handle object.
On 64 bit windows, the result of this function is a long integer
heapmin() -> None
Force the malloc() heap to clean itself up and return unused blocks
to the operating system. On failure, this raises IOError.
locking(fd, mode, nbytes) -> None
Lock part of a file based on file descriptor fd from the C runtime.
Raises IOError on failure. The locked region of the file extends from
the current file position for nbytes bytes, and may continue beyond
the end of the file. mode must be one of the LK_* constants listed
below. Multiple regions in a file may be locked at the same time, but
may not overlap. Adjacent regions are not merged; they must be unlocked
individually.
setmode(fd, mode) -> Previous mode
Set the line-end translation mode for the file descriptor fd. To set
it to text mode, flags should be os.O_TEXT; for binary, it should be
os.O_BINARY.
open_osfhandle(handle, flags) -> file descriptor
Create a C runtime file descriptor from the file handle handle. The
flags parameter should be a bitwise OR of os.O_APPEND, os.O_RDONLY,
and os.O_TEXT. The returned file descriptor may be used as a parameter
to os.fdopen() to create a file object.
get_osfhandle(fd) -> file handle
Return the file handle for the file descriptor fd. Raises IOError
if fd is not recognized.
kbhit() -> bool
Return true if a keypress is waiting to be read.
getch() -> key character
Read a keypress and return the resulting character. Nothing is echoed to
the console. This call will block if a keypress is not already
available, but will not wait for Enter to be pressed. If the pressed key
was a special function key, this will return '\000' or '\xe0'; the next
call will return the keycode. The Control-C keypress cannot be read with
this function.
getwch() -> Unicode key character
Wide char variant of getch(), returning a Unicode value.
getche() -> key character
Similar to getch(), but the keypress will be echoed if it represents
a printable character.
getwche() -> Unicode key character
Wide char variant of getche(), returning a Unicode value.
putch(char) -> None
Print the character char to the console without buffering.
putwch(unicode_char) -> None
Wide char variant of putch(), accepting a Unicode value.
ungetch(char) -> None
Cause the character char to be "pushed back" into the console buffer;
it will be the next character read by getch() or getche().
ungetwch(unicode_char) -> None
Wide char variant of ungetch(), accepting a Unicode value.
_warnings provides basic warning filtering support.
It is a helper module to speed up interpreter start-up.
Issue a warning, or maybe ignore it or raise an exception.
Low-level inferface to warnings functionality.
__import__(name, globals={}, locals={}, fromlist=[], level=-1) -> module
Import a module. Because this function is meant for use by the Python
interpreter and not for general use it is better to use
importlib.import_module() to programmatically import a module.
The globals argument is only used to determine the context;
they are not modified.  The locals argument is unused.  The fromlist
should be a list of names to emulate ``from name import ...'', or an
empty list to emulate ``import name''.
When importing a module from a package, note that __import__('A.B', ...)
returns package A when fromlist is empty, but its submodule B when
fromlist is not empty.  Level is used to determine whether to perform 
absolute or relative imports.  -1 is the original strategy of attempting
both absolute and relative imports, 0 is absolute, a positive number
is the number of parent directories to search relative to the current module.
abs(number) -> number
Return the absolute value of the argument.
all(iterable) -> bool
Return True if bool(x) is True for all values x in the iterable.
If the iterable is empty, return True.
any(iterable) -> bool
Return True if bool(x) is True for any x in the iterable.
If the iterable is empty, return False.
apply(object[, args[, kwargs]]) -> value
Call a callable object with positional arguments taken from the tuple args,
and keyword arguments taken from the optional dictionary kwargs.
Note that classes are callable, as are instances with a __call__() method.
Deprecated since release 2.3. Instead, use the extended call syntax:
    function(*args, **keywords).
bin(number) -> string
Return the binary representation of an integer or long integer.
callable(object) -> bool
Return whether the object is callable (i.e., some kind of function).
Note that classes are callable, as are instances with a __call__() method.
filter(function or None, sequence) -> list, tuple, or string
Return those items of sequence for which function(item) is true.  If
function is None, return the items that are true.  If sequence is a tuple
or string, return the same type, else return a list.
format(value[, format_spec]) -> string
Returns value.__format__(format_spec)
format_spec defaults to ""
chr(i) -> character
Return a string of one character with ordinal i; 0 <= i < 256.
unichr(i) -> Unicode character
Return a Unicode string of one character with ordinal i; 0 <= i <= 0x10ffff.
cmp(x, y) -> integer
Return negative if x<y, zero if x==y, positive if x>y.
coerce(x, y) -> (x1, y1)
Return a tuple consisting of the two numeric arguments converted to
a common type, using the same rules as used by arithmetic operations.
If coercion is not possible, raise TypeError.
compile(source, filename, mode[, flags[, dont_inherit]]) -> code object
Compile the source string (a Python module, statement or expression)
into a code object that can be executed by the exec statement or eval().
The filename will be used for run-time error messages.
The mode must be 'exec' to compile a module, 'single' to compile a
single (interactive) statement, or 'eval' to compile an expression.
The flags argument, if present, controls which future statements influence
the compilation of the code.
The dont_inherit argument, if non-zero, stops the compilation inheriting
the effects of any future statements in effect in the code calling
compile; if absent or zero these statements do influence the compilation,
in addition to any features explicitly specified.
dir([object]) -> list of strings
If called without an argument, return the names in the current scope.
Else, return an alphabetized list of names comprising (some of) the attributes
of the given object, and of attributes reachable from it.
If the object supplies a method named __dir__, it will be used; otherwise
the default dir() logic is used and returns:
  for a module object: the module's attributes.
  for a class object:  its attributes, and recursively the attributes
    of its bases.
  for any other object: its attributes, its class's attributes, and
    recursively the attributes of its class's base classes.
divmod(x, y) -> (quotient, remainder)
Return the tuple ((x-x%y)/y, x%y).  Invariant: div*y + mod == x.
eval(source[, globals[, locals]]) -> value
Evaluate the source in the context of globals and locals.
The source may be a string representing a Python expression
or a code object as returned by compile().
The globals must be a dictionary and locals can be any mapping,
defaulting to the current globals and locals.
If only globals is given, locals defaults to it.
execfile(filename[, globals[, locals]])
Read and execute a Python script from a file.
The globals and locals are dictionaries, defaulting to the current
globals and locals.  If only globals is given, locals defaults to it.
getattr(object, name[, default]) -> value
Get a named attribute from an object; getattr(x, 'y') is equivalent to x.y.
When a default argument is given, it is returned when the attribute doesn't
exist; without it, an exception is raised in that case.
globals() -> dictionary
Return the dictionary containing the current scope's global variables.
hasattr(object, name) -> bool
Return whether the object has an attribute with the given name.
(This is done by calling getattr(object, name) and catching exceptions.)
id(object) -> integer
Return the identity of an object.  This is guaranteed to be unique among
simultaneously existing objects.  (Hint: it's the object's memory address.)
argument %d to map() must support iteration
map(function, sequence[, sequence, ...]) -> list
Return a list of the results of applying the function to the items of
the argument sequence(s).  If more than one sequence is given, the
function is called with an argument list consisting of the corresponding
item of each sequence, substituting None for missing values when not all
sequences have the same length.  If the function is None, return a list of
the items of the sequence (or a list of tuples if more than one sequence).
next(iterator[, default])
Return the next item from the iterator. If default is given and the iterator
is exhausted, it is returned instead of raising StopIteration.
setattr(object, name, value)
Set a named attribute on an object; setattr(x, 'y', v) is equivalent to
``x.y = v''.
delattr(object, name)
Delete a named attribute on an object; delattr(x, 'y') is equivalent to
``del x.y''.
hash(object) -> integer
Return a hash value for the object.  Two objects with the same value have
the same hash value.  The reverse is not necessarily true, but likely.
hex(number) -> string
Return the hexadecimal representation of an integer or long integer.
input([prompt]) -> value
Equivalent to eval(raw_input(prompt)).
intern(string) -> string
``Intern'' the given string.  This enters the string in the (global)
table of interned strings whose purpose is to speed up dictionary lookups.
Return the string itself or the previously interned string object with the
same value.
iter(collection) -> iterator
iter(callable, sentinel) -> iterator
Get an iterator from an object.  In the first form, the argument must
supply its own iterator, or be a sequence.
In the second form, the callable is called until it returns the sentinel.
len(object) -> integer
Return the number of items of a sequence or mapping.
locals() -> dictionary
Update and return a dictionary containing the current scope's local variables.
min(iterable[, key=func]) -> value
min(a, b, c, ...[, key=func]) -> value
With a single iterable argument, return its smallest item.
With two or more arguments, return the smallest argument.
max(iterable[, key=func]) -> value
max(a, b, c, ...[, key=func]) -> value
With a single iterable argument, return its largest item.
With two or more arguments, return the largest argument.
oct(number) -> string
Return the octal representation of an integer or long integer.
open(name[, mode[, buffering]]) -> file object
Open a file using the file() type, returns a file object.  This is the
preferred way to open a file.  See file.__doc__ for further information.
ord(c) -> integer
Return the integer ordinal of a one-character string.
pow(x, y[, z]) -> number
With two arguments, equivalent to x**y.  With three arguments,
equivalent to (x**y) % z, but may be more efficient (e.g. for longs).
print(value, ..., sep=' ', end='\n', file=sys.stdout)
Prints the values to a stream, or to sys.stdout by default.
Optional keyword arguments:
file: a file-like object (stream); defaults to the current sys.stdout.
sep:  string inserted between values, default a space.
end:  string appended after the last value, default a newline.
range(stop) -> list of integers
range(start, stop[, step]) -> list of integers
Return a list containing an arithmetic progression of integers.
range(i, j) returns [i, i+1, i+2, ..., j-1]; start (!) defaults to 0.
When step is given, it specifies the increment (or decrement).
For example, range(4) returns [0, 1, 2, 3].  The end point is omitted!
These are exactly the valid indices for a list of 4 elements.
raw_input([prompt]) -> string
Read a string from standard input.  The trailing newline is stripped.
If the user hits EOF (Unix: Ctl-D, Windows: Ctl-Z+Return), raise EOFError.
On Unix, GNU readline is used if enabled.  The prompt string, if given,
is printed without a trailing newline before reading.
reduce(function, sequence[, initial]) -> value
Apply a function of two arguments cumulatively to the items of a sequence,
from left to right, so as to reduce the sequence to a single value.
For example, reduce(lambda x, y: x+y, [1, 2, 3, 4, 5]) calculates
((((1+2)+3)+4)+5).  If initial is present, it is placed before the items
of the sequence in the calculation, and serves as a default when the
sequence is empty.
reload(module) -> module
Reload the module.  The module must have been successfully imported before.
repr(object) -> string
Return the canonical string representation of the object.
For most object types, eval(repr(object)) == object.
round(number[, ndigits]) -> floating point number
Round a number to a given precision in decimal digits (default 0 digits).
This always returns a floating point number.  Precision may be negative.
sorted(iterable, cmp=None, key=None, reverse=False) --> new sorted list
vars([object]) -> dictionary
Without arguments, equivalent to locals().
With an argument, equivalent to object.__dict__.
sum(sequence[, start]) -> value
Returns the sum of a sequence of numbers (NOT strings) plus the value
of parameter 'start' (which defaults to 0).  When the sequence is
empty, returns start.
isinstance(object, class-or-type-or-tuple) -> bool
Return whether an object is an instance of a class or of a subclass thereof.
With a type as second argument, return whether that is the object's type.
The form using a tuple, isinstance(x, (A, B, ...)), is a shortcut for
isinstance(x, A) or isinstance(x, B) or ... (etc.).
issubclass(C, B) -> bool
Return whether class C is a subclass (i.e., a derived class) of class B.
When using a tuple as the second argument issubclass(X, (A, B, ...)),
is a shortcut for issubclass(X, A) or issubclass(X, B) or ... (etc.).
zip(seq1 [, seq2 [...]]) -> [(seq1[0], seq2[0] ...), (...)]
Return a list of tuples, where each tuple contains the i-th element
from each of the argument sequences.  The returned list is truncated
in length to the length of the shortest argument sequence.
Built-in functions, exceptions, and other objects.
Noteworthy: None is the `nil' object; Ellipsis represents `...' in slices.
Hello world...N(
hello.pys
Copyright (c) 2001-2013 Python Software Foundation.
All Rights Reserved.
Copyright (c) 2000 BeOpen.com.
All Rights Reserved.
Copyright (c) 1995-2001 Corporation for National Research Initiatives.
All Rights Reserved.
Copyright (c) 1991-1995 Stichting Mathematisch Centrum, Amsterdam.
All Rights Reserved.
This module provides the components needed to build your own
__import__ function.  Undocumented functions are obsolete.
reload(module) -> module
Reload the module.  The module must have been successfully imported before.
find_module(name, [path]) -> (file, filename, (suffix, mode, type))
Search for a module.  If path is omitted or None, search for a
built-in, frozen or special module and continue search in sys.path.
The module name cannot contain '.'; to search for a submodule of a
package, pass the submodule name and the package's __path__.
load_module(name, file, filename, (suffix, mode, type)) -> module
Load a module, given information returned by find_module().
The module name must include the full package name, if any.
get_magic() -> string
Return the magic number for .pyc or .pyo files.
get_suffixes() -> [(suffix, mode, type), ...]
Return a list of (suffix, mode, type) tuples describing the files
that find_module() looks for.
new_module(name) -> module
Create a new module.  Do not enter it in sys.modules.
The module name must include the full package name, if any.
lock_held() -> boolean
Return True if the import lock is currently held, else False.
On platforms without threads, return False.
acquire_lock() -> None
Acquires the interpreter's import lock for the current thread.
This lock should be used by import hooks to ensure thread-safety
when importing modules.
On platforms without threads, this function does nothing.
release_lock() -> None
Release the interpreter's import lock.
On platforms without threads, this function does nothing.
dump(value, file[, version])
Write the value on the open file. The value must be a supported type.
The file must be an open file object such as sys.stdout or returned by
open() or os.popen(). It must be opened in binary mode ('wb' or 'w+b').
If the value has (or contains an object that has) an unsupported type, a
ValueError exception is raised 
 but garbage data will also be written
to the file. The object will not be properly read back by load()
New in version 2.4: The version argument indicates the data format that
dump should use.
load(file)
Read one value from the open file and return it. If no valid value is
read (e.g. because the data has a different Python version
incompatible marshal format), raise EOFError, ValueError or TypeError.
The file must be an open file object opened in binary mode ('rb' or
'r+b').
Note: If an object containing an unsupported type was marshalled with
dump(), load() will substitute None for the unmarshallable type.
dumps(value[, version])
Return the string that would be written to a file by dump(value, file).
The value must be a supported type. Raise a ValueError exception if
value has (or contains an object that has) an unsupported type.
New in version 2.4: The version argument indicates the data format that
dumps should use.
loads(string)
Convert the string to a value. If no valid value is found, raise
EOFError, ValueError or TypeError. Extra characters in the string are
ignored.
This module contains functions that can read and write Python values in
a binary format. The format is specific to Python, but independent of
machine architecture issues.
Not all Python object types are supported; in general, only objects
whose value is independent from a particular invocation of Python can be
written and read by this module. The following types are supported:
None, integers, long integers, floating point numbers, strings, Unicode
objects, tuples, lists, sets, dictionaries, and code objects, where it
should be understood that tuples, lists and dictionaries are only
supported as long as the values contained therein are themselves
supported; and recursive lists and dictionaries should not be written
(they will cause infinite loops).
Variables:
version -- indicates the format that the module uses. Version 0 is the
    historical format, version 1 (added in Python 2.4) shares interned
    strings and version 2 (added in Python 2.5) uses a binary format for
    floating point numbers. (New in version 2.4)
Functions:
dump() -- write value to a file
load() -- read value from a file
dumps() -- write value to a string
loads() -- read value from a string
Python C API version mismatch for module %.100s: This Python has API version %d, module %.100s has version %d.
displayhook(object) -> None
Print an object to sys.stdout and also save it in __builtin__._
excepthook(exctype, value, traceback) -> None
Handle an exception by displaying it with a traceback on sys.stderr.
exc_info() -> (type, value, traceback)
Return information about the most recent exception caught by an except
clause in the current stack frame or in an older stack frame.
exc_clear() -> None
Clear global information on the current exception.  Subsequent calls to
exc_info() will return (None,None,None) until another exception is raised
in the current thread or the execution stack returns to a frame where
another exception is being handled.
exit([status])
Exit the interpreter by raising SystemExit(status).
If the status is omitted or None, it defaults to zero (i.e., success).
If the status is numeric, it will be used as the system exit status.
If it is another kind of object, it will be printed and the system
exit status will be one (i.e., failure).
getdefaultencoding() -> string
Return the current default string encoding used by the Unicode 
implementation.
setdefaultencoding(encoding)
Set the current default string encoding used by the Unicode implementation.
getfilesystemencoding() -> string
Return the encoding used to convert Unicode filenames in
operating system filenames.
sys.version_info
Version information as a named tuple.
settrace(function)
Set the global debug tracing function.  It will be called on each
function call.  See the debugger chapter in the library manual.
gettrace()
Return the global debug tracing function set with sys.settrace.
See the debugger chapter in the library manual.
setprofile(function)
Set the profiling function.  It will be called on each function call
and return.  See the profiler chapter in the library manual.
getprofile()
Return the profiling function set with sys.setprofile.
See the profiler chapter in the library manual.
setcheckinterval(n)
Tell the Python interpreter to check for asynchronous events every
n instructions.  This also affects how often thread switches occur.
getcheckinterval() -> current check interval; see setcheckinterval().
setrecursionlimit(n)
Set the maximum depth of the Python interpreter stack to n.  This
limit prevents infinite recursion from causing an overflow of the C
stack and crashing Python.  The highest possible limit is platform-
dependent.
getrecursionlimit()
Return the current value of the recursion limit, the maximum depth
of the Python interpreter stack.  This limit prevents infinite
recursion from causing an overflow of the C stack and crashing Python.
getwindowsversion()
Return information about the running version of Windows as a named tuple.
The members are named: major, minor, build, platform, service_pack,
service_pack_major, service_pack_minor, suite_mask, and product_type. For
backward compatibility, only the first 5 items are available by indexing.
All elements are numbers, except service_pack which is a string. Platform
may be 0 for win32s, 1 for Windows 9x/ME, 2 for Windows NT/2000/XP/Vista/7,
3 for Windows CE. Product_type may be 1 for a workstation, 2 for a domain
controller, 3 for a server.
getsizeof(object, default) -> int
Return the size of object in bytes.
getrefcount(object) -> integer
Return the reference count of object.  The count returned is generally
one higher than you might expect, because it includes the (temporary)
reference as an argument to getrefcount().
_getframe([depth]) -> frameobject
Return a frame object from the call stack.  If optional integer depth is
given, return the frame object that many calls below the top of the stack.
If that is deeper than the call stack, ValueError is raised.  The default
for depth is zero, returning the frame at the top of the call stack.
This function should be used for internal and specialized
purposes only.
_current_frames() -> dictionary
Return a dictionary mapping each current thread T's thread id to T's
current stack frame.
This function should be used for specialized purposes only.
call_tracing(func, args) -> object
Call func(*args), while tracing is enabled.  The tracing state is
saved, and restored afterwards.  This is intended to be called from
a debugger from a checkpoint, to recursively debug some other code.
callstats() -> tuple of integers
Return a tuple of function call statistics, if CALL_PROFILE was defined
when Python was built.  Otherwise, return None.
When enabled, this function returns detailed, implementation-specific
details about the number of function calls executed. The return value is
a 11-tuple where the entries in the tuple are counts of:
0. all function calls
1. calls to PyFunction_Type objects
2. PyFunction calls that do not create an argument tuple
3. PyFunction calls that do not create an argument tuple
   and bypass PyEval_EvalCodeEx()
4. PyMethod calls
5. PyMethod calls on bound methods
6. PyType calls
7. PyCFunction calls
8. generator calls
9. All other calls
10. Number of stack pops performed by call_function()
_clear_type_cache() -> None
Clear the internal type lookup cache.
This module provides access to some objects used or maintained by the
interpreter and to functions that interact strongly with the interpreter.
Dynamic objects:
argv -- command line arguments; argv[0] is the script pathname if known
path -- module search path; path[0] is the script directory, else ''
modules -- dictionary of loaded modules
displayhook -- called to show results in an interactive session
excepthook -- called to handle any uncaught exception other than SystemExit
  To customize printing in an interactive session or to install a custom
  top-level exception handler, assign other functions to replace these.
exitfunc -- if sys.exitfunc exists, this routine is called when Python exits
  Assigning to sys.exitfunc is deprecated; use the atexit module instead.
stdin -- standard input file object; used by raw_input() and input()
stdout -- standard output file object; used by the print statement
stderr -- standard error object; used for error messages
  By assigning other file objects (or objects that behave like files)
  to these, it is possible to redirect all of the interpreter's I/O.
last_type -- type of last uncaught exception
last_value -- value of last uncaught exception
last_traceback -- traceback of last uncaught exception
  These three are only available in an interactive session after a
  traceback has been printed.
exc_type -- type of exception currently being handled
exc_value -- value of exception currently being handled
exc_traceback -- traceback of exception currently being handled
  The function exc_info() should be used instead of these three,
  because it is thread-safe.
Static objects:
float_info -- a dict with information about the float inplementation.
long_info -- a struct sequence with information about the long implementation.
maxint -- the largest supported integer (the smallest is -maxint-1)
maxsize -- the largest supported length of containers.
maxunicode -- the largest supported character
builtin_module_names -- tuple of module names built into this interpreter
version -- the version of this interpreter as a string
version_info -- version information as a named tuple
hexversion -- version information encoded as a single integer
copyright -- copyright notice pertaining to this interpreter
platform -- platform identifier
executable -- absolute path of the executable binary of the Python interpreter
prefix -- prefix used to find the Python library
exec_prefix -- prefix used to find the machine-specific Python library
float_repr_style -- string indicating the style of repr() output for floats
dllhandle -- [Windows only] integer handle of the Python DLL
winver -- [Windows only] version number of the Python DLL
__stdin__ -- the original stdin; don't touch!
__stdout__ -- the original stdout; don't touch!
__stderr__ -- the original stderr; don't touch!
__displayhook__ -- the original displayhook; don't touch!
__excepthook__ -- the original excepthook; don't touch!
Functions:
displayhook() -- print an object to the screen, and save it in __builtin__._
excepthook() -- print an exception and its traceback to sys.stderr
exc_info() -- return thread-safe information about the current exception
exc_clear() -- clear the exception state for the current thread
exit() -- exit the interpreter by raising SystemExit
getdlopenflags() -- returns flags to be used for dlopen() calls
getprofile() -- get the global profiling function
getrefcount() -- return the reference count for an object (plus one :-)
getrecursionlimit() -- return the max recursion depth for the interpreter
getsizeof() -- return the size of an object in bytes
gettrace() -- get the global debug tracing function
setcheckinterval() -- control how often the interpreter checks for events
setdlopenflags() -- set the flags to be used for dlopen() calls
setprofile() -- set the global profiling function
setrecursionlimit() -- set the max recursion depth for the interpreter
settrace() -- set the global debug tracing function
sys.flags
Flags provided through command line arguments or environment vars.
<assembly xmlns="urn:schemas-microsoft-com:asm.v1" manifestVersion="1.0">
  <trustInfo xmlns="urn:schemas-microsoft-com:asm.v3">
    <security>
      <requestedPrivileges>
        <requestedExecutionLevel level="asInvoker" uiAccess="false"></requestedExecutionLevel>
      </requestedPrivileges>
    </security>
  </trustInfo>
</assembly>PAPADDINGXXPADDINGPADDINGXXPADDINGPADDINGXXPADDINGPADDINGXXPADDINGPADDINGXXPADDINGPADDINGXXPADDINGPADDINGXXPADDINGPADDINGXXPADDINGPADDINGXXPADDINGPADDINGXXPADDINGPADDINGXXPADDINGPADDINGXXPADDINGPADDINGXXPADDINGPADDINGXXPADDINGPADDINGXXPADDINGPADDINGXXPADDINGPADDINGXXPADDINGPADDINGXXPADDINGPADDINGXXPADDINGPADDINGXXPADDINGPADDINGXXPADDINGPADDINGXXPADDINGPADDINGXXPADDINGPADDINGXXPADDINGPADDINGXXPADDINGPADDINGXXPADDINGPADDINGXXPADDINGPADDINGXXPADDINGPADDINGXXPADDINGPADDINGXXPADDINGPADDINGX
